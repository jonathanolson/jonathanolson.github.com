import"../Vector2Property-mpypjo8N.js";import{Q as d,s as q,e as S,f as m,h as f,i as p,g as y,a as z,b as U,c as E,d as A}from"../square-only-edge-sector-DWp3JCND.js";import{B as r}from"../BinaryRuleSequence-CSDFBq6N.js";import{s as B}from"../PatternRule-DfusC3Hu.js";import{g as O,i as h}from"../BinaryRuleCollection-CExP6f1m.js";import"../patternBoards-59tNjMFd.js";import"../RichSolution-B4E0SsJh.js";import"../GenericRichSolution-DIWo2GuT.js";import"../PatternBoardSolver-By-2anvW.js";import"../generalPatternBoardGenerations-BPtAYjK0.js";d.module("pattern rule correctness",()=>{const e=(o,n)=>{n.patternBoards.forEach(l=>{const i=B(l);d.test(`${o} ${i}`,u=>{let a=0;const g=O(l,!1);let s=!0,c=null;n.forEachRule(t=>{s&&t.patternBoard===l&&(++a%50===1&&console.log(o,i,a-1),h(t,!0,g)||(s=!1,c=t.toCanonicalString()))}),u.ok(s,c??"all rules passed")})})};e("square-only-color-unrestricted",r.deserialize(q).collection),e("square-only-edge-sector",r.deserialize(S).collection),e("square-only-edge-sector-unrestricted",r.deserialize(m).collection),e("square-only-all",r.deserialize(f).collection),e("square-only-all-unrestricted",r.deserialize(p).collection),e("general-color-unrestricted",r.deserialize(y).collection),e("general-edge-sector",r.deserialize(z).collection),e("general-edge-sector-unrestricted",r.deserialize(U).collection),e("general-all",r.deserialize(E).collection),e("general-all-unrestricted",r.deserialize(A).collection)});self.assertions.enableAssert();
