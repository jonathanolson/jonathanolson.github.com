import"../UnivariatePolynomial-B1fo8xe7.js";import{Q as d,s as q,e as S,f as m,h as f,i as p,g as y,a as z,b as U,c as E,d as A}from"../square-only-all-unrestricted-DPhefusD.js";import{B as r}from"../BinaryRuleSequence-Cx1D9IlE.js";import{g as B,i as O}from"../BinaryRuleCollection-CEs3YSsv.js";import{s as h}from"../PatternRule-CbsljjHG.js";import"../generalPatternBoardGenerations-DjU58nWO.js";import"../patternBoards-D316jvfQ.js";import"../RichSolution-BE9o6Zv_.js";import"../Highlander-XyUc4N_h.js";import"../PatternBoardSolver-JIwhRtt1.js";import"../compression-L63-wCoo.js";d.module("pattern rule correctness",()=>{const e=(o,i)=>{i.patternBoards.forEach(l=>{const n=h(l);d.test(`${o} ${n}`,u=>{let a=0;const g=B(l,!1);let t=!0,c=null;i.forEachRule(s=>{t&&s.patternBoard===l&&(++a%50===1&&console.log(o,n,a-1),O(s,!0,g)||(t=!1,c=s.toCanonicalString()))}),u.ok(t,c??"all rules passed")})})};e("square-only-color-unrestricted",r.deserialize(q).collection),e("square-only-edge-sector",r.deserialize(S).collection),e("square-only-edge-sector-unrestricted",r.deserialize(m).collection),e("square-only-all",r.deserialize(f).collection),e("square-only-all-unrestricted",r.deserialize(p).collection),e("general-color-unrestricted",r.deserialize(y).collection),e("general-edge-sector",r.deserialize(z).collection),e("general-edge-sector-unrestricted",r.deserialize(U).collection),e("general-all",r.deserialize(E).collection),e("general-all-unrestricted",r.deserialize(A).collection)});self.assertions.enableAssert();
