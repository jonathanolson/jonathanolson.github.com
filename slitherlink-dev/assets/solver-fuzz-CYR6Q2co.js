import"./Vector2Property-mpypjo8N.js";import{N as E,D as x,B as H}from"./PhetioControlledVisibilityProperty-C-W8fgEx.js";import"./localStorage-B8VWGy9j.js";import{m as D,H as F,_ as h,d as W,e as k,P as G}from"./patternBoards-59tNjMFd.js";import{p as L,g as M,a as V,s as d,A as y}from"./AnnotationNode-wYz4OXLp.js";import{P as I,B as z,X as q,Q as v}from"./DisplayEmbedding-Byxzyfzn.js";import{E as S,B as K,s as w}from"./BasicPuzzle-D1EmEwC1.js";import{G as O}from"./SATSolver-I2LwIpNX.js";import"./SlitherQueryParameters-D2_k1AAl.js";import"./Theme-D5xBVTq4.js";import"./SpinningIndicatorNode-BFgzh9_P.js";import"./PatternRule-DfusC3Hu.js";import"./PatternBoardSolver-By-2anvW.js";self.assertions.enableAssert();const A=new E,Q=new E({renderer:"svg",children:[A]}),c=new x(Q,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(c.domElement);c.setWidthHeight(self.innerWidth,self.innerHeight);console.log("test");const R=e=>{const l=e.generate(e.defaultParameterValues);return new G(l,e.scale??1)},P=[new D(10,10),new F(4,1,!0),...L.map(R)];(async()=>{let e=null;const l=new H(!1);for(;;){console.log("board loaded");const t=P[Math.floor(Math.random()*P.length)],b=await M(t,l),p=await V(b,()=>!0,l),r=p.cleanState.clone();p.blackEdges.forEach(f=>r.setEdgeState(f,S.BLACK)),O(t,r);const g=K.fromSolvedPuzzle(p);e&&e.dispose(),e=new I(g,{scale:30,left:20,top:20}),A.addChild(e),c.updateDisplay(),await d(50);const o=g.stateProperty.value.clone(),m=z(t,o),u=()=>{g.stateProperty.value=o.clone(),c.updateDisplay()};let B=0;for(;!w(o);){if(e.clearAnnotationNodes(),B++>1e5)throw new Error("Solver iteration limit exceeded? Looped?");const f=o.clone(),N=m.clone(f),n=m.nextAction();if(n){console.log(n);const s=new q(t,o,r);e.addAnnotationNode(new y(t,n.annotation,v)),u(),await d(0);try{n.apply(s)}catch(i){console.error(i);debugger;const a=N.nextAction();a&&a.apply(s)}n.apply(o)}else if(!w(o)){const s=z(t,o),i=s.nextAction();if(i)throw e.addAnnotationNode(new y(t,i.annotation,v)),u(),await d(0),new Error("Fresh solver should not have any actions");s.dispose();const a=h.find(h.shuffle(t.edges),C=>o.getEdgeState(C)===S.WHITE);if(W()&&k(a),o.setEdgeState(a,r.getEdgeState(a)),console.log("setting white edge to red/black",a),!m.dirty)throw new Error("Solver should be dirty after setting edge state")}u(),await d(0)}if(!w(o))throw new Error("Solver did not solve the puzzle")}})();
