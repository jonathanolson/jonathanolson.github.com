var I1=Object.defineProperty;var F1=(c,t,e)=>t in c?I1(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e;var k=(c,t,e)=>(F1(c,typeof t!="symbol"?t+"":t,e),e);import{z as nt,N as V1,D as Y,t as Ne,ai as et,M as je,S as B1,V as o,aj as ce,ak as Ut,g as ze,o as $e,B as dt,b as Yt,E as R1,d as N1,Y as u1,c as Ke,h as $1,a5 as Kt,a as Qt,a9 as k1,O as kt,R as t1}from"./UnivariatePolynomial-B7u1WGdr.js";function O1(c,t){if(c[t]!==void 0)return t;if(t=t.charAt(0).toUpperCase()+t.slice(1),c[`moz${t}`]!==void 0)return`moz${t}`;if(c[`Moz${t}`]!==void 0)return`Moz${t}`;if(c[`webkit${t}`]!==void 0)return`webkit${t}`;if(c[`ms${t}`]!==void 0)return`ms${t}`;if(c[`o${t}`]!==void 0)return`o${t}`}nt.register("detectPrefix",O1);const rt=navigator.userAgent;function Ie(c){return d1()===c}function e1(){return!!(self.phet&&phet.chipper&&phet.chipper.queryParameters&&phet.chipper.queryParameters["phet-app"]||(rt.match(/(iPod|iPhone|iPad)/)||navigator.platform==="MacIntel"&&navigator.maxTouchPoints>=2)&&rt.match(/AppleWebKit/))}function d1(){let c=-1,t=null;return navigator.appName==="Microsoft Internet Explorer"?(t=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),t.exec(rt)!==null&&(c=parseFloat(RegExp.$1))):navigator.appName==="Netscape"&&(t=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"),t.exec(rt)!==null&&(c=parseFloat(RegExp.$1))),c}const H1={firefox:rt.toLowerCase().includes("firefox"),mobileSafari:e1(),safari5:!!(rt.match(/Version\/5\./)&&rt.match(/Safari\//)&&rt.match(/AppleWebKit/)),safari6:!!(rt.match(/Version\/6\./)&&rt.match(/Safari\//)&&rt.match(/AppleWebKit/)),safari7:!!(rt.match(/Version\/7\./)&&rt.match(/Safari\//)&&rt.match(/AppleWebKit/)),safari10:!!(rt.match(/Version\/10\./)&&rt.match(/Safari\//)&&rt.match(/AppleWebKit/)),safari11:!!(rt.match(/Version\/11\./)&&rt.match(/Safari\//)&&rt.match(/AppleWebKit/)),safari9:!!(rt.match(/Version\/9\./)&&rt.match(/Safari\//)&&rt.match(/AppleWebKit/)),safari:e1()||!!(rt.match(/Version\//)&&rt.match(/Safari\//)&&rt.match(/AppleWebKit/)),ie:d1()!==-1,ie9:Ie(9),ie10:Ie(10),ie11:Ie(11),android:rt.indexOf("Android")>0,edge:!!rt.match(/Edge\//),chromium:/chrom(e|ium)/.test(rt.toLowerCase())&&!rt.match(/Edge\//),chromeOS:rt.indexOf("CrOS")>0,mac:navigator.platform.includes("Mac")};nt.register("platform",H1);function D1(c,t){if(c[`on${t}`]!==void 0)return t;if(c[`onmoz${t}`]!==void 0)return`moz${t}`;if(c[`onMoz${t}`]!==void 0)return`Moz${t}`;if(c[`onwebkit${t}`]!==void 0)return`webkit${t}`;if(c[`onms${t}`]!==void 0)return`ms${t}`;if(c[`ono${t}`]!==void 0)return`o${t}`}nt.register("detectPrefixEvent",D1);const Lt=new V1("kite"),z1=Y.lineLineIntersection,X1={lineWidth:1,lineCap:"butt",lineJoin:"miter",lineDash:[],lineDashOffset:0,miterLimit:10};class ye{constructor(t){const e=Ne({},X1,t);this.lineWidth=e.lineWidth,this.lineCap=e.lineCap,this.lineJoin=e.lineJoin,this.lineDash=e.lineDash,this.lineDashOffset=e.lineDashOffset,this.miterLimit=e.miterLimit,assert&&assert(typeof this.lineWidth=="number",`lineWidth should be a number: ${this.lineWidth}`),assert&&assert(isFinite(this.lineWidth),`lineWidth should be a finite number: ${this.lineWidth}`),assert&&assert(this.lineWidth>=0,`lineWidth should be non-negative: ${this.lineWidth}`),assert&&assert(this.lineCap==="butt"||this.lineCap==="round"||this.lineCap==="square",`Invalid lineCap: ${this.lineCap}`),assert&&assert(this.lineJoin==="miter"||this.lineJoin==="round"||this.lineJoin==="bevel",`Invalid lineJoin: ${this.lineJoin}`),assert&&assert(Array.isArray(this.lineDash),`lineDash should be an array: ${this.lineDash}`),assert&&assert(_.every(this.lineDash,s=>typeof s=="number"&&isFinite(s)&&s>=0),`Every lineDash should be a non-negative finite number: ${this.lineDash}`),assert&&assert(typeof this.lineDashOffset=="number",`lineDashOffset should be a number: ${this.lineDashOffset}`),assert&&assert(isFinite(this.lineDashOffset),`lineDashOffset should be a finite number: ${this.lineDashOffset}`),assert&&assert(typeof this.miterLimit=="number",`miterLimit should be a number: ${this.miterLimit}`),assert&&assert(isFinite(this.miterLimit),`miterLimit should be a finite number: ${this.miterLimit}`)}equals(t){if(!(this.lineWidth===t.lineWidth&&this.lineCap===t.lineCap&&this.lineJoin===t.lineJoin&&this.miterLimit===t.miterLimit&&this.lineDashOffset===t.lineDashOffset))return!1;if(this.lineDash.length===t.lineDash.length){for(let s=0;s<this.lineDash.length;s++)if(this.lineDash[s]!==t.lineDash[s])return!1}else return!1;return!0}copy(){return new ye({lineWidth:this.lineWidth,lineCap:this.lineCap,lineJoin:this.lineJoin,lineDash:this.lineDash,lineDashOffset:this.lineDashOffset,miterLimit:this.miterLimit})}leftJoin(t,e,s){e=e.normalized(),s=s.normalized();const n=t.plus(e.perpendicular.negated().times(this.lineWidth/2)),i=t.plus(s.perpendicular.negated().times(this.lineWidth/2)),r=n.equals(i)?[]:[new $(n,i)];let a,l,h;if(e.perpendicular.dot(s)>1e-12)switch(this.lineJoin){case"round":return a=e.angle+Math.PI/2,l=s.angle+Math.PI/2,[new K(t,this.lineWidth/2,a,l,!0)];case"miter":if(h=e.angleBetween(s.negated()),1/Math.sin(h/2)<=this.miterLimit&&h<Math.PI-1e-5){const M=z1(n,n.plus(e),i,i.plus(s));return M?[new $(n,M),new $(M,i)]:[new $(n,i)]}else return r;case"bevel":return r;default:throw new Error(`invalid lineJoin: ${this.lineJoin}`)}else return r}rightJoin(t,e,s){return this.leftJoin(t,s.negated(),e.negated())}cap(t,e){e=e.normalized();const s=t.plus(e.perpendicular.times(-this.lineWidth/2)),n=t.plus(e.perpendicular.times(this.lineWidth/2));let i,r,a,l,h,M;switch(this.lineCap){case"butt":return[new $(s,n)];case"round":return i=e.angle,[new K(t,this.lineWidth/2,i+Math.PI/2,i-Math.PI/2,!0)];case"square":return r=e.perpendicular.negated().times(this.lineWidth/2),a=e.perpendicular.times(this.lineWidth/2),l=e.times(this.lineWidth/2),h=t.plus(r).plus(l),M=t.plus(a).plus(l),[new $(s,h),new $(h,M),new $(M,n)];default:throw new Error(`invalid lineCap: ${this.lineCap}`)}}}Lt.register("LineStyles",ye);class se{constructor(t,e){assert&&assert(isFinite(t)&&t!==0,"a should be a finite non-zero number"),assert&&assert(isFinite(e),"b should be a finite number"),this.a=t,this.b=e;let s=0,n=1,i=this.apply(s),r=this.apply(n);i>1&&(i=1,s=this.applyInverse(i)),i<0&&(i=0,s=this.applyInverse(i)),r>1&&(r=1,n=this.applyInverse(r)),r<0&&(r=0,n=this.applyInverse(r)),this.t0=s,this.t1=n,t>0?(this.qt0=i,this.qt1=r):(this.qt0=r,this.qt1=i),this.t0<0&&this.t0>-1e-8&&(this.t0=0),this.t0>1&&this.t0<1+1e-8&&(this.t0=1),this.t1<0&&this.t1>-1e-8&&(this.t1=0),this.t1>1&&this.t1<1+1e-8&&(this.t1=1),this.qt0<0&&this.qt0>-1e-8&&(this.qt0=0),this.qt0>1&&this.qt0<1+1e-8&&(this.qt0=1),this.qt1<0&&this.qt1>-1e-8&&(this.qt1=0),this.qt1>1&&this.qt1<1+1e-8&&(this.qt1=1),assert&&assert(this.t0>=0&&this.t0<=1,`t0 out of range: ${this.t0}`),assert&&assert(this.t1>=0&&this.t1<=1,`t1 out of range: ${this.t1}`),assert&&assert(this.qt0>=0&&this.qt0<=1,`qt0 out of range: ${this.qt0}`),assert&&assert(this.qt1>=0&&this.qt1<=1,`qt1 out of range: ${this.qt1}`)}apply(t){return this.a*t+this.b}applyInverse(t){return(t-this.b)/this.a}static createLinear(t,e,s,n){const i=(n-e)/(s-t);return new se(i,e-t*i)}}Lt.register("Overlap",se);class jt{constructor(t,e,s,n,i){assert&&assert(isFinite(t)&&t>=0,"invalid distance"),assert&&assert(Math.abs(s.magnitude-1)<1e-7,"invalid normal"),assert&&assert(i>=-1e-10&&i<=1+1e-10,`t out of range: ${i}`),this.point=e,this.normal=s,this.distance=t,this.wind=n,this.t=Y.clamp(i,0,1)}}Lt.register("RayIntersection",jt);class yt{constructor(t,e,s){assert&&assert(e>=-1e-10&&e<=1+1e-10,"aT out of range"),assert&&assert(s>=-1e-10&&s<=1+1e-10,"bT out of range"),this.point=t,this.aT=Y.clamp(e,0,1),this.bT=Y.clamp(s,0,1)}getSwapped(){return new yt(this.point,this.bT,this.aT)}}Lt.register("SegmentIntersection",yt);const U=c=>c.toFixed(20);Lt.register("svgNumber",U);const Wt=(c,t,e,s)=>c.times(s).minus(t.times(e)),Y1=c=>{const t=c[0],e=c[1],s=c[2],n=c[3],i=c[4],r=c[5],a=c[6],l=c[7],h=c[8];return t.times(i).times(h).plus(e.times(r).times(a)).plus(s.times(n).times(l)).minus(s.times(i).times(a)).minus(e.times(n).times(h)).minus(t.times(r).times(l))},G1=c=>{const t=c[0],e=c[1],s=c[2],n=c[3],i=c[4],r=c[5],a=c[6],l=c[7],h=c[8];return[Wt(i,r,l,h),Wt(e,s,l,h).negate(),Wt(e,s,i,r),Wt(n,r,a,h).negate(),Wt(t,s,a,h),Wt(t,s,n,r).negate(),Wt(n,i,a,l),Wt(t,e,a,l).negate(),Wt(t,e,n,i)]},W1=c=>[c[0],c[3],c[6],c[1],c[4],c[7],c[2],c[5],c[8]],Xe=(c,t=!1)=>_.sortBy([c.slice(0,3),c.slice(3,6),c.slice(6,9)],e=>-(e[0].magnitude+e[1].magnitude+(t?e[2].magnitude:0)))[0],Q1=(c,t=!1)=>Xe(W1(c),t),U1=c=>{const t=G1(c),e=Xe(t);return[et.ZERO,e[2],e[1].negated(),e[2].negated(),et.ZERO,e[0],e[1],e[0].negated(),et.ZERO]},J1=(c,t)=>{const e=c[0],s=c[1],n=c[3],i=c[4],r=t[0],a=t[1],l=t[3],h=t[4],M=a.times(l).minus(r.times(h)),Z=h.negated().times(e).plus(l.times(s)).plus(a.times(n)).minus(r.times(i)),g=s.times(n).minus(e.times(i)),p=et.solveQuadraticRoots(M,Z,g);return p===null?null:p[0]},j1=c=>{const t=U1(c),e=J1(c,t);return e===null?c:[c[0].plus(e.times(t[0])),c[1].plus(e.times(t[1])),c[2].plus(e.times(t[2])),c[3].plus(e.times(t[3])),c[4].plus(e.times(t[4])),c[5].plus(e.times(t[5])),c[6].plus(e.times(t[6])),c[7].plus(e.times(t[7])),c[8].plus(e.times(t[8]))]},K1=c=>{const t=[],e=c[0],s=c[1].times(et.real(2)),n=c[4],i=c[2].times(et.real(2)),r=c[5].times(et.real(2)),a=c[8];let l=[];const h=new et(-2.51653525696959,1.5292850284402),M=n,Z=s.times(h).plus(r),g=e.times(h).times(h).plus(i.times(h)).plus(a),p=et.solveQuadraticRoots(M,Z,g);if(p&&p.length>=2)l=[[h,p[0]],[h,p[1]]];else{const m=e,A=s.times(h).plus(i),x=n.times(h).times(h).plus(r.times(h)).plus(a),b=et.solveQuadraticRoots(m,A,x);if(b&&b.length>=2)l=[[b[0],h],[b[1],h]];else if(p&&p.length===1)l=[[h,p[0]]];else if(b&&b.length===1)l=[[b[0],h]];else throw new Error("Implement more advanced initialization to find two solutions")}return l.forEach(m=>{const A=m[0].real,x=m[1].real,b=m[0].imaginary,w=m[1].imaginary,q=e.real,S=s.real,T=n.real,F=i.real,V=r.real,O=e.imaginary,R=s.imaginary,H=n.imaginary,C=i.imaginary,tt=r.imaginary,mt=new ce(-2*O*b-R*w+F+2*q*A+S*x,-R*b-2*H*w+V+S*A+2*T*x,-C-2*b*q-w*S-2*O*A-R*x,-tt-b*S-2*w*T-R*A-2*H*x),W=new ce(C+2*b*q+w*S+2*O*A+R*x,tt+b*S+2*w*T+R*A+2*H*x,-2*O*b-R*w+F+2*q*A+S*x,-R*b-2*H*w+V+S*A+2*T*x),D=new ce(6.1951068548253,-1.159268950386,.1602918829294,3.205818692048202),J=new ce(-5.420628549296924,-15.2069583028685,.159590602048868,5.10688288040682),X=(at,Mt)=>Mt.timesScalar(at.dot(Mt)/Mt.dot(Mt)),st=mt,j=W.minus(X(W,st)),G=D.minus(X(D,st)).minus(X(D,j)),Q=J.minus(X(J,st)).minus(X(J,j)).minus(X(J,G)),ot=new je(2,2,[G.z,Q.z,G.w,Q.w]),z=new B1(ot).getSingularValues();let lt=null;if(Math.abs(b)<1e-10&&Math.abs(w)<1e-10)lt=new o(A,x);else{if(Math.abs(z[1])>1e-10){const at=ot.solve(new je(2,1,[-b,-w])).extractVector2(0);lt=new o(A+at.x*G.z+at.y*Q.z,x+at.x*G.w+at.y*Q.w)}else if(Math.abs(z[0])>1e-10){const at=Math.abs(G.z)+Math.abs(G.w)>Math.abs(Q.z)+Math.abs(Q.w)?G:Q,Mt=new o(at.z,at.w),wt=new o(b,w).dot(Mt)/Mt.dot(Mt),At=new ce(A,x,b,w).minus(at.timesScalar(wt));Math.abs(At.z)<1e-8&&Math.abs(At.w)<1e-8&&(lt=new o(At.x,At.y))}else lt=null;if(lt){if(Math.abs(z[1])>1e-10)t.push(lt);else if(Math.abs(z[0])>1e-10){const at=Math.abs(G.z)+Math.abs(G.w)>Math.abs(Q.z)+Math.abs(Q.w),Mt=at?Q:G,wt=at?G:Q,gt=Math.abs(wt.z)>Math.abs(wt.w)?Mt.z/wt.z:Mt.w/wt.w,qt=wt.timesScalar(gt).minus(Mt);t.push(new Ut(lt,new o(qt.x,qt.y).normalized()))}}}}),t},ts=c=>{const t=j1(c);return[Xe(t),Q1(t)]},Me=(c,t)=>{const e=c[0],s=c[1],n=c[2],i=t[0],r=t[1],a=t[2],l=i.times(s).minus(e.times(r));if(l.equalsEpsilon(et.ZERO,1e-8))return null;{const h=r.times(n).minus(s.times(a)).dividedBy(l);let M;if(!s.equalsEpsilon(et.ZERO,1e-8))M=e.negated().times(h).minus(n).dividedBy(s);else if(!r.equalsEpsilon(et.ZERO,1e-8))M=i.negated().times(h).minus(a).dividedBy(r);else return null;return Math.abs(h.imaginary)<1e-8&&Math.abs(M.imaginary)<1e-8?new o(h.real,M.real):null}},es=(c,t)=>{const e=c.m00(),s=c.m01(),n=c.m02(),i=c.m10(),r=c.m11(),a=c.m12(),l=c.m20(),h=c.m21(),M=c.m22(),Z=t.m00(),g=t.m01(),p=t.m02(),m=t.m10(),A=t.m11(),x=t.m12(),b=t.m20(),w=t.m21(),q=t.m22(),S=-n*r*l+s*a*l+n*i*h-e*a*h-s*i*M+e*r*M,T=-i*M*g+i*h*p+n*h*m-s*M*m-n*l*A+e*M*A+s*l*x-e*h*x+n*i*w+a*(-h*Z+l*g+s*b-e*w)-s*i*q+r*(M*Z-l*p-n*b+e*q),F=-M*g*m+h*p*m+M*Z*A-l*p*A-h*Z*x+l*g*x+a*g*b-r*p*b-n*A*b+s*x*b-a*Z*w+i*p*w+n*m*w-e*x*w+r*Z*q-i*g*q-s*m*q+e*A*q,V=-p*A*b+g*x*b+p*m*w-Z*x*w-g*m*q+Z*A*q,O=et.solveCubicRoots(et.real(S),et.real(T),et.real(F),et.real(V));if(!O||O.length===0)return{degenerateConicMatrices:[],intersectionCollections:[],points:[],lines:[]};const H=_.uniqWith(O,(W,D)=>W.equals(D)).map(W=>[et.real(e).multiply(W).add(et.real(Z)),et.real(s).multiply(W).add(et.real(g)),et.real(n).multiply(W).add(et.real(p)),et.real(i).multiply(W).add(et.real(m)),et.real(r).multiply(W).add(et.real(A)),et.real(a).multiply(W).add(et.real(x)),et.real(l).multiply(W).add(et.real(b)),et.real(h).multiply(W).add(et.real(w)),et.real(M).multiply(W).add(et.real(q))]);console.log("determinant magnitudes",H.map(W=>Y1(W).magnitude));const C=[],tt=H.map(ts);console.log(tt);const mt=H.map(K1);console.log(mt);for(let W=0;W<tt.length;W++){const D=tt[W],J=Me(D[0],D[1]);J&&C.push(J);for(let X=W+1;X<tt.length;X++){const st=tt[X],j=[Me(D[0],st[0]),Me(D[0],st[1]),Me(D[1],st[0]),Me(D[1],st[1])];for(let G=0;G<4;G++){const Q=j[G];Q&&C.push(Q)}}}return{points:C,degenerateConicMatrices:H,lines:_.flatten(tt),intersectionCollections:mt}};Lt.register("intersectConicMatrices",es);function Z1(c){return'"'+c.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g,escape)+'"'}const Ye={parse:function(c,t){const e={svgPath:a,movetoDrawtoCommandGroups:l,movetoDrawtoCommandGroup:h,drawtoCommands:M,drawtoCommand:Z,moveto:g,movetoArgumentSequence:p,closepath:m,lineto:A,linetoArgumentSequence:x,horizontalLineto:b,horizontalLinetoArgumentSequence:w,verticalLineto:q,verticalLinetoArgumentSequence:S,curveto:T,curvetoArgumentSequence:F,curvetoArgument:V,smoothCurveto:O,smoothCurvetoArgumentSequence:R,smoothCurvetoArgument:H,quadraticBezierCurveto:C,quadraticBezierCurvetoArgumentSequence:tt,quadraticBezierCurvetoArgument:mt,smoothQuadraticBezierCurveto:W,smoothQuadraticBezierCurvetoArgumentSequence:D,ellipticalArc:J,ellipticalArcArgumentSequence:X,ellipticalArcArgument:st,coordinatePair:j,nonnegativeNumber:G,number:Q,flag:ot,commaWsp:z,comma:lt,floatingPointConstant:at,fractionalConstant:Mt,exponent:wt,sign:At,digitSequence:gt,digit:qt,wsp:N};if(t!==void 0){if(e[t]===void 0)throw new Error("Invalid rule name: "+Z1(t)+".")}else t="svgPath";let s=0,n=0,i=[];function r(L){s<n||(s>n&&(n=s,i=[]),i.push(L))}function a(){let L,u,d,f,v,B;for(v=s,B=s,L=[],u=N();u!==null;)L.push(u),u=N();if(L!==null)if(u=l(),u=u!==null?u:"",u!==null){for(d=[],f=N();f!==null;)d.push(f),f=N();d!==null?L=[L,u,d]:(L=null,s=B)}else L=null,s=B;else L=null,s=B;return L!==null&&(L=function(y,I){return I||[]}(v,L[1])),L===null&&(s=v),L}function l(){let L,u,d,f,v;if(f=s,v=s,L=h(),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=l(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;return L!==null&&(L=function(B,y,I){return y.concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=h(),L!==null&&(L=function(B,y){return y}(f,L)),L===null&&(s=f)),L}function h(){let L,u,d,f,v;if(f=s,v=s,L=g(),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=M(),d=d!==null?d:"",d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;return L!==null&&(L=function(B,y,I){return I.length?y.concat(I):y}(f,L[0],L[2])),L===null&&(s=f),L}function M(){let L,u,d,f,v;if(f=s,v=s,L=Z(),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=M(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;return L!==null&&(L=function(B,y,I){return y.concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=Z(),L!==null&&(L=function(B,y){return y}(f,L)),L===null&&(s=f)),L}function Z(){let L;return L=m(),L===null&&(L=A(),L===null&&(L=b(),L===null&&(L=q(),L===null&&(L=T(),L===null&&(L=O(),L===null&&(L=C(),L===null&&(L=W(),L===null&&(L=J())))))))),L}function g(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===77?(L="M",s++):(L=null,r('"M"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=p(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return Pt(y,!1)}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===109?(L="m",s++):(L=null,r('"m"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=p(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return Pt(y,!0)}(f,L[2])),L===null&&(s=f)}return L}function p(){let L,u,d,f,v;return f=s,v=s,L=j(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=x(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=j(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function m(){let L,u;return u=s,c.charCodeAt(s)===90?(L="Z",s++):(L=null,r('"Z"')),L===null&&(c.charCodeAt(s)===122?(L="z",s++):(L=null,r('"z"'))),L!==null&&(L=function(d,f){return{cmd:"close"}}()),L===null&&(s=u),L}function A(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===76?(L="L",s++):(L=null,r('"L"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=x(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>({cmd:"lineTo",args:[I.x,I.y]}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===108?(L="l",s++):(L=null,r('"l"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=x(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>({cmd:"lineToRelative",args:[I.x,I.y]}))}(f,L[2])),L===null&&(s=f)}return L}function x(){let L,u,d,f,v;return f=s,v=s,L=j(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=x(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=j(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function b(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===72?(L="H",s++):(L=null,r('"H"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=w(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>({cmd:"horizontalLineTo",args:[I]}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===104?(L="h",s++):(L=null,r('"h"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=w(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>({cmd:"horizontalLineToRelative",args:[I]}))}(f,L[2])),L===null&&(s=f)}return L}function w(){let L,u,d,f,v;return f=s,v=s,L=Q(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=w(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=Q(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function q(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===86?(L="V",s++):(L=null,r('"V"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=S(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>({cmd:"verticalLineTo",args:[I]}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===118?(L="v",s++):(L=null,r('"v"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=S(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>({cmd:"verticalLineToRelative",args:[I]}))}(f,L[2])),L===null&&(s=f)}return L}function S(){let L,u,d,f,v;return f=s,v=s,L=Q(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=S(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=Q(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function T(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===67?(L="C",s++):(L=null,r('"C"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=F(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>({cmd:"cubicCurveTo",args:I}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===99?(L="c",s++):(L=null,r('"c"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=F(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>({cmd:"cubicCurveToRelative",args:I}))}(f,L[2])),L===null&&(s=f)}return L}function F(){let L,u,d,f,v;return f=s,v=s,L=V(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=F(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=V(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function V(){let L,u,d,f,v,B,y;return B=s,y=s,L=j(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=j(),d!==null?(f=z(),f=f!==null?f:"",f!==null?(v=j(),v!==null?L=[L,u,d,f,v]:(L=null,s=y)):(L=null,s=y)):(L=null,s=y)):(L=null,s=y)):(L=null,s=y),L!==null&&(L=function(I,Jt,Gt,ne){return[Jt.x,Jt.y,Gt.x,Gt.y,ne.x,ne.y]}(B,L[0],L[2],L[4])),L===null&&(s=B),L}function O(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===83?(L="S",s++):(L=null,r('"S"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=R(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>({cmd:"smoothCubicCurveTo",args:I}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===115?(L="s",s++):(L=null,r('"s"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=R(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>({cmd:"smoothCubicCurveToRelative",args:I}))}(f,L[2])),L===null&&(s=f)}return L}function R(){let L,u,d,f,v;return f=s,v=s,L=H(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=R(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=H(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function H(){let L,u,d,f,v;return f=s,v=s,L=j(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=j(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y.x,y.y,I.x,I.y]}(f,L[0],L[2])),L===null&&(s=f),L}function C(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===81?(L="Q",s++):(L=null,r('"Q"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=tt(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>({cmd:"quadraticCurveTo",args:I}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===113?(L="q",s++):(L=null,r('"q"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=tt(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>({cmd:"quadraticCurveToRelative",args:I}))}(f,L[2])),L===null&&(s=f)}return L}function tt(){let L,u,d,f,v;return f=s,v=s,L=mt(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=tt(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=mt(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function mt(){let L,u,d,f,v;return f=s,v=s,L=j(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=j(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y.x,y.y,I.x,I.y]}(f,L[0],L[2])),L===null&&(s=f),L}function W(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===84?(L="T",s++):(L=null,r('"T"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=D(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>({cmd:"smoothQuadraticCurveTo",args:[I.x,I.y]}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===116?(L="t",s++):(L=null,r('"t"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=D(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>({cmd:"smoothQuadraticCurveToRelative",args:[I.x,I.y]}))}(f,L[2])),L===null&&(s=f)}return L}function D(){let L,u,d,f,v;return f=s,v=s,L=j(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=D(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=j(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function J(){let L,u,d,f,v;if(f=s,v=s,c.charCodeAt(s)===65?(L="A",s++):(L=null,r('"A"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=X(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;if(L!==null&&(L=function(B,y){return y.map(I=>(I[2]*=Math.PI/180,{cmd:"ellipticalArcTo",args:I}))}(f,L[2])),L===null&&(s=f),L===null){if(f=s,v=s,c.charCodeAt(s)===97?(L="a",s++):(L=null,r('"a"')),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?(d=X(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)}else L=null,s=v;L!==null&&(L=function(B,y){return y.map(I=>(I[2]*=Math.PI/180,{cmd:"ellipticalArcToRelative",args:I}))}(f,L[2])),L===null&&(s=f)}return L}function X(){let L,u,d,f,v;return f=s,v=s,L=st(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=X(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return[y].concat(I)}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,L=st(),L!==null&&(L=function(B,y){return[y]}(f,L)),L===null&&(s=f)),L}function st(){let L,u,d,f,v,B,y,I,Jt,Gt,ne,Ce,$t;return Ce=s,$t=s,L=G(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=G(),d!==null?(f=z(),f=f!==null?f:"",f!==null?(v=Q(),v!==null?(B=z(),B!==null?(y=ot(),y!==null?(I=z(),I=I!==null?I:"",I!==null?(Jt=ot(),Jt!==null?(Gt=z(),Gt=Gt!==null?Gt:"",Gt!==null?(ne=j(),ne!==null?L=[L,u,d,f,v,B,y,I,Jt,Gt,ne]:(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t)):(L=null,s=$t),L!==null&&(L=function(ML,y1,P1,S1,T1,C1,Je){return[y1,P1,S1,T1,C1,Je.x,Je.y]}(Ce,L[0],L[2],L[4],L[6],L[8],L[10])),L===null&&(s=Ce),L}function j(){let L,u,d,f,v;return f=s,v=s,L=Q(),L!==null?(u=z(),u=u!==null?u:"",u!==null?(d=Q(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return{x:y,y:I}}(f,L[0],L[2])),L===null&&(s=f),L}function G(){let L,u;return u=s,L=at(),L!==null&&(L=function(d,f){return parseFloat(f)}(u,L)),L===null&&(s=u),L===null&&(u=s,L=gt(),L!==null&&(L=function(d,f){return Number(f)}(u,L)),L===null&&(s=u)),L}function Q(){let L,u,d,f;return d=s,f=s,L=At(),L=L!==null?L:"",L!==null?(u=at(),u!==null?L=[L,u]:(L=null,s=f)):(L=null,s=f),L!==null&&(L=function(v,B,y){return parseFloat(B+y)}(d,L[0],L[1])),L===null&&(s=d),L===null&&(d=s,f=s,L=At(),L=L!==null?L:"",L!==null?(u=gt(),u!==null?L=[L,u]:(L=null,s=f)):(L=null,s=f),L!==null&&(L=function(v,B,y){return Number(B+y)}(d,L[0],L[1])),L===null&&(s=d)),L}function ot(){let L,u;return u=s,c.charCodeAt(s)===48?(L="0",s++):(L=null,r('"0"')),L!==null&&(L=function(d){return!1}()),L===null&&(s=u),L===null&&(u=s,c.charCodeAt(s)===49?(L="1",s++):(L=null,r('"1"')),L!==null&&(L=function(d){return!0}()),L===null&&(s=u)),L}function z(){let L,u,d,f,v;if(v=s,u=N(),u!==null)for(L=[];u!==null;)L.push(u),u=N();else L=null;if(L!==null)if(u=lt(),u=u!==null?u:"",u!==null){for(d=[],f=N();f!==null;)d.push(f),f=N();d!==null?L=[L,u,d]:(L=null,s=v)}else L=null,s=v;else L=null,s=v;if(L===null)if(v=s,L=lt(),L!==null){for(u=[],d=N();d!==null;)u.push(d),d=N();u!==null?L=[L,u]:(L=null,s=v)}else L=null,s=v;return L}function lt(){let L;return c.charCodeAt(s)===44?(L=",",s++):(L=null,r('","')),L}function at(){let L,u,d,f;return d=s,f=s,L=Mt(),L!==null?(u=wt(),u=u!==null?u:"",u!==null?L=[L,u]:(L=null,s=f)):(L=null,s=f),L!==null&&(L=function(v,B,y){return B+y}(d,L[0],L[1])),L===null&&(s=d),L===null&&(d=s,f=s,L=gt(),L!==null?(u=wt(),u!==null?L=[L,u]:(L=null,s=f)):(L=null,s=f),L!==null&&(L=function(v,B,y){return B+y}(d,L[0],L[1])),L===null&&(s=d)),L}function Mt(){let L,u,d,f,v;return f=s,v=s,L=gt(),L=L!==null?L:"",L!==null?(c.charCodeAt(s)===46?(u=".",s++):(u=null,r('"."')),u!==null?(d=gt(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I){return y+"."+I}(f,L[0],L[2])),L===null&&(s=f),L===null&&(f=s,v=s,L=gt(),L!==null?(c.charCodeAt(s)===46?(u=".",s++):(u=null,r('"."')),u!==null?L=[L,u]:(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y){return y}(f,L[0])),L===null&&(s=f)),L}function wt(){let L,u,d,f,v;return f=s,v=s,c.charCodeAt(s)===101?(L="e",s++):(L=null,r('"e"')),L===null&&(c.charCodeAt(s)===69?(L="E",s++):(L=null,r('"E"'))),L!==null?(u=At(),u=u!==null?u:"",u!==null?(d=gt(),d!==null?L=[L,u,d]:(L=null,s=v)):(L=null,s=v)):(L=null,s=v),L!==null&&(L=function(B,y,I,Jt){return y+I+Jt}(f,L[0],L[1],L[2])),L===null&&(s=f),L}function At(){let L;return c.charCodeAt(s)===43?(L="+",s++):(L=null,r('"+"')),L===null&&(c.charCodeAt(s)===45?(L="-",s++):(L=null,r('"-"'))),L}function gt(){let L,u,d,f;return d=s,f=s,L=qt(),L!==null?(u=gt(),u!==null?L=[L,u]:(L=null,s=f)):(L=null,s=f),L!==null&&(L=function(v,B,y){return B+y}(d,L[0],L[1])),L===null&&(s=d),L===null&&(L=qt()),L}function qt(){let L;return/^[0-9]/.test(c.charAt(s))?(L=c.charAt(s),s++):(L=null,r("[0-9]")),L}function N(){let L;return c.charCodeAt(s)===32?(L=" ",s++):(L=null,r('" "')),L===null&&(c.charCodeAt(s)===9?(L="	",s++):(L=null,r('"\\t"')),L===null&&(c.charCodeAt(s)===13?(L="\r",s++):(L=null,r('"\\r"')),L===null&&(c.charCodeAt(s)===10?(L=`
`,s++):(L=null,r('"\\n"'))))),L}function Nt(L){L.sort();let u=null;const d=[];for(let f=0;f<L.length;f++)L[f]!==u&&(d.push(L[f]),u=L[f]);return d}function Ft(){let L=1,u=1,d=!1;for(let f=0;f<Math.max(s,n);f++){const v=c.charAt(f);v===`
`?(d||L++,u=1,d=!1):v==="\r"||v==="\u2028"||v==="\u2029"?(L++,u=1,d=!0):(u++,d=!1)}return{line:L,column:u}}function Pt(L,u){const d=[{cmd:u?"moveToRelative":"moveTo",args:[L[0].x,L[0].y]}];if(L.length>1)for(let f=1;f<L.length;f++)d.push({cmd:u?"lineToRelative":"lineTo",args:[L[f].x,L[f].y]});return d}const Ue=e[t]();if(Ue===null||s!==c.length){const L=Math.max(s,n),u=L<c.length?c.charAt(L):null,d=Ft();throw new this.SyntaxError(Nt(i),u,L,d.line,d.column)}return Ue},toSource:function(){return this._source}};Ye.SyntaxError=function(c,t,e,s,n){function i(r,a){let l,h;switch(r.length){case 0:l="end of input";break;case 1:l=r[0];break;default:l=r.slice(0,r.length-1).join(", ")+" or "+r[r.length-1]}return h=a?Z1(a):"end of input","Expected "+l+" but "+h+" found."}this.name="SyntaxError",this.expected=c,this.found=t,this.message=i(c,t),this.offset=e,this.line=s,this.column=n};Ye.SyntaxError.prototype=Error.prototype;Lt.register("svgPath",Ye);const ss=Lt.svgPath;class Zt{constructor(){this.invalidationEmitter=new ze}areStrokedBoundsDilated(){return Math.abs(this.startTangent.x*this.startTangent.y)<1e-7&&Math.abs(this.endTangent.x*this.endTangent.y)<1e-7}getBoundsWithTransform(t){return this.transformed(t).getBounds()}slice(t,e){assert&&assert(t>=0&&t<=1&&e>=0&&e<=1,"Parametric value out of range"),assert&&assert(t<e);let s=this;return e<1&&(s=s.subdivided(e)[0]),t>0&&(s=s.subdivided(Y.linear(0,e,0,1,t))[1]),s}subdivisions(t){let e=this;const s=[];for(let n=0;n<t.length;n++){const i=t[n],r=e.subdivided(i);assert&&assert(r.length===2),s.push(r[0]),e=r[1];for(let a=n+1;a<t.length;a++)t[a]=Y.linear(i,1,0,1,t[a])}return s.push(e),s}subdividedIntoMonotone(){return this.subdivisions(this.getInteriorExtremaTs())}isSufficientlyFlat(t,e){const s=this.start,n=this.positionAt(.5),i=this.end;return Zt.isSufficientlyFlat(t,e,s,n,i)}getArcLength(t,e,s){if(t=t===void 0?1e-10:t,e=e===void 0?1e-8:e,s=s===void 0?15:s,s<=0||this.isSufficientlyFlat(t,e))return this.start.distance(this.end);{const n=this.subdivided(.5);return n[0].getArcLength(t,e,s-1)+n[1].getArcLength(t,e,s-1)}}getDashValues(t,e,s,n){assert&&assert(t.length>0,"Do not call with an empty dash array");const i=this,r=[];let a=0;const l=_.sum(t);e=e%l,e<0&&(e+=l);let h=0,M=0,Z=!0;function g(){h=(h+1)%t.length,Z=!Z}for(;e>0;)e>=t[h]?(e-=t[h],g()):(M=e,e=0);const p=Z;return function m(A,x,b,w,q){const S=(A+x)/2,T=i.positionAt(S);if(q>14||Zt.isSufficientlyFlat(s,n,b,T,w)){const F=b.distance(T)+T.distance(w);a+=F;let V=F;for(;M+V>=t[h];){const O=Y.linear(0,F,A,x,F-V+t[h]-M);r.push(O),V-=t[h]-M,M=0,g()}M=M+V}else m(A,S,b,T,q+1),m(S,x,T,w,q+1)}(0,1,this.start,this.end,0),{values:r,arcLength:a,initiallyInside:p}}toPiecewiseLinearSegments(t,e,s,n,i,r){e=e===void 0?t.minLevels:e,s=s===void 0?t.maxLevels:s,n=n||[];const a=t.pointMap||_.identity;i=i||a(this.start),r=r||a(this.end);const l=a(this.positionAt(.5));assert&&assert(e<=s),assert&&assert(t.distanceEpsilon===null||typeof t.distanceEpsilon=="number"),assert&&assert(t.curveEpsilon===null||typeof t.curveEpsilon=="number"),assert&&assert(!a||typeof a=="function");let h=s===0;if(!h&&e<=0&&(h=this.isSufficientlyFlat(t.distanceEpsilon===null||t.distanceEpsilon===void 0?Number.POSITIVE_INFINITY:t.distanceEpsilon,t.curveEpsilon===null||t.curveEpsilon===void 0?Number.POSITIVE_INFINITY:t.curveEpsilon)),h)n.push(new $(i,r));else{const M=this.subdivided(.5);M[0].toPiecewiseLinearSegments(t,e-1,s-1,n,i,l),M[1].toPiecewiseLinearSegments(t,e-1,s-1,n,l,r)}return n}toPiecewiseLinearOrArcSegments(t){const e=$e()({minLevels:2,maxLevels:7,curvatureThreshold:.02,errorThreshold:10,errorPoints:[.25,.75]},t),s=[];return this.toPiecewiseLinearOrArcRecursion(e,e.minLevels,e.maxLevels,s,0,1,this.positionAt(0),this.positionAt(1),this.curvatureAt(0),this.curvatureAt(1)),s}toPiecewiseLinearOrArcRecursion(t,e,s,n,i,r,a,l,h,M){const Z=(i+r)/2,g=this.positionAt(Z),p=this.curvatureAt(Z);if(s<=0||e<=0&&Math.abs(h-p)+Math.abs(p-M)<t.curvatureThreshold*2){const m=K.createFromPoints(a,g,l);let A=!1;if(m instanceof K){const x=m.radius*m.radius;for(let b=0;b<t.errorPoints.length;b++){const w=t.errorPoints[b],q=this.positionAt(i*(1-w)+r*w);if(Math.abs(q.distanceSquared(m.center)-x)>t.errorThreshold){A=!0;break}}}if(!A){n.push(m);return}}this.toPiecewiseLinearOrArcRecursion(t,e-1,s-1,n,i,Z,a,g,h,p),this.toPiecewiseLinearOrArcRecursion(t,e-1,s-1,n,Z,r,g,l,p,M)}toShape(){return new Bt([new It([this])])}getClosestPoints(t){return Zt.closestToPoint([this],t,1e-7)}static closestToPoint(t,e,s){const n=s*s;let i=[],r=[],a=Number.POSITIVE_INFINITY,l=!1;for(_.each(t,h=>{if(h instanceof $){const M=h.explicitClosestToPoint(e);_.each(M,Z=>{Z.distanceSquared<a?(r=[Z],a=Z.distanceSquared):Z.distanceSquared===a&&r.push(Z)})}else{const M=[0].concat(h.getInteriorExtremaTs()).concat([1]);for(let Z=0;Z<M.length-1;Z++){const g=M[Z],p=M[Z+1],m=h.positionAt(g),A=h.positionAt(p),x=dt.point(m).addPoint(A),b=x.minimumDistanceToPointSquared(e);if(b<=a){const w=x.maximumDistanceToPointSquared(e);w<a&&(a=w,r=[]),i.push({ta:g,tb:p,pa:m,pb:A,segment:h,bounds:x,min:b,max:w})}}}});i.length&&!l;){const h=i;i=[],l=!0;for(const M of h){if(M.min>a)continue;l&&M.pa.distanceSquared(M.pb)>n&&(l=!1);const Z=(M.ta+M.tb)/2,g=M.segment.positionAt(Z),p=dt.point(M.pa).addPoint(g),m=dt.point(M.pb).addPoint(g),A=p.minimumDistanceToPointSquared(e),x=m.minimumDistanceToPointSquared(e);if(A<=a){const b=p.maximumDistanceToPointSquared(e);b<a&&(a=b,r=[]),i.push({ta:M.ta,tb:Z,pa:M.pa,pb:g,segment:M.segment,bounds:p,min:A,max:b})}if(x<=a){const b=m.maximumDistanceToPointSquared(e);b<a&&(a=b,r=[]),i.push({ta:Z,tb:M.tb,pa:g,pb:M.pb,segment:M.segment,bounds:m,min:x,max:b})}}}return _.each(i,h=>{const M=(h.ta+h.tb)/2,Z=h.segment.positionAt(M);r.push({segment:h.segment,t:M,closestPoint:Z,distanceSquared:e.distanceSquared(Z)})}),r}static polynomialGetOverlapCubic(t,e,s,n,i,r,a,l){if(l===0)return Zt.polynomialGetOverlapQuadratic(t,e,s,i,r,a);const h=Math.sign(n/l)*Math.pow(Math.abs(n/l),1/3);if(h===0)return null;const M=(s-h*h*a)/(3*h*h*l);return{a:h,b:M}}static polynomialGetOverlapQuadratic(t,e,s,n,i,r){if(r===0)return Zt.polynomialGetOverlapLinear(t,e,n,i);if(s/r<0)return null;const l=Math.sqrt(s/r);if(l===0)return null;const h=(e-l*i)/(2*l*r);return{a:l,b:h}}static polynomialGetOverlapLinear(t,e,s,n){if(n===0)return t===s?!0:null;const i=e/n;if(i===0)return null;const r=(t-s)/n;return{a:i,b:r}}static intersect(t,e){if($&&t instanceof $&&e instanceof $)return $.intersect(t,e);if($&&t instanceof $)return $.intersectOther(t,e);if($&&e instanceof $)return $.intersectOther(e,t).map(ns);if(K&&t instanceof K&&e instanceof K)return K.intersect(t,e);if(ft&&t instanceof ft&&e instanceof ft)return ft.intersect(t,e);if(ut&&pt&&(t instanceof ut||t instanceof pt)&&(e instanceof ut||e instanceof pt)){const s=t instanceof pt?t:t.degreeElevated(),n=e instanceof pt?e:e.degreeElevated(),i=new paper.Curve(s.start.x,s.start.y,s.control1.x,s.control1.y,s.control2.x,s.control2.y,s.end.x,s.end.y),r=new paper.Curve(n.start.x,n.start.y,n.control1.x,n.control1.y,n.control2.x,n.control2.y,n.end.x,n.end.y);return i.getIntersections(r).map(l=>{const h=new o(l.point.x,l.point.y);return new yt(h,l.time,l.intersection.time)})}else return he.intersect(t,e)}static deserialize(t){return assert&&assert(t.type&&Lt[t.type]&&Lt[t.type].deserialize),Lt[t.type].deserialize(t)}static isSufficientlyFlat(t,e,s,n,i){return!(Y.distToSegmentSquared(n,s,i)/s.distanceSquared(i)>e||Y.distToSegmentSquared(n,s,i)>t)}static filterClosestToPointResult(t){if(t.length===0)return[];const e=_.minBy(t,s=>s.distanceSquared).distanceSquared;return _.uniqWith(t.filter(s=>Math.abs(s.distanceSquared-e)<1e-11),(s,n)=>s.closestPoint.distanceSquared(n.closestPoint)<1e-11)}}Lt.register("Segment",Zt);function ns(c){return c.getSwapped()}const s1=new o(0,0);class $ extends Zt{constructor(t,e){super(),this._start=t,this._end=e,this.invalidate()}setStart(t){return assert&&assert(t.isFinite(),`Line start should be finite: ${t.toString()}`),this._start.equals(t)||(this._start=t,this.invalidate()),this}set start(t){this.setStart(t)}get start(){return this.getStart()}getStart(){return this._start}setEnd(t){return assert&&assert(t.isFinite(),`Line end should be finite: ${t.toString()}`),this._end.equals(t)||(this._end=t,this.invalidate()),this}set end(t){this.setEnd(t)}get end(){return this.getEnd()}getEnd(){return this._end}positionAt(t){return assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1"),this._start.plus(this._end.minus(this._start).times(t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this.getStartTangent()}curvatureAt(t){return assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),0}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this.positionAt(t);return[new $(this._start,e),new $(e,this._end)]}invalidate(){assert&&assert(this._start instanceof o,`Line start should be a Vector2: ${this._start}`),assert&&assert(this._start.isFinite(),`Line start should be finite: ${this._start.toString()}`),assert&&assert(this._end instanceof o,`Line end should be a Vector2: ${this._end}`),assert&&assert(this._end.isFinite(),`Line end should be finite: ${this._end.toString()}`),this._tangent=null,this._bounds=null,this._svgPathFragment=null,this.invalidationEmitter.emit()}getStartTangent(){return this._tangent===null&&(this._tangent=this._end.minus(this._start).normalized()),this._tangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this.getStartTangent()}get endTangent(){return this.getEndTangent()}getBounds(){return this._bounds===null&&(this._bounds=dt.NOTHING.copy().addPoint(this._start).addPoint(this._end)),this._bounds}get bounds(){return this.getBounds()}getBoundsWithTransform(t){const e=dt.NOTHING.copy();return e.addPoint(t.multiplyVector2(s1.set(this._start))),e.addPoint(t.multiplyVector2(s1.set(this._end))),e}getNondegenerateSegments(){return this._start.equals(this._end)?[]:[this]}getSVGPathFragment(){let t;return assert&&(t=this._svgPathFragment,this._svgPathFragment=null),this._svgPathFragment||(this._svgPathFragment=`L ${U(this._end.x)} ${U(this._end.y)}`),assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){const e=this.getEndTangent().perpendicular.negated().times(t/2);return[new $(this._start.plus(e),this._end.plus(e))]}strokeRight(t){const e=this.getStartTangent().perpendicular.times(t/2);return[new $(this._end.plus(e),this._start.plus(e))]}getInteriorExtremaTs(){return[]}intersection(t){const e=[],s=this._start,i=this._end.minus(s);if(i.magnitudeSquared===0)return e;const r=t.direction.y*i.x-t.direction.x*i.y;if(r===0)return e;const a=(t.direction.x*(s.y-t.position.y)-t.direction.y*(s.x-t.position.x))/r;if(a<0||a>=1)return e;const l=(i.x*(s.y-t.position.y)-i.y*(s.x-t.position.x))/r;if(l<1e-8)return e;const h=i.perpendicular,M=s.plus(i.times(a)),Z=(h.dot(t.direction)>0?h.negated():h).normalized(),g=t.direction.perpendicular.dot(i)<0?1:-1;return e.push(new jt(l,M,Z,g,a)),e}windingIntersection(t){const e=this.intersection(t);return e.length?e[0].wind:0}writeToContext(t){t.lineTo(this._end.x,this._end.y)}transformed(t){return new $(t.timesVector2(this._start),t.timesVector2(this._end))}explicitClosestToPoint(t){const e=this._end.minus(this._start);let s=t.minus(this._start).dot(e)/e.magnitudeSquared;s=Y.clamp(s,0,1);const n=this.positionAt(s);return[{segment:this,t:s,closestPoint:n,distanceSquared:t.distanceSquared(n)}]}getSignedAreaFragment(){return 1/2*(this._start.x*this._end.y-this._start.y*this._end.x)}reparameterized(t,e){return new $(this.positionAt(e),this.positionAt(t+e))}reversed(){return new $(this._end,this._start)}polarToCartesian(t){return this._start.x===this._end.x?[new $(o.createPolar(this._start.y,this._start.x),o.createPolar(this._end.y,this._end.x))]:this._start.y===this._end.y?[new K(o.ZERO,this._start.y,this._start.x,this._end.x,this._start.x>this._end.x)]:this.toPiecewiseLinearSegments(t)}getArcLength(){return this.start.distance(this.end)}toPiecewiseLinearOrArcSegments(){return[this]}serialize(){return{type:"Line",startX:this._start.x,startY:this._start.y,endX:this._end.x,endY:this._end.y}}getOverlaps(t,e=1e-6){return t instanceof $?$.getOverlaps(this,t):null}getClosestPoints(t){const e=this._end.minus(this._start),s=e.normalized(),n=t.minus(this._start).dot(s),i=Y.clamp(n/e.magnitude,0,1),r=this.positionAt(i);return[{segment:this,t:i,closestPoint:r,distanceSquared:r.distanceSquared(t)}]}static deserialize(t){return assert&&assert(t.type==="Line"),new $(new o(t.startX,t.startY),new o(t.endX,t.endY))}static getOverlaps(t,e,s=1e-6){const n=[],i=t._start.x,r=-1*t._start.x+t._end.x,a=t._start.y,l=-1*t._start.y+t._end.y,h=e._start.x,M=-1*e._start.x+e._end.x,Z=e._start.y,g=-1*e._start.y+e._end.y,p=Math.abs(Math.max(t._start.x,t._end.x,e._start.x,e._end.x)-Math.min(t._start.x,t._end.x,e._start.x,e._end.x)),m=Math.abs(Math.max(t._start.y,t._end.y,e._start.y,e._end.y)-Math.min(t._start.y,t._end.y,e._start.y,e._end.y)),A=Zt.polynomialGetOverlapLinear(i,r,h,M),x=Zt.polynomialGetOverlapLinear(a,l,Z,g);let b;if(p>m?b=A===null||A===!0?x:A:b=x===null||x===!0?A:x,b===null||b===!0)return n;const w=b.a,q=b.b,S=h+q*M-i,T=w*M-r,F=Z+q*g-a,V=w*g-l;if(Math.abs(S)>s||Math.abs(T+S)>s||Math.abs(F)>s||Math.abs(V+F)>s)return n;const O=q,R=w+q;return O>1&&R>1||O<0&&R<0?n:[new se(w,q)]}static intersect(t,e){const s=Y.lineSegmentIntersection(t.start.x,t.start.y,t.end.x,t.end.y,e.start.x,e.start.y,e.end.x,e.end.y);if(s!==null){const n=t.explicitClosestToPoint(s)[0].t,i=e.explicitClosestToPoint(s)[0].t;return[new yt(s,n,i)]}else return[]}static intersectOther(t,e){const s=t.end.minus(t.start),n=s.magnitude,i=new Ut(t.start,s.normalize()),r=e.intersection(i),a=[];for(let l=0;l<r.length;l++){const h=r[l],M=h.distance/n;M>1e-8&&M<1-1e-8&&a.push(new yt(h.point,M,h.t))}return a}}Lt.register("Line",$);const Ls=Y.solveQuadraticRootsReal,is=Y.arePointsCollinear;function n1(c){return c>=0&&c<=1}class ut extends Zt{constructor(t,e,s){super(),this._start=t,this._control=e,this._end=s,this.invalidate()}setStart(t){return assert&&assert(t.isFinite(),`Quadratic start should be finite: ${t.toString()}`),this._start.equals(t)||(this._start=t,this.invalidate()),this}set start(t){this.setStart(t)}get start(){return this.getStart()}getStart(){return this._start}setControl(t){return assert&&assert(t.isFinite(),`Quadratic control should be finite: ${t.toString()}`),this._control.equals(t)||(this._control=t,this.invalidate()),this}set control(t){this.setControl(t)}get control(){return this.getControl()}getControl(){return this._control}setEnd(t){return assert&&assert(t.isFinite(),`Quadratic end should be finite: ${t.toString()}`),this._end.equals(t)||(this._end=t,this.invalidate()),this}set end(t){this.setEnd(t)}get end(){return this.getEnd()}getEnd(){return this._end}positionAt(t){assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1");const e=1-t;return this._start.times(e*e).plus(this._control.times(2*e*t)).plus(this._end.times(t*t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this._control.minus(this._start).times(2*(1-t)).plus(this._end.minus(this._control).times(2*t))}curvatureAt(t){if(assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),Math.abs(t-.5)>.5-1e-7){const s=t<.5,n=s?this._start:this._end,i=this._control,r=s?this._end:this._start,a=i.minus(n),l=a.magnitude;return(s?-1:1)*a.perpendicular.normalized().dot(r.minus(i))*(this.degree-1)/(this.degree*l*l)}else return this.subdivided(t)[0].curvatureAt(1)}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this._start.blend(this._control,t),s=this._control.blend(this._end,t),n=e.blend(s,t);return[new ut(this._start,e,n),new ut(n,s,this._end)]}invalidate(){assert&&assert(this._start instanceof o,`Quadratic start should be a Vector2: ${this._start}`),assert&&assert(this._start.isFinite(),`Quadratic start should be finite: ${this._start.toString()}`),assert&&assert(this._control instanceof o,`Quadratic control should be a Vector2: ${this._control}`),assert&&assert(this._control.isFinite(),`Quadratic control should be finite: ${this._control.toString()}`),assert&&assert(this._end instanceof o,`Quadratic end should be a Vector2: ${this._end}`),assert&&assert(this._end.isFinite(),`Quadratic end should be finite: ${this._end.toString()}`),this._startTangent=null,this._endTangent=null,this._tCriticalX=null,this._tCriticalY=null,this._bounds=null,this._svgPathFragment=null,this.invalidationEmitter.emit()}getStartTangent(){if(this._startTangent===null){const t=this._start.equals(this._control);this._startTangent=t?this._end.minus(this._start).normalized():this._control.minus(this._start).normalized()}return this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){if(this._endTangent===null){const t=this._end.equals(this._control);this._endTangent=t?this._end.minus(this._start).normalized():this._end.minus(this._control).normalized()}return this._endTangent}get endTangent(){return this.getEndTangent()}getTCriticalX(){return this._tCriticalX===null&&(this._tCriticalX=ut.extremaT(this._start.x,this._control.x,this._end.x)),this._tCriticalX}get tCriticalX(){return this.getTCriticalX()}getTCriticalY(){return this._tCriticalY===null&&(this._tCriticalY=ut.extremaT(this._start.y,this._control.y,this._end.y)),this._tCriticalY}get tCriticalY(){return this.getTCriticalY()}getNondegenerateSegments(){const t=this._start,e=this._control,s=this._end,n=t.equals(s),i=t.equals(e),r=t.equals(e);if(n&&i)return[];if(n){const a=this.positionAt(.5);return[new $(t,a),new $(a,s)]}else if(is(t,e,s)){if(i||r)return[new $(t,s)];const a=s.minus(t),l=e.minus(t).dot(a.normalized())/a.magnitude,h=ut.extremaT(0,l,1);if(!isNaN(h)&&h>0&&h<1){const M=this.positionAt(h);return _.flatten([new $(t,M).getNondegenerateSegments(),new $(M,s).getNondegenerateSegments()])}else return[new $(t,s)]}else return[this]}getBounds(){if(this._bounds===null){this._bounds=new dt(Math.min(this._start.x,this._end.x),Math.min(this._start.y,this._end.y),Math.max(this._start.x,this._end.x),Math.max(this._start.y,this._end.y));const t=this.getTCriticalX(),e=this.getTCriticalY();!isNaN(t)&&t>0&&t<1&&(this._bounds=this._bounds.withPoint(this.positionAt(t))),!isNaN(e)&&e>0&&e<1&&(this._bounds=this._bounds.withPoint(this.positionAt(e)))}return this._bounds}get bounds(){return this.getBounds()}offsetTo(t,e){let s=[this];const n=5;for(let r=0;r<n;r++)s=_.flatten(_.map(s,a=>a.subdivided(.5)));let i=_.map(s,r=>r.approximateOffset(t));return e&&(i.reverse(),i=_.map(i,r=>r.reversed())),i}degreeElevated(){return new pt(this._start,this._start.plus(this._control.timesScalar(2)).dividedScalar(3),this._end.plus(this._control.timesScalar(2)).dividedScalar(3),this._end)}approximateOffset(t){return new ut(this._start.plus((this._start.equals(this._control)?this._end.minus(this._start):this._control.minus(this._start)).perpendicular.normalized().times(t)),this._control.plus(this._end.minus(this._start).perpendicular.normalized().times(t)),this._end.plus((this._end.equals(this._control)?this._end.minus(this._start):this._end.minus(this._control)).perpendicular.normalized().times(t)))}getSVGPathFragment(){let t;return assert&&(t=this._svgPathFragment,this._svgPathFragment=null),this._svgPathFragment||(this._svgPathFragment=`Q ${U(this._control.x)} ${U(this._control.y)} ${U(this._end.x)} ${U(this._end.y)}`),assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return this.offsetTo(-t/2,!1)}strokeRight(t){return this.offsetTo(t/2,!0)}getInteriorExtremaTs(){const t=[],s=this.getTCriticalX(),n=this.getTCriticalY();return!isNaN(s)&&s>1e-10&&s<1-1e-10&&t.push(this.tCriticalX),!isNaN(n)&&n>1e-10&&n<1-1e-10&&t.push(this.tCriticalY),t.sort()}intersection(t){const e=[],s=Yt.rotation2(-t.direction.angle).timesMatrix(Yt.translation(-t.position.x,-t.position.y)),n=s.timesVector2(this._start),i=s.timesVector2(this._control),r=s.timesVector2(this._end),a=n.y-2*i.y+r.y,l=-2*n.y+2*i.y,h=n.y,M=Ls(a,l,h);return _.each(M,Z=>{if(Z>=0&&Z<=1){const g=this.positionAt(Z),p=this.tangentAt(Z).normalized(),m=p.perpendicular,A=g.minus(t.position);if(A.dot(t.direction)>0){const x=m.dot(t.direction)>0?m.negated():m,b=t.direction.perpendicular.dot(p)<0?1:-1;e.push(new jt(A.magnitude,g,x,b,Z))}}}),e}windingIntersection(t){let e=0;const s=this.intersection(t);return _.each(s,n=>{e+=n.wind}),e}writeToContext(t){t.quadraticCurveTo(this._control.x,this._control.y,this._end.x,this._end.y)}transformed(t){return new ut(t.timesVector2(this._start),t.timesVector2(this._control),t.timesVector2(this._end))}getSignedAreaFragment(){return 1/6*(this._start.x*(2*this._control.y+this._end.y)+this._control.x*(-2*this._start.y+2*this._end.y)+this._end.x*(-this._start.y-2*this._control.y))}reparameterized(t,e){const s=this._start.plus(this._end.plus(this._control.timesScalar(-2))),n=this._control.minus(this._start).timesScalar(2),i=this._start,r=s.timesScalar(t*t),a=s.timesScalar(t*e).timesScalar(2).plus(n.timesScalar(t)),l=s.timesScalar(e*e).plus(n.timesScalar(e)).plus(i);return new ut(l,a.timesScalar(.5).plus(l),r.plus(a).plus(l))}reversed(){return new ut(this._end,this._control,this._start)}serialize(){return{type:"Quadratic",startX:this._start.x,startY:this._start.y,controlX:this._control.x,controlY:this._control.y,endX:this._end.x,endY:this._end.y}}getOverlaps(t,e=1e-6){return t instanceof ut?ut.getOverlaps(this,t):null}static deserialize(t){return assert&&assert(t.type==="Quadratic"),new ut(new o(t.startX,t.startY),new o(t.controlX,t.controlY),new o(t.endX,t.endY))}static extremaT(t,e,s){const n=2*(s-2*e+t);return n!==0?-2*(e-t)/n:NaN}static getOverlaps(t,e,s=1e-6){const n=[],i=t._start.x,r=-2*t._start.x+2*t._control.x,a=t._start.x-2*t._control.x+t._end.x,l=t._start.y,h=-2*t._start.y+2*t._control.y,M=t._start.y-2*t._control.y+t._end.y,Z=e._start.x,g=-2*e._start.x+2*e._control.x,p=e._start.x-2*e._control.x+e._end.x,m=e._start.y,A=-2*e._start.y+2*e._control.y,x=e._start.y-2*e._control.y+e._end.y,b=Math.abs(Math.max(t._start.x,t._control.x,t._end.x,e._start.x,e._control.x,e._end.x)-Math.min(t._start.x,t._control.x,t._end.x,e._start.x,e._control.x,e._end.x)),w=Math.abs(Math.max(t._start.y,t._control.y,t._end.y,e._start.y,e._control.y,e._end.y)-Math.min(t._start.y,t._control.y,t._end.y,e._start.y,e._control.y,e._end.y)),q=Zt.polynomialGetOverlapQuadratic(i,r,a,Z,g,p),S=Zt.polynomialGetOverlapQuadratic(l,h,M,m,A,x);let T;if(b>w?T=q===null||q===!0?S:q:T=S===null||S===!0?q:S,T===null||T===!0)return n;const F=T.a,V=T.b,O=F*F,R=V*V,H=2*F*V,C=Z+V*g+R*p-i,tt=F*g+H*p-r,mt=O*p-a,W=m+V*A+R*x-l,D=F*A+H*x-h,J=O*x-M,X=Y.solveLinearRootsReal(2*mt,tt),st=Y.solveLinearRootsReal(2*J,D),j=_.uniq([0,1].concat(X?X.filter(n1):[])),G=_.uniq([0,1].concat(st?st.filter(n1):[]));for(let z=0;z<j.length;z++){const lt=j[z];if(Math.abs((mt*lt+tt)*lt+C)>s)return n}for(let z=0;z<G.length;z++){const lt=G[z];if(Math.abs((J*lt+D)*lt+W)>s)return n}const Q=V,ot=F+V;return Q>1&&ot>1||Q<0&&ot<0?n:[new se(F,V)]}}ut.prototype.degree=2;Lt.register("Quadratic",ut);const rs=Y.solveQuadraticRootsReal,as=Y.solveCubicRootsReal,L1=Y.arePointsCollinear,ve=new o(0,0),os=new o(0,0),ls=new o(0,0);function Fe(c){return c>=0&&c<=1}class pt extends Zt{constructor(t,e,s,n){super(),this._start=t,this._control1=e,this._control2=s,this._end=n,this.invalidate()}setStart(t){return assert&&assert(t.isFinite(),`Cubic start should be finite: ${t.toString()}`),this._start.equals(t)||(this._start=t,this.invalidate()),this}set start(t){this.setStart(t)}get start(){return this.getStart()}getStart(){return this._start}setControl1(t){return assert&&assert(t.isFinite(),`Cubic control1 should be finite: ${t.toString()}`),this._control1.equals(t)||(this._control1=t,this.invalidate()),this}set control1(t){this.setControl1(t)}get control1(){return this.getControl1()}getControl1(){return this._control1}setControl2(t){return assert&&assert(t.isFinite(),`Cubic control2 should be finite: ${t.toString()}`),this._control2.equals(t)||(this._control2=t,this.invalidate()),this}set control2(t){this.setControl2(t)}get control2(){return this.getControl2()}getControl2(){return this._control2}setEnd(t){return assert&&assert(t.isFinite(),`Cubic end should be finite: ${t.toString()}`),this._end.equals(t)||(this._end=t,this.invalidate()),this}set end(t){this.setEnd(t)}get end(){return this.getEnd()}getEnd(){return this._end}positionAt(t){assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1");const e=1-t,s=e*e*e,n=3*e*e*t,i=3*e*t*t,r=t*t*t;return new o(this._start.x*s+this._control1.x*n+this._control2.x*i+this._end.x*r,this._start.y*s+this._control1.y*n+this._control2.y*i+this._end.y*r)}tangentAt(t){assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1");const e=1-t;return new o(0,0).set(this._start).multiplyScalar(-3*e*e).add(ve.set(this._control1).multiplyScalar(3*e*e-6*e*t)).add(ve.set(this._control2).multiplyScalar(6*e*t-3*t*t)).add(ve.set(this._end).multiplyScalar(3*t*t))}curvatureAt(t){if(assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),Math.abs(t-.5)>.5-1e-7){const s=t<.5,n=s?this._start:this._end,i=s?this._control1:this._control2,r=s?this._control2:this._control1,a=i.minus(n),l=a.magnitude;return(s?-1:1)*a.perpendicular.normalized().dot(r.minus(i))*(this.degree-1)/(this.degree*l*l)}else return this.subdivided(t)[0].curvatureAt(1)}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this._start.blend(this._control1,t),s=this._control2.blend(this._end,t),n=this._control1.blend(this._control2,t),i=e.blend(n,t),r=n.blend(s,t),a=i.blend(r,t);return[new pt(this._start,e,i,a),new pt(a,r,s,this._end)]}invalidate(){assert&&assert(this._start instanceof o,`Cubic start should be a Vector2: ${this._start}`),assert&&assert(this._start.isFinite(),`Cubic start should be finite: ${this._start.toString()}`),assert&&assert(this._control1 instanceof o,`Cubic control1 should be a Vector2: ${this._control1}`),assert&&assert(this._control1.isFinite(),`Cubic control1 should be finite: ${this._control1.toString()}`),assert&&assert(this._control2 instanceof o,`Cubic control2 should be a Vector2: ${this._control2}`),assert&&assert(this._control2.isFinite(),`Cubic control2 should be finite: ${this._control2.toString()}`),assert&&assert(this._end instanceof o,`Cubic end should be a Vector2: ${this._end}`),assert&&assert(this._end.isFinite(),`Cubic end should be finite: ${this._end.toString()}`),this._startTangent=null,this._endTangent=null,this._r=null,this._s=null,this._tCusp=null,this._tDeterminant=null,this._tInflection1=null,this._tInflection2=null,this._quadratics=null,this._xExtremaT=null,this._yExtremaT=null,this._bounds=null,this._svgPathFragment=null,this.invalidationEmitter.emit()}getStartTangent(){return this._startTangent===null&&(this._startTangent=this.tangentAt(0).normalized()),this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this._endTangent===null&&(this._endTangent=this.tangentAt(1).normalized()),this._endTangent}get endTangent(){return this.getEndTangent()}getR(){return this._r===null&&(this._r=this._control1.minus(this._start).normalized()),this._r}get r(){return this.getR()}getS(){return this._s===null&&(this._s=this.getR().perpendicular),this._s}get s(){return this.getS()}getTCusp(){return this._tCusp===null&&this.computeCuspInfo(),assert&&assert(this._tCusp!==null),this._tCusp}get tCusp(){return this.getTCusp()}getTDeterminant(){return this._tDeterminant===null&&this.computeCuspInfo(),assert&&assert(this._tDeterminant!==null),this._tDeterminant}get tDeterminant(){return this.getTDeterminant()}getTInflection1(){return this._tInflection1===null&&this.computeCuspInfo(),assert&&assert(this._tInflection1!==null),this._tInflection1}get tInflection1(){return this.getTInflection1()}getTInflection2(){return this._tInflection2===null&&this.computeCuspInfo(),assert&&assert(this._tInflection2!==null),this._tInflection2}get tInflection2(){return this.getTInflection2()}getQuadratics(){return this._quadratics===null&&this.computeCuspSegments(),assert&&assert(this._quadratics!==null),this._quadratics}getXExtremaT(){return this._xExtremaT===null&&(this._xExtremaT=pt.extremaT(this._start.x,this._control1.x,this._control2.x,this._end.x)),this._xExtremaT}get xExtremaT(){return this.getXExtremaT()}getYExtremaT(){return this._yExtremaT===null&&(this._yExtremaT=pt.extremaT(this._start.y,this._control1.y,this._control2.y,this._end.y)),this._yExtremaT}get yExtremaT(){return this.getYExtremaT()}getBounds(){return this._bounds===null&&(this._bounds=dt.NOTHING,this._bounds=this._bounds.withPoint(this._start),this._bounds=this._bounds.withPoint(this._end),_.each(this.getXExtremaT(),t=>{t>=0&&t<=1&&(this._bounds=this._bounds.withPoint(this.positionAt(t)))}),_.each(this.getYExtremaT(),t=>{t>=0&&t<=1&&(this._bounds=this._bounds.withPoint(this.positionAt(t)))}),this.hasCusp()&&(this._bounds=this._bounds.withPoint(this.positionAt(this.getTCusp())))),this._bounds}get bounds(){return this.getBounds()}computeCuspInfo(){const t=this._start.times(-1).plus(this._control1.times(3)).plus(this._control2.times(-3)).plus(this._end),e=this._start.times(3).plus(this._control1.times(-6)).plus(this._control2.times(3)),s=this._start.times(-3).plus(this._control1.times(3)),n=t.perpendicular,i=e.perpendicular,r=n.dot(e);if(this._tCusp=-.5*(n.dot(s)/r),this._tDeterminant=this._tCusp*this._tCusp-1/3*(i.dot(s)/r),this._tDeterminant>=0){const a=Math.sqrt(this._tDeterminant);this._tInflection1=this._tCusp-a,this._tInflection2=this._tCusp+a}else this._tInflection1=NaN,this._tInflection2=NaN}computeCuspSegments(){if(this.hasCusp()){this._quadratics=[];const t=this.getTCusp();if(t===0)this._quadratics.push(new ut(this.start,this.control2,this.end));else if(t===1)this._quadratics.push(new ut(this.start,this.control1,this.end));else{const e=this.subdivided(t);this._quadratics.push(new ut(e[0].start,e[0].control1,e[0].end)),this._quadratics.push(new ut(e[1].start,e[1].control2,e[1].end))}}else this._quadratics=null}getNondegenerateSegments(){const t=this._start,e=this._control1,s=this._control2,n=this._end,i=this.degreeReduced(1e-9);if(t.equals(n)&&t.equals(e)&&t.equals(s))return[];if(this.hasCusp())return _.flatten(this.getQuadratics().map(r=>r.getNondegenerateSegments()));if(i)return i.getNondegenerateSegments();if(L1(t,e,n)&&L1(t,s,n)&&!t.equalsEpsilon(n,1e-7)){const r=this.getXExtremaT().concat(this.getYExtremaT()).sort().map(h=>this.positionAt(h)),a=[];let l=t;r.length&&(a.push(new $(t,r[0])),l=r[0]);for(let h=1;h<r.length;h++)a.push(new $(r[h-1],r[h])),l=r[h];return a.push(new $(l,n)),_.flatten(a.map(h=>h.getNondegenerateSegments()))}else return[this]}hasCusp(){const t=this.getTCusp();return t>=0&&t<=1&&this.tangentAt(t).magnitude<1e-7}toRS(t){const e=t.minus(this._start);return new o(e.dot(this.getR()),e.dot(this.getS()))}offsetTo(t,e){const n=[],i=[];for(let r=0;r<32;r++){let a=r/31;e&&(a=1-a),n.push(this.positionAt(a).plus(this.tangentAt(a).perpendicular.normalized().times(t))),r>0&&i.push(new $(n[r-1],n[r]))}return i}getSVGPathFragment(){let t;return assert&&(t=this._svgPathFragment,this._svgPathFragment=null),this._svgPathFragment||(this._svgPathFragment=`C ${U(this._control1.x)} ${U(this._control1.y)} ${U(this._control2.x)} ${U(this._control2.y)} ${U(this._end.x)} ${U(this._end.y)}`),assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return this.offsetTo(-t/2,!1)}strokeRight(t){return this.offsetTo(t/2,!0)}getInteriorExtremaTs(){const t=this.getXExtremaT().concat(this.getYExtremaT()),e=[];return _.each(t,s=>{s>1e-10&&s<1-1e-10&&_.every(e,i=>Math.abs(s-i)>1e-10)&&e.push(s)}),e.sort()}intersection(t){const e=[],s=Yt.rotation2(-t.direction.angle).timesMatrix(Yt.translation(-t.position.x,-t.position.y)),n=s.timesVector2(this._start),i=s.timesVector2(this._control1),r=s.timesVector2(this._control2),a=s.timesVector2(this._end),l=-n.y+3*i.y-3*r.y+a.y,h=3*n.y-6*i.y+3*r.y,M=-3*n.y+3*i.y,Z=n.y,g=as(l,h,M,Z);return _.each(g,p=>{if(p>=0&&p<=1){const m=this.positionAt(p),A=this.tangentAt(p).normalized(),x=A.perpendicular,b=m.minus(t.position);if(b.dot(t.direction)>0){const w=x.dot(t.direction)>0?x.negated():x,q=t.direction.perpendicular.dot(A)<0?1:-1;e.push(new jt(b.magnitude,m,w,q,p))}}}),e}windingIntersection(t){let e=0;const s=this.intersection(t);return _.each(s,n=>{e+=n.wind}),e}writeToContext(t){t.bezierCurveTo(this._control1.x,this._control1.y,this._control2.x,this._control2.y,this._end.x,this._end.y)}transformed(t){return new pt(t.timesVector2(this._start),t.timesVector2(this._control1),t.timesVector2(this._control2),t.timesVector2(this._end))}degreeReduced(t){t=t||0;const e=ve.set(this._control1).multiplyScalar(3).subtract(this._start).divideScalar(2),s=os.set(this._control2).multiplyScalar(3).subtract(this._end).divideScalar(2);return ls.set(e).subtract(s).magnitude<=t?new ut(this._start,e.average(s),this._end):null}getSignedAreaFragment(){return 1/20*(this._start.x*(6*this._control1.y+3*this._control2.y+this._end.y)+this._control1.x*(-6*this._start.y+3*this._control2.y+3*this._end.y)+this._control2.x*(-3*this._start.y-3*this._control1.y+6*this._end.y)+this._end.x*(-this._start.y-3*this._control1.y-6*this._control2.y))}reversed(){return new pt(this._end,this._control2,this._control1,this._start)}getSelfIntersection(){const t=this.getInteriorExtremaTs(),e=[0].concat(t).concat([1]),s=this.subdivisions(t);if(s.length<3)return null;for(let n=0;n<s.length;n++){const i=s[n];for(let r=n+1;r<s.length;r++){const a=s[r],l=he.intersect(i,a);if(assert&&assert(l.length<2),l.length){const h=l[0];if(h.aT>1e-7&&h.aT<1-1e-7&&h.bT>1e-7&&h.bT<1-1e-7){const M=e[n]+h.aT*(e[n+1]-e[n]),Z=e[r]+h.bT*(e[r+1]-e[r]);return new yt(h.point,M,Z)}}}}return null}serialize(){return{type:"Cubic",startX:this._start.x,startY:this._start.y,control1X:this._control1.x,control1Y:this._control1.y,control2X:this._control2.x,control2Y:this._control2.y,endX:this._end.x,endY:this._end.y}}getOverlaps(t,e=1e-6){return t instanceof pt?pt.getOverlaps(this,t):null}static deserialize(t){return assert&&assert(t.type==="Cubic"),new pt(new o(t.startX,t.startY),new o(t.control1X,t.control1Y),new o(t.control2X,t.control2Y),new o(t.endX,t.endY))}static extremaT(t,e,s,n){if(t===e&&t===s&&t===n)return[];const i=-3*t+9*e-9*s+3*n,r=6*t-12*e+6*s,a=-3*t+3*e;return _.filter(rs(i,r,a),Fe)}static getOverlaps(t,e,s=1e-6){const n=[],i=t._start.x,r=-3*t._start.x+3*t._control1.x,a=3*t._start.x-6*t._control1.x+3*t._control2.x,l=-1*t._start.x+3*t._control1.x-3*t._control2.x+t._end.x,h=t._start.y,M=-3*t._start.y+3*t._control1.y,Z=3*t._start.y-6*t._control1.y+3*t._control2.y,g=-1*t._start.y+3*t._control1.y-3*t._control2.y+t._end.y,p=e._start.x,m=-3*e._start.x+3*e._control1.x,A=3*e._start.x-6*e._control1.x+3*e._control2.x,x=-1*e._start.x+3*e._control1.x-3*e._control2.x+e._end.x,b=e._start.y,w=-3*e._start.y+3*e._control1.y,q=3*e._start.y-6*e._control1.y+3*e._control2.y,S=-1*e._start.y+3*e._control1.y-3*e._control2.y+e._end.y,T=Math.abs(Math.max(t._start.x,t._control1.x,t._control2.x,t._end.x,t._start.x,t._control1.x,t._control2.x,t._end.x)-Math.min(t._start.x,t._control1.x,t._control2.x,t._end.x,t._start.x,t._control1.x,t._control2.x,t._end.x)),F=Math.abs(Math.max(t._start.y,t._control1.y,t._control2.y,t._end.y,t._start.y,t._control1.y,t._control2.y,t._end.y)-Math.min(t._start.y,t._control1.y,t._control2.y,t._end.y,t._start.y,t._control1.y,t._control2.y,t._end.y)),V=Zt.polynomialGetOverlapCubic(i,r,a,l,p,m,A,x),O=Zt.polynomialGetOverlapCubic(h,M,Z,g,b,w,q,S);let R;if(T>F?R=V===null||V===!0?O:V:R=O===null||O===!0?V:O,R===null||R===!0)return n;const H=R.a,C=R.b,tt=H*H,mt=H*H*H,W=C*C,D=C*C*C,J=2*H*C,X=3*H*W,st=3*tt*C,j=p+C*m+W*A+D*x-i,G=H*m+J*A+X*x-r,Q=tt*A+st*x-a,ot=mt*x-l,z=b+C*w+W*q+D*S-h,lt=H*w+J*q+X*S-M,at=tt*q+st*S-Z,Mt=mt*S-g,wt=Y.solveQuadraticRootsReal(3*ot,2*Q,G),At=Y.solveQuadraticRootsReal(3*Mt,2*at,lt),gt=_.uniq([0,1].concat(wt!==null?wt.filter(Fe):[])),qt=_.uniq([0,1].concat(At!==null?At.filter(Fe):[]));for(let Ft=0;Ft<gt.length;Ft++){const Pt=gt[Ft];if(Math.abs(((ot*Pt+Q)*Pt+G)*Pt+j)>s)return n}for(let Ft=0;Ft<qt.length;Ft++){const Pt=qt[Ft];if(Math.abs(((Mt*Pt+at)*Pt+lt)*Pt+z)>s)return n}const N=C,Nt=H+C;return N>1&&Nt>1||N<0&&Nt<0?n:[new se(H,C)]}}pt.prototype.degree=3;Lt.register("Cubic",pt);const zt=Math.PI*2;class K extends Zt{constructor(t,e,s,n,i){super(),this._center=t,this._radius=e,this._startAngle=s,this._endAngle=n,this._anticlockwise=i,this.invalidate()}setCenter(t){return assert&&assert(t.isFinite(),`Arc center should be finite: ${t.toString()}`),this._center.equals(t)||(this._center=t,this.invalidate()),this}set center(t){this.setCenter(t)}get center(){return this.getCenter()}getCenter(){return this._center}setRadius(t){return assert&&assert(isFinite(t),`Arc radius should be a finite number: ${t}`),this._radius!==t&&(this._radius=t,this.invalidate()),this}set radius(t){this.setRadius(t)}get radius(){return this.getRadius()}getRadius(){return this._radius}setStartAngle(t){return assert&&assert(isFinite(t),`Arc startAngle should be a finite number: ${t}`),this._startAngle!==t&&(this._startAngle=t,this.invalidate()),this}set startAngle(t){this.setStartAngle(t)}get startAngle(){return this.getStartAngle()}getStartAngle(){return this._startAngle}setEndAngle(t){return assert&&assert(isFinite(t),`Arc endAngle should be a finite number: ${t}`),this._endAngle!==t&&(this._endAngle=t,this.invalidate()),this}set endAngle(t){this.setEndAngle(t)}get endAngle(){return this.getEndAngle()}getEndAngle(){return this._endAngle}setAnticlockwise(t){return this._anticlockwise!==t&&(this._anticlockwise=t,this.invalidate()),this}set anticlockwise(t){this.setAnticlockwise(t)}get anticlockwise(){return this.getAnticlockwise()}getAnticlockwise(){return this._anticlockwise}positionAt(t){return assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1"),this.positionAtAngle(this.angleAt(t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this.tangentAtAngle(this.angleAt(t))}curvatureAt(t){return assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),(this._anticlockwise?-1:1)/this._radius}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this.angleAt(0),s=this.angleAt(t),n=this.angleAt(1);return[new K(this._center,this._radius,e,s,this._anticlockwise),new K(this._center,this._radius,s,n,this._anticlockwise)]}invalidate(){this._start=null,this._end=null,this._startTangent=null,this._endTangent=null,this._actualEndAngle=null,this._isFullPerimeter=null,this._angleDifference=null,this._bounds=null,this._svgPathFragment=null,assert&&assert(this._center instanceof o,"Arc center should be a Vector2"),assert&&assert(this._center.isFinite(),"Arc center should be finite (not NaN or infinite)"),assert&&assert(typeof this._radius=="number",`Arc radius should be a number: ${this._radius}`),assert&&assert(isFinite(this._radius),`Arc radius should be a finite number: ${this._radius}`),assert&&assert(typeof this._startAngle=="number",`Arc startAngle should be a number: ${this._startAngle}`),assert&&assert(isFinite(this._startAngle),`Arc startAngle should be a finite number: ${this._startAngle}`),assert&&assert(typeof this._endAngle=="number",`Arc endAngle should be a number: ${this._endAngle}`),assert&&assert(isFinite(this._endAngle),`Arc endAngle should be a finite number: ${this._endAngle}`),assert&&assert(typeof this._anticlockwise=="boolean",`Arc anticlockwise should be a boolean: ${this._anticlockwise}`),this._radius<0&&(this._radius=-this._radius,this._startAngle+=Math.PI,this._endAngle+=Math.PI),assert&&assert(!(!this.anticlockwise&&this._endAngle-this._startAngle<=-Math.PI*2||this.anticlockwise&&this._startAngle-this._endAngle<=-Math.PI*2),"Not handling arcs with start/end angles that show differences in-between browser handling"),assert&&assert(!(!this.anticlockwise&&this._endAngle-this._startAngle>Math.PI*2||this.anticlockwise&&this._startAngle-this._endAngle>Math.PI*2),"Not handling arcs with start/end angles that show differences in-between browser handling"),this.invalidationEmitter.emit()}getStart(){return this._start===null&&(this._start=this.positionAtAngle(this._startAngle)),this._start}get start(){return this.getStart()}getEnd(){return this._end===null&&(this._end=this.positionAtAngle(this._endAngle)),this._end}get end(){return this.getEnd()}getStartTangent(){return this._startTangent===null&&(this._startTangent=this.tangentAtAngle(this._startAngle)),this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this._endTangent===null&&(this._endTangent=this.tangentAtAngle(this._endAngle)),this._endTangent}get endTangent(){return this.getEndTangent()}getActualEndAngle(){return this._actualEndAngle===null&&(this._actualEndAngle=K.computeActualEndAngle(this._startAngle,this._endAngle,this._anticlockwise)),this._actualEndAngle}get actualEndAngle(){return this.getActualEndAngle()}getIsFullPerimeter(){return this._isFullPerimeter===null&&(this._isFullPerimeter=!this._anticlockwise&&this._endAngle-this._startAngle>=Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle>=Math.PI*2),this._isFullPerimeter}get isFullPerimeter(){return this.getIsFullPerimeter()}getAngleDifference(){return this._angleDifference===null&&(this._angleDifference=this._anticlockwise?this._startAngle-this._endAngle:this._endAngle-this._startAngle,this._angleDifference<0&&(this._angleDifference+=Math.PI*2),assert&&assert(this._angleDifference>=0)),this._angleDifference}get angleDifference(){return this.getAngleDifference()}getBounds(){return this._bounds===null&&(this._bounds=dt.NOTHING.copy().withPoint(this.getStart()).withPoint(this.getEnd()),this._startAngle!==this._endAngle&&(this.includeBoundsAtAngle(0),this.includeBoundsAtAngle(Math.PI/2),this.includeBoundsAtAngle(Math.PI),this.includeBoundsAtAngle(3*Math.PI/2))),this._bounds}get bounds(){return this.getBounds()}getNondegenerateSegments(){return this._radius<=0||this._startAngle===this._endAngle?[]:[this]}includeBoundsAtAngle(t){this.containsAngle(t)&&(this._bounds=this._bounds.withPoint(this._center.plus(o.createPolar(this._radius,t))))}mapAngle(t){return Math.abs(Y.moduloBetweenDown(t-this._startAngle,-Math.PI,Math.PI))<1e-8?this._startAngle:Math.abs(Y.moduloBetweenDown(t-this.getActualEndAngle(),-Math.PI,Math.PI))<1e-8?this.getActualEndAngle():this._startAngle>this.getActualEndAngle()?Y.moduloBetweenUp(t,this._startAngle-2*Math.PI,this._startAngle):Y.moduloBetweenDown(t,this._startAngle,this._startAngle+2*Math.PI)}tAtAngle(t){const e=(this.mapAngle(t)-this._startAngle)/(this.getActualEndAngle()-this._startAngle);return assert&&assert(e>=0&&e<=1,`tAtAngle out of range: ${e}`),e}angleAt(t){return this._startAngle+(this.getActualEndAngle()-this._startAngle)*t}positionAtAngle(t){return this._center.plus(o.createPolar(this._radius,t))}tangentAtAngle(t){const e=o.createPolar(1,t);return this._anticlockwise?e.perpendicular:e.perpendicular.negated()}containsAngle(t){const e=this._anticlockwise?t-this._endAngle:t-this._startAngle;return Y.moduloBetweenDown(e,0,Math.PI*2)<=this.angleDifference}getSVGPathFragment(){let t;if(assert&&(t=this._svgPathFragment,this._svgPathFragment=null),!this._svgPathFragment){const s=this._anticlockwise?"0":"1";let n;if(this.angleDifference<Math.PI*2-.01)n=this.angleDifference<Math.PI?"0":"1",this._svgPathFragment=`A ${U(this._radius)} ${U(this._radius)} 0 ${n} ${s} ${U(this.end.x)} ${U(this.end.y)}`;else{const i=(this._startAngle+this._endAngle)/2,r=this._center.plus(o.createPolar(this._radius,i));n="0";const a=`A ${U(this._radius)} ${U(this._radius)} 0 ${n} ${s} ${U(r.x)} ${U(r.y)}`,l=`A ${U(this._radius)} ${U(this._radius)} 0 ${n} ${s} ${U(this.end.x)} ${U(this.end.y)}`;this._svgPathFragment=`${a} ${l}`}}return assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return[new K(this._center,this._radius+(this._anticlockwise?1:-1)*t/2,this._startAngle,this._endAngle,this._anticlockwise)]}strokeRight(t){return[new K(this._center,this._radius+(this._anticlockwise?-1:1)*t/2,this._endAngle,this._startAngle,!this._anticlockwise)]}getInteriorExtremaTs(){const t=[];return _.each([0,Math.PI/2,Math.PI,3*Math.PI/2],e=>{if(this.containsAngle(e)){const s=this.tAtAngle(e),n=1e-10;s>n&&s<1-n&&t.push(s)}}),t.sort()}intersection(t){const e=[],n=t.position.minus(this._center),i=t.direction.dot(n),r=n.magnitudeSquared,a=4*i*i-4*(r-this._radius*this._radius);if(a<0)return e;const l=t.direction.dot(this._center)-t.direction.dot(t.position),h=Math.sqrt(a)/2,M=l-h,Z=l+h;if(Z<0)return e;const g=t.pointAtDistance(Z),p=g.minus(this._center).normalized(),m=p.angle;if(M<0)this.containsAngle(m)&&e.push(new jt(Z,g,p.negated(),this._anticlockwise?-1:1,this.tAtAngle(m)));else{const A=t.pointAtDistance(M),x=A.minus(this._center).normalized(),b=x.angle;this.containsAngle(b)&&e.push(new jt(M,A,x,this._anticlockwise?1:-1,this.tAtAngle(b))),this.containsAngle(m)&&e.push(new jt(Z,g,p.negated(),this._anticlockwise?-1:1,this.tAtAngle(m)))}return e}windingIntersection(t){let e=0;const s=this.intersection(t);return _.each(s,n=>{e+=n.wind}),e}writeToContext(t){t.arc(this._center.x,this._center.y,this._radius,this._startAngle,this._endAngle,this._anticlockwise)}transformed(t){const e=t.timesVector2(o.createPolar(1,this._startAngle)).minus(t.timesVector2(o.ZERO)).angle;let s=t.timesVector2(o.createPolar(1,this._endAngle)).minus(t.timesVector2(o.ZERO)).angle;const n=t.getDeterminant()>=0?this._anticlockwise:!this._anticlockwise;Math.abs(this._endAngle-this._startAngle)===Math.PI*2&&(s=n?e-Math.PI*2:e+Math.PI*2);const i=t.getScaleVector();if(i.x!==i.y){const r=i.x*this._radius,a=i.y*this._radius;return new ft(t.timesVector2(this._center),r,a,0,e,s,n)}else{const r=i.x*this._radius;return new K(t.timesVector2(this._center),r,e,s,n)}}getSignedAreaFragment(){const t=this._startAngle,e=this.getActualEndAngle();return .5*this._radius*(this._radius*(e-t)+this._center.x*(Math.sin(e)-Math.sin(t))-this._center.y*(Math.cos(e)-Math.cos(t)))}reversed(){return new K(this._center,this._radius,this._endAngle,this._startAngle,!this._anticlockwise)}getArcLength(){return this.getAngleDifference()*this._radius}toPiecewiseLinearOrArcSegments(){return[this]}serialize(){return{type:"Arc",centerX:this._center.x,centerY:this._center.y,radius:this._radius,startAngle:this._startAngle,endAngle:this._endAngle,anticlockwise:this._anticlockwise}}getOverlaps(t,e=1e-6){return t instanceof K?K.getOverlaps(this,t):null}getConicMatrix(){const t=this.center.x,e=this.center.y,s=1,n=0,i=1,r=-2*t,a=-2*e,l=t*t+e*e-this.radius*this.radius;return Yt.rowMajor(s,n/2,r/2,n/2,i,a/2,r/2,a/2,l)}static deserialize(t){return assert&&assert(t.type==="Arc"),new K(new o(t.centerX,t.centerY),t.radius,t.startAngle,t.endAngle,t.anticlockwise)}static computeActualEndAngle(t,e,s){return s?t>e?e:t<e?e-2*Math.PI:t:t<e?e:t>e?e+Math.PI*2:t}static getPartialOverlap(t,e,s,n,i){assert&&assert(t>0&&t<=zt+1e-10),assert&&assert(e>=0&&e<zt+1e-10),assert&&assert(s>=0&&s<=zt+1e-10),assert&&assert(n>=0&&n<=1),assert&&assert(i>=0&&i<=1);const r=s<e,a=r?s:e,l=r?e:s,h=a,M=Math.min(t,l);return M<h+1e-8?[]:[se.createLinear(Y.clamp(Y.linear(0,t,0,1,h),0,1),Y.clamp(Y.linear(e,s,n,i,h),0,1),Y.clamp(Y.linear(0,t,0,1,M),0,1),Y.clamp(Y.linear(e,s,n,i,M),0,1))]}static getAngularOverlaps(t,e,s,n){assert&&assert(isFinite(t)),assert&&assert(isFinite(e)),assert&&assert(isFinite(s)),assert&&assert(isFinite(n));let i=e-t;const r=i<0?-1:1;i*=r;const a=Y.moduloBetweenDown(r*(s-t),0,zt),l=r*(n-s)+a;let h;return l<-1e-10?(h=-a/(l-a),K.getPartialOverlap(i,a,0,0,h).concat(K.getPartialOverlap(i,zt,l+zt,h,1))):l>zt+1e-10?(h=(zt-a)/(l-a),K.getPartialOverlap(i,a,zt,0,h).concat(K.getPartialOverlap(i,0,l-zt,h,1))):K.getPartialOverlap(i,a,l,0,1)}static getOverlaps(t,e){return t._center.distance(e._center)>1e-4||Math.abs(t._radius-e._radius)>1e-4?[]:K.getAngularOverlaps(t._startAngle,t.getActualEndAngle(),e._startAngle,e.getActualEndAngle())}static getCircleIntersectionPoint(t,e,s,n){assert&&assert(isFinite(e)&&e>=0),assert&&assert(isFinite(n)&&n>=0);const i=s.minus(t),r=i.magnitude;let a=[];if(!(r<1e-10||r>e+n+1e-10))if(r>e+n-1e-10)a=[t.blend(s,e/r)];else{const l=.5*(r*r-n*n+e*e)/r,h=r*r-n*n+e*e,M=4*r*r*e*e-h*h,Z=t.blend(s,l/r);if(M>=1e-10){const g=Math.sqrt(M)/r/2,p=i.perpendicular.setMagnitude(g);a=[Z.plus(p),Z.minus(p)]}else M>-1e-10&&(a=[Z])}return assert&&a.forEach(l=>{assert(Math.abs(l.distance(t)-e)<1e-8),assert(Math.abs(l.distance(s)-n)<1e-8)}),a}static intersect(t,e){const n=[];if(t._center.equalsEpsilon(e._center,1e-7)&&Math.abs(t._radius-e._radius)<1e-7){const i=t.positionAt(0),r=t.positionAt(1),a=e.positionAt(0),l=e.positionAt(1);i.equalsEpsilon(a,1e-7)&&n.push(new yt(i.average(a),0,0)),i.equalsEpsilon(l,1e-7)&&n.push(new yt(i.average(l),0,1)),r.equalsEpsilon(a,1e-7)&&n.push(new yt(r.average(a),1,0)),r.equalsEpsilon(l,1e-7)&&n.push(new yt(r.average(l),1,1))}else{const i=K.getCircleIntersectionPoint(t._center,t._radius,e._center,e._radius);for(let r=0;r<i.length;r++){const a=i[r],l=a.minus(t._center).angle,h=a.minus(e._center).angle;t.containsAngle(l)&&e.containsAngle(h)&&n.push(new yt(a,t.tAtAngle(l),e.tAtAngle(h)))}}return n}static createFromPoints(t,e,s){const n=Y.circleCenterFromPoints(t,e,s);if(n===null)return new $(t,s);{const i=t.minus(n),r=e.minus(n),a=s.minus(n),l=i.angle,h=r.angle,M=a.angle,Z=(i.magnitude+r.magnitude+a.magnitude)/3,g=new K(n,Z,l,M,!1);return g.containsAngle(h)?g:new K(n,Z,l,M,!0)}}}Lt.register("Arc",K);const hs=Y.toDegrees,cs=Yt.rowMajor(1,0,0,0,1,0,0,0,-1);class ft extends Zt{constructor(t,e,s,n,i,r,a){super(),this._center=t,this._radiusX=e,this._radiusY=s,this._rotation=n,this._startAngle=i,this._endAngle=r,this._anticlockwise=a,this.invalidate()}setCenter(t){return assert&&assert(t.isFinite(),`EllipticalArc center should be finite: ${t.toString()}`),this._center.equals(t)||(this._center=t,this.invalidate()),this}set center(t){this.setCenter(t)}get center(){return this.getCenter()}getCenter(){return this._center}setRadiusX(t){return assert&&assert(isFinite(t),`EllipticalArc radiusX should be a finite number: ${t}`),this._radiusX!==t&&(this._radiusX=t,this.invalidate()),this}set radiusX(t){this.setRadiusX(t)}get radiusX(){return this.getRadiusX()}getRadiusX(){return this._radiusX}setRadiusY(t){return assert&&assert(isFinite(t),`EllipticalArc radiusY should be a finite number: ${t}`),this._radiusY!==t&&(this._radiusY=t,this.invalidate()),this}set radiusY(t){this.setRadiusY(t)}get radiusY(){return this.getRadiusY()}getRadiusY(){return this._radiusY}setRotation(t){return assert&&assert(isFinite(t),`EllipticalArc rotation should be a finite number: ${t}`),this._rotation!==t&&(this._rotation=t,this.invalidate()),this}set rotation(t){this.setRotation(t)}get rotation(){return this.getRotation()}getRotation(){return this._rotation}setStartAngle(t){return assert&&assert(isFinite(t),`EllipticalArc startAngle should be a finite number: ${t}`),this._startAngle!==t&&(this._startAngle=t,this.invalidate()),this}set startAngle(t){this.setStartAngle(t)}get startAngle(){return this.getStartAngle()}getStartAngle(){return this._startAngle}setEndAngle(t){return assert&&assert(isFinite(t),`EllipticalArc endAngle should be a finite number: ${t}`),this._endAngle!==t&&(this._endAngle=t,this.invalidate()),this}set endAngle(t){this.setEndAngle(t)}get endAngle(){return this.getEndAngle()}getEndAngle(){return this._endAngle}setAnticlockwise(t){return this._anticlockwise!==t&&(this._anticlockwise=t,this.invalidate()),this}set anticlockwise(t){this.setAnticlockwise(t)}get anticlockwise(){return this.getAnticlockwise()}getAnticlockwise(){return this._anticlockwise}positionAt(t){return assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1"),this.positionAtAngle(this.angleAt(t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this.tangentAtAngle(this.angleAt(t))}curvatureAt(t){assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1");const e=this.angleAt(t),s=this._radiusX*Math.sin(e),n=this._radiusY*Math.cos(e),i=Math.pow(n*n+s*s,3/2);return(this._anticlockwise?-1:1)*this._radiusX*this._radiusY/i}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this.angleAt(0),s=this.angleAt(t),n=this.angleAt(1);return[new ft(this._center,this._radiusX,this._radiusY,this._rotation,e,s,this._anticlockwise),new ft(this._center,this._radiusX,this._radiusY,this._rotation,s,n,this._anticlockwise)]}invalidate(){if(assert&&assert(this._center instanceof o,"Arc center should be a Vector2"),assert&&assert(this._center.isFinite(),"Arc center should be finite (not NaN or infinite)"),assert&&assert(typeof this._radiusX=="number",`Arc radiusX should be a number: ${this._radiusX}`),assert&&assert(isFinite(this._radiusX),`Arc radiusX should be a finite number: ${this._radiusX}`),assert&&assert(typeof this._radiusY=="number",`Arc radiusY should be a number: ${this._radiusY}`),assert&&assert(isFinite(this._radiusY),`Arc radiusY should be a finite number: ${this._radiusY}`),assert&&assert(typeof this._rotation=="number",`Arc rotation should be a number: ${this._rotation}`),assert&&assert(isFinite(this._rotation),`Arc rotation should be a finite number: ${this._rotation}`),assert&&assert(typeof this._startAngle=="number",`Arc startAngle should be a number: ${this._startAngle}`),assert&&assert(isFinite(this._startAngle),`Arc startAngle should be a finite number: ${this._startAngle}`),assert&&assert(typeof this._endAngle=="number",`Arc endAngle should be a number: ${this._endAngle}`),assert&&assert(isFinite(this._endAngle),`Arc endAngle should be a finite number: ${this._endAngle}`),assert&&assert(typeof this._anticlockwise=="boolean",`Arc anticlockwise should be a boolean: ${this._anticlockwise}`),this._unitTransform=null,this._start=null,this._end=null,this._startTangent=null,this._endTangent=null,this._actualEndAngle=null,this._isFullPerimeter=null,this._angleDifference=null,this._unitArcSegment=null,this._bounds=null,this._svgPathFragment=null,this._radiusX<0&&(this._radiusX=-this._radiusX,this._startAngle=Math.PI-this._startAngle,this._endAngle=Math.PI-this._endAngle,this._anticlockwise=!this._anticlockwise),this._radiusY<0&&(this._radiusY=-this._radiusY,this._startAngle=-this._startAngle,this._endAngle=-this._endAngle,this._anticlockwise=!this._anticlockwise),this._radiusX<this._radiusY){this._rotation+=Math.PI/2,this._startAngle-=Math.PI/2,this._endAngle-=Math.PI/2;const t=this._radiusX;this._radiusX=this._radiusY,this._radiusY=t}if(this._radiusX<this._radiusY)throw new Error("Not verified to work if radiusX < radiusY");assert&&assert(!(!this._anticlockwise&&this._endAngle-this._startAngle<=-Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle<=-Math.PI*2),"Not handling elliptical arcs with start/end angles that show differences in-between browser handling"),assert&&assert(!(!this._anticlockwise&&this._endAngle-this._startAngle>Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle>Math.PI*2),"Not handling elliptical arcs with start/end angles that show differences in-between browser handling"),this.invalidationEmitter.emit()}getUnitTransform(){return this._unitTransform===null&&(this._unitTransform=ft.computeUnitTransform(this._center,this._radiusX,this._radiusY,this._rotation)),this._unitTransform}get unitTransform(){return this.getUnitTransform()}getStart(){return this._start===null&&(this._start=this.positionAtAngle(this._startAngle)),this._start}get start(){return this.getStart()}getEnd(){return this._end===null&&(this._end=this.positionAtAngle(this._endAngle)),this._end}get end(){return this.getEnd()}getStartTangent(){return this._startTangent===null&&(this._startTangent=this.tangentAtAngle(this._startAngle)),this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this._endTangent===null&&(this._endTangent=this.tangentAtAngle(this._endAngle)),this._endTangent}get endTangent(){return this.getEndTangent()}getActualEndAngle(){return this._actualEndAngle===null&&(this._actualEndAngle=K.computeActualEndAngle(this._startAngle,this._endAngle,this._anticlockwise)),this._actualEndAngle}get actualEndAngle(){return this.getActualEndAngle()}getIsFullPerimeter(){return this._isFullPerimeter===null&&(this._isFullPerimeter=!this._anticlockwise&&this._endAngle-this._startAngle>=Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle>=Math.PI*2),this._isFullPerimeter}get isFullPerimeter(){return this.getIsFullPerimeter()}getAngleDifference(){return this._angleDifference===null&&(this._angleDifference=this._anticlockwise?this._startAngle-this._endAngle:this._endAngle-this._startAngle,this._angleDifference<0&&(this._angleDifference+=Math.PI*2),assert&&assert(this._angleDifference>=0)),this._angleDifference}get angleDifference(){return this.getAngleDifference()}getUnitArcSegment(){return this._unitArcSegment===null&&(this._unitArcSegment=new K(o.ZERO,1,this._startAngle,this._endAngle,this._anticlockwise)),this._unitArcSegment}get unitArcSegment(){return this.getUnitArcSegment()}getBounds(){if(this._bounds===null&&(this._bounds=dt.NOTHING.withPoint(this.getStart()).withPoint(this.getEnd()),this._startAngle!==this._endAngle)){const t=Math.atan(-(this._radiusY/this._radiusX)*Math.tan(this._rotation)),e=Math.atan(this._radiusY/this._radiusX/Math.tan(this._rotation));this.possibleExtremaAngles=[t,t+Math.PI,e,e+Math.PI],_.each(this.possibleExtremaAngles,this.includeBoundsAtAngle.bind(this))}return this._bounds}get bounds(){return this.getBounds()}getNondegenerateSegments(){if(this._radiusX<=0||this._radiusY<=0||this._startAngle===this._endAngle)return[];if(this._radiusX===this._radiusY){const t=this._startAngle+this._rotation;let e=this._endAngle+this._rotation;return Math.abs(this._endAngle-this._startAngle)===Math.PI*2&&(e=this._anticlockwise?t-Math.PI*2:t+Math.PI*2),[new K(this._center,this._radiusX,t,e,this._anticlockwise)]}else return[this]}includeBoundsAtAngle(t){this.unitArcSegment.containsAngle(t)&&(this._bounds=this._bounds.withPoint(this.positionAtAngle(t)))}mapAngle(t){return Math.abs(Y.moduloBetweenDown(t-this._startAngle,-Math.PI,Math.PI))<1e-8?this._startAngle:Math.abs(Y.moduloBetweenDown(t-this.getActualEndAngle(),-Math.PI,Math.PI))<1e-8?this.getActualEndAngle():this._startAngle>this.getActualEndAngle()?Y.moduloBetweenUp(t,this._startAngle-2*Math.PI,this._startAngle):Y.moduloBetweenDown(t,this._startAngle,this._startAngle+2*Math.PI)}tAtAngle(t){return(this.mapAngle(t)-this._startAngle)/(this.getActualEndAngle()-this._startAngle)}angleAt(t){return this._startAngle+(this.getActualEndAngle()-this._startAngle)*t}positionAtAngle(t){return this.getUnitTransform().transformPosition2(o.createPolar(1,t))}tangentAtAngle(t){const e=this.getUnitTransform().transformNormal2(o.createPolar(1,t));return this._anticlockwise?e.perpendicular:e.perpendicular.negated()}offsetTo(t,e){const n=[],i=[];for(let r=0;r<32;r++){let a=r/31;e&&(a=1-a);const l=this.angleAt(a);n.push(this.positionAtAngle(l).plus(this.tangentAtAngle(l).perpendicular.normalized().times(t))),r>0&&i.push(new $(n[r-1],n[r]))}return i}getSVGPathFragment(){let t;if(assert&&(t=this._svgPathFragment,this._svgPathFragment=null),!this._svgPathFragment){const s=this._anticlockwise?"0":"1";let n;const i=hs(this._rotation);if(this.getAngleDifference()<Math.PI*2-.01)n=this.getAngleDifference()<Math.PI?"0":"1",this._svgPathFragment=`A ${U(this._radiusX)} ${U(this._radiusY)} ${i} ${n} ${s} ${U(this.getEnd().x)} ${U(this.getEnd().y)}`;else{const r=(this._startAngle+this._endAngle)/2,a=this.positionAtAngle(r);n="0";const l=`A ${U(this._radiusX)} ${U(this._radiusY)} ${i} ${n} ${s} ${U(a.x)} ${U(a.y)}`,h=`A ${U(this._radiusX)} ${U(this._radiusY)} ${i} ${n} ${s} ${U(this.getEnd().x)} ${U(this.getEnd().y)}`;this._svgPathFragment=`${l} ${h}`}}return assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return this.offsetTo(-t/2,!1)}strokeRight(t){return this.offsetTo(t/2,!0)}getInteriorExtremaTs(){const t=[];return _.each(this.possibleExtremaAngles,e=>{if(this.unitArcSegment.containsAngle(e)){const s=this.tAtAngle(e),n=1e-10;s>n&&s<1-n&&t.push(s)}}),t.sort()}intersection(t){const e=this.getUnitTransform(),s=e.inverseRay2(t),n=this.getUnitArcSegment().intersection(s);return _.map(n,i=>{const r=e.transformPosition2(i.point),a=t.position.distance(r),l=e.inverseNormal2(i.normal);return new jt(a,r,l,i.wind,i.t)})}windingIntersection(t){const e=this.getUnitTransform().inverseRay2(t);return this.getUnitArcSegment().windingIntersection(e)}writeToContext(t){t.ellipse?t.ellipse(this._center.x,this._center.y,this._radiusX,this._radiusY,this._rotation,this._startAngle,this._endAngle,this._anticlockwise):(this.getUnitTransform().getMatrix().canvasAppendTransform(t),t.arc(0,0,1,this._startAngle,this._endAngle,this._anticlockwise),this.getUnitTransform().getInverse().canvasAppendTransform(t))}transformed(t){const e=t.timesVector2(o.createPolar(this._radiusX,this._rotation)).minus(t.timesVector2(o.ZERO)),s=t.timesVector2(o.createPolar(this._radiusY,this._rotation+Math.PI/2)).minus(t.timesVector2(o.ZERO)),n=e.angle,i=e.magnitude,r=s.magnitude,a=t.getDeterminant()<0,l=a?!this._anticlockwise:this._anticlockwise,h=a?-this._startAngle:this._startAngle;let M=a?-this._endAngle:this._endAngle;return Math.abs(this._endAngle-this._startAngle)===Math.PI*2&&(M=l?h-Math.PI*2:h+Math.PI*2),new ft(t.timesVector2(this._center),i,r,n,h,M,l)}getSignedAreaFragment(){const t=this._startAngle,e=this.getActualEndAngle(),s=Math.sin(t),n=Math.sin(e),i=Math.cos(t),r=Math.cos(e);return .5*(this._radiusX*this._radiusY*(e-t)+Math.cos(this._rotation)*(this._radiusX*this._center.y*(i-r)+this._radiusY*this._center.x*(n-s))+Math.sin(this._rotation)*(this._radiusX*this._center.x*(r-i)+this._radiusY*this._center.y*(n-s)))}reversed(){return new ft(this._center,this._radiusX,this._radiusY,this._rotation,this._endAngle,this._startAngle,!this._anticlockwise)}serialize(){return{type:"EllipticalArc",centerX:this._center.x,centerY:this._center.y,radiusX:this._radiusX,radiusY:this._radiusY,rotation:this._rotation,startAngle:this._startAngle,endAngle:this._endAngle,anticlockwise:this._anticlockwise}}getOverlaps(t,e=1e-6){return t instanceof ft?ft.getOverlaps(this,t):null}getConicMatrix(){const e=ft.computeUnitMatrix(this._center,this._radiusX,this._radiusY,this._rotation).inverted();return e.transposed().multiplyMatrix(cs).multiplyMatrix(e)}static deserialize(t){return assert&&assert(t.type==="EllipticalArc"),new ft(new o(t.centerX,t.centerY),t.radiusX,t.radiusY,t.rotation,t.startAngle,t.endAngle,t.anticlockwise)}static getOverlapType(t,e,s=1e-4){if(t._center.distance(e._center)<s){const n=Math.abs(t._radiusX-e._radiusX)<s&&Math.abs(t._radiusY-e._radiusY)<s,i=Math.abs(t._radiusX-e._radiusY)<s&&Math.abs(t._radiusY-e._radiusX)<s;if(n&&Math.abs(Y.moduloBetweenDown(t._rotation-e._rotation+Math.PI/2,0,Math.PI)-Math.PI/2)<s)return te.MATCHING_OVERLAP;if(i&&Math.abs(Y.moduloBetweenDown(t._rotation-e._rotation,0,Math.PI)-Math.PI/2)<s)return te.OPPOSITE_OVERLAP}return te.NONE}static getOverlaps(t,e){return ft.getOverlapType(t,e)===te.NONE?[]:K.getAngularOverlaps(t._startAngle+t._rotation,t.getActualEndAngle()+t._rotation,e._startAngle+e._rotation,e.getActualEndAngle()+e._rotation)}static intersect(t,e,s=1e-10){if(ft.getOverlapType(t,e,s)===te.NONE)return he.intersect(t,e);{const i=[],r=t.positionAt(0),a=t.positionAt(1),l=e.positionAt(0),h=e.positionAt(1);return r.equalsEpsilon(l,s)&&i.push(new yt(r.average(l),0,0)),r.equalsEpsilon(h,s)&&i.push(new yt(r.average(h),0,1)),a.equalsEpsilon(l,s)&&i.push(new yt(a.average(l),1,0)),a.equalsEpsilon(h,s)&&i.push(new yt(a.average(h),1,1)),i}}static computeUnitMatrix(t,e,s,n){return Yt.translationFromVector(t).timesMatrix(Yt.rotation2(n)).timesMatrix(Yt.scaling(e,s))}static computeUnitTransform(t,e,s,n){return new u1(ft.computeUnitMatrix(t,e,s,n))}}const Xt=class Xt extends R1{};Xt.MATCHING_OVERLAP=new Xt,Xt.OPPOSITE_OVERLAP=new Xt,Xt.NONE=new Xt,Xt.enumeration=new N1(Xt);let te=Xt;Lt.register("EllipticalArc",ft);class St{constructor(t,e,s){if(this.segments=[],this.invalidatedEmitter=new ze,this._bounds=null,this._strokedSubpaths=null,this._strokedSubpathsComputed=!1,this._strokedStyles=null,this._invalidatingPoints=!1,this.points=e||(t&&t.length?_.map(t,n=>n.start).concat(t[t.length-1].end):[]),this.closed=!!s,this._invalidateListener=this.invalidate.bind(this),t)for(let n=0;n<t.length;n++)_.each(t[n].getNondegenerateSegments(),i=>{this.addSegmentDirectly(i)})}getBounds(){if(this._bounds===null){const t=dt.NOTHING.copy();_.each(this.segments,e=>{t.includeBounds(e.getBounds())}),this._bounds=t}return this._bounds}get bounds(){return this.getBounds()}getArcLength(t,e,s){let n=0;for(let i=0;i<this.segments.length;i++)n+=this.segments[i].getArcLength(t,e,s);return n}copy(){return new St(this.segments.slice(0),this.points.slice(0),this.closed)}invalidatePoints(){this._invalidatingPoints=!0;const t=this.segments.length;for(let e=0;e<t;e++)this.segments[e].invalidate();this._invalidatingPoints=!1,this.invalidate()}invalidate(){this._invalidatingPoints||(this._bounds=null,this._strokedSubpathsComputed=!1,this.invalidatedEmitter.emit())}addPoint(t){return this.points.push(t),this}addSegmentDirectly(t){return assert&&assert(t.start.isFinite(),"Segment start is infinite"),assert&&assert(t.end.isFinite(),"Segment end is infinite"),assert&&assert(t.startTangent.isFinite(),"Segment startTangent is infinite"),assert&&assert(t.endTangent.isFinite(),"Segment endTangent is infinite"),assert&&assert(t.bounds.isEmpty()||t.bounds.isFinite(),"Segment bounds is infinite and non-empty"),this.segments.push(t),t.invalidationEmitter.addListener(this._invalidateListener),this}addSegment(t){const s=t.getNondegenerateSegments().length;for(let n=0;n<s;n++)this.addSegmentDirectly(t);return this.invalidate(),this}addClosingSegment(){if(this.hasClosingSegment()){const t=this.getClosingSegment();this.addSegmentDirectly(t),this.invalidate(),this.addPoint(this.getFirstPoint()),this.closed=!0}}close(){this.closed=!0,this.addClosingSegment()}getLength(){return this.points.length}getFirstPoint(){return assert&&assert(this.points.length),_.first(this.points)}getLastPoint(){return assert&&assert(this.points.length),_.last(this.points)}getFirstSegment(){return assert&&assert(this.segments.length),_.first(this.segments)}getLastSegment(){return assert&&assert(this.segments.length),_.last(this.segments)}getFillSegments(){const t=this.segments.slice();return this.hasClosingSegment()&&t.push(this.getClosingSegment()),t}isDrawable(){return this.segments.length>0}isClosed(){return this.closed}hasClosingSegment(){return!this.getFirstPoint().equalsEpsilon(this.getLastPoint(),1e-9)}getClosingSegment(){return assert&&assert(this.hasClosingSegment(),"Implicit closing segment unnecessary on a fully closed path"),new $(this.getLastPoint(),this.getFirstPoint())}getClosestPoints(t){return Zt.filterClosestToPointResult(_.flatten(this.segments.map(e=>e.getClosestPoints(t))))}writeToContext(t){if(this.isDrawable()){const e=this.getFirstSegment().start;t.moveTo(e.x,e.y);let s=this.segments.length;this.closed&&s>=2&&this.segments[s-1]instanceof $&&s--;for(let n=0;n<s;n++)this.segments[n].writeToContext(t);this.closed&&t.closePath()}}toPiecewiseLinear(t){return assert&&assert(!t.pointMap,"For use with pointMap, please use nonlinearTransformed"),new St(_.flatten(_.map(this.segments,e=>e.toPiecewiseLinearSegments(t))),void 0,this.closed)}transformed(t){return new St(_.map(this.segments,e=>e.transformed(t)),_.map(this.points,e=>t.timesVector2(e)),this.closed)}nonlinearTransformed(t){return new St(_.flatten(_.map(this.segments,e=>t.methodName&&e[t.methodName]?e[t.methodName](t):e.toPiecewiseLinearSegments(t))),void 0,this.closed)}getBoundsWithTransform(t){const e=dt.NOTHING.copy(),s=this.segments.length;for(let n=0;n<s;n++)e.includeBounds(this.segments[n].getBoundsWithTransform(t));return e}offset(t){if(!this.isDrawable())return new St([],void 0,this.closed);if(t===0)return new St(this.segments.slice(),void 0,this.closed);let e;const s=this.segments.slice(),n=[];for(e=0;e<s.length;e++)n.push(s[e].strokeLeft(2*t));let i=[];for(e=0;e<s.length;e++){if(this.closed||e>0){const r=(e>0?e:s.length)-1,a=s[e].start,l=s[r].endTangent,h=s[e].startTangent,M=l.perpendicular.negated().times(t).angle,Z=h.perpendicular.negated().times(t).angle,g=l.perpendicular.dot(h)>0;i.push(new K(a,Math.abs(t),M,Z,g))}i=i.concat(n[e])}return new St(i,void 0,this.closed)}stroked(t){if(!this.isDrawable())return[];if(t===void 0&&(t=new ye),assert&&assert(!this._strokedSubpathsComputed||this._strokedStyles&&this._strokedSubpaths),this._strokedSubpathsComputed&&this._strokedStyles.equals(t))return this._strokedSubpaths;const e=t.lineWidth;let s,n=[],i=[];const r=this.getFirstSegment(),a=this.getLastSegment(),l=p=>{n=n.concat(p)},h=p=>{i=i.concat(p)},M=a.end.equals(r.start),Z=M?null:new $(this.segments[this.segments.length-1].end,this.segments[0].start);for(s=0;s<this.segments.length;s++)s>0&&l(t.leftJoin(this.segments[s].start,this.segments[s-1].endTangent,this.segments[s].startTangent)),l(this.segments[s].strokeLeft(e));for(s=this.segments.length-1;s>=0;s--)s<this.segments.length-1&&h(t.rightJoin(this.segments[s].end,this.segments[s].endTangent,this.segments[s+1].startTangent)),h(this.segments[s].strokeRight(e));let g;return this.closed?(M?(l(t.leftJoin(a.end,a.endTangent,r.startTangent)),h(t.rightJoin(a.end,a.endTangent,r.startTangent))):(l(t.leftJoin(Z.start,a.endTangent,Z.startTangent)),l(Z.strokeLeft(e)),l(t.leftJoin(Z.end,Z.endTangent,r.startTangent)),h(t.rightJoin(Z.end,Z.endTangent,r.startTangent)),h(Z.strokeRight(e)),h(t.rightJoin(Z.start,a.endTangent,Z.startTangent))),g=[new St(n,void 0,!0),new St(i,void 0,!0)]):g=[new St(n.concat(t.cap(a.end,a.endTangent)).concat(i).concat(t.cap(r.start,r.startTangent.negated())),void 0,!0)],this._strokedSubpaths=g,this._strokedSubpathsComputed=!0,this._strokedStyles=t.copy(),g}dashed(t,e,s,n){const i=(l,h)=>{const M=l[l.length-1].concat(h[0]),Z=l.slice(0,l.length-1).concat([M]).concat(h.slice(1));return assert&&assert(Z.length===l.length+h.length-1),Z},r=(l,h)=>{if(!l.hasRightFilled||!h.hasLeftFilled)return!1;const M=_.last(_.last(l.segmentArrays)),Z=h.segmentArrays[0][0];return M.end.distance(Z.start)<1e-5},a=[];for(let l=0;l<this.segments.length;l++){const h=this.segments[l],M=h.getDashValues(t,e,s,n);a.push(M),e+=M.arcLength;const Z=[0].concat(M.values).concat([1]),g=M.initiallyInside;M.hasLeftFilled=g,M.hasRightFilled=Z.length%2===0?g:!g,M.segmentArrays=[];for(let p=g?0:1;p<Z.length-1;p+=2)Z[p]!==Z[p+1]&&M.segmentArrays.push([h.slice(Z[p],Z[p+1])])}for(let l=a.length-1;l>=1;l--){const h=a[l-1],M=a[l];r(h,M)&&a.splice(l-1,2,{segmentArrays:i(h.segmentArrays,M.segmentArrays),hasLeftFilled:h.hasLeftFilled,hasRightFilled:M.hasRightFilled})}if(a.length>1&&r(a[a.length-1],a[0])){const l=a.pop(),h=a.shift();a.push({segmentArrays:i(l.segmentArrays,h.segmentArrays),hasLeftFilled:l.hasLeftFilled,hasRightFilled:h.hasRightFilled})}return this.closed&&a.length===1&&a[0].segmentArrays.length===1&&a[0].hasLeftFilled&&a[0].hasRightFilled?[new St(a[0].segmentArrays[0],void 0,!0)]:_.flatten(a.map(l=>l.segmentArrays)).map(l=>new St(l))}serialize(){return{type:"Subpath",segments:this.segments.map(t=>t.serialize()),points:this.points.map(t=>({x:t.x,y:t.y})),closed:this.closed}}static deserialize(t){return assert&&assert(t.type==="Subpath"),new St(t.segments.map(Zt.deserialize),t.points.map(e=>new o(e.x,e.y)),t.closed)}}Lt.register("Subpath",St);const It=St,xe=Math.random,ht=(c,t)=>new o(c,t),i1=(c,t,e,s)=>e.copy().subtract(c).multiplyScalar((1-s)/6).add(t),ct=class ct{constructor(t,e){if(this.subpaths=[],this._invalidatingPoints=!1,this._immutable=!1,this.invalidatedEmitter=new ze,this.lastQuadraticControlPoint=null,this.lastCubicControlPoint=null,this._bounds=e?e.copy():null,this.resetControlPoints(),this._invalidateListener=this.invalidate.bind(this),typeof t=="object")for(let s=0;s<t.length;s++)this.addSubpath(t[s]);t&&typeof t!="object"&&_.each(ss.parse(t),s=>{assert&&assert(ct.prototype[s.cmd]!==void 0,`method ${s.cmd} from parsed SVG does not exist`),this[s.cmd].apply(this,s.args)}),this.invalidate()}resetControlPoints(){this.lastQuadraticControlPoint=null,this.lastCubicControlPoint=null}setQuadraticControlPoint(t){this.lastQuadraticControlPoint=t,this.lastCubicControlPoint=null}setCubicControlPoint(t){this.lastQuadraticControlPoint=null,this.lastCubicControlPoint=t}moveTo(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.moveToPoint(ht(t,e))}moveToRelative(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.moveToPointRelative(ht(t,e))}moveToPointRelative(t){return this.moveToPoint(this.getRelativePoint().plus(t))}moveToPoint(t){return this.addSubpath(new It().addPoint(t)),this.resetControlPoints(),this}lineTo(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.lineToPoint(ht(t,e))}lineToRelative(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.lineToPointRelative(ht(t,e))}lineToPointRelative(t){return this.lineToPoint(this.getRelativePoint().plus(t))}lineToPoint(t){if(this.hasSubpaths()){const e=this.getLastSubpath().getLastPoint(),s=t,n=new $(e,s);this.getLastSubpath().addPoint(s),this.addSegmentAndBounds(n)}else this.ensure(t);return this.resetControlPoints(),this}horizontalLineTo(t){return this.lineTo(t,this.getRelativePoint().y)}horizontalLineToRelative(t){return this.lineToRelative(t,0)}verticalLineTo(t){return this.lineTo(this.getRelativePoint().x,t)}verticalLineToRelative(t){return this.lineToRelative(0,t)}zigZagTo(t,e,s,n,i){return this.zigZagToPoint(new o(t,e),s,n,i)}zigZagToPoint(t,e,s,n){assert&&assert(Number.isInteger(s),`numberZigZags must be an integer: ${s}`),this.ensure(t);const i=this.getLastPoint(),r=t.minus(i),a=r.normalized(),l=a.perpendicular.times(e);let h;n?h=r.magnitude/(s+.5):h=r.magnitude/s;for(let M=0;M<s;M++){const Z=a.times(M*h).plus(i),g=Z.plus(a.times(h/4)).plus(l),p=Z.plus(a.times(3*h/4)).minus(l);this.lineToPoint(g),this.lineToPoint(p)}if(n){const Z=a.times(s*h).plus(i).plus(a.times(h/4)).plus(l);this.lineToPoint(Z)}return this.lineToPoint(t)}quadraticCurveTo(t,e,s,n){return assert&&assert(isFinite(t),`cpx must be a finite number: ${t}`),assert&&assert(isFinite(e),`cpy must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(n),`y must be a finite number: ${n}`),this.quadraticCurveToPoint(ht(t,e),ht(s,n))}quadraticCurveToRelative(t,e,s,n){return assert&&assert(isFinite(t),`cpx must be a finite number: ${t}`),assert&&assert(isFinite(e),`cpy must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(n),`y must be a finite number: ${n}`),this.quadraticCurveToPointRelative(ht(t,e),ht(s,n))}quadraticCurveToPointRelative(t,e){const s=this.getRelativePoint();return this.quadraticCurveToPoint(s.plus(t),s.plus(e))}smoothQuadraticCurveTo(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(),ht(t,e))}smoothQuadraticCurveToRelative(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(),ht(t,e).plus(this.getRelativePoint()))}quadraticCurveToPoint(t,e){this.ensure(t);const s=this.getLastSubpath().getLastPoint(),n=new ut(s,t,e);this.getLastSubpath().addPoint(e);const i=n.getNondegenerateSegments();return _.each(i,r=>{this.addSegmentAndBounds(r)}),this.setQuadraticControlPoint(t),this}cubicCurveTo(t,e,s,n,i,r){return assert&&assert(isFinite(t),`cp1x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp1y must be a finite number: ${e}`),assert&&assert(isFinite(s),`cp2x must be a finite number: ${s}`),assert&&assert(isFinite(n),`cp2y must be a finite number: ${n}`),assert&&assert(isFinite(i),`x must be a finite number: ${i}`),assert&&assert(isFinite(r),`y must be a finite number: ${r}`),this.cubicCurveToPoint(ht(t,e),ht(s,n),ht(i,r))}cubicCurveToRelative(t,e,s,n,i,r){return assert&&assert(isFinite(t),`cp1x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp1y must be a finite number: ${e}`),assert&&assert(isFinite(s),`cp2x must be a finite number: ${s}`),assert&&assert(isFinite(n),`cp2y must be a finite number: ${n}`),assert&&assert(isFinite(i),`x must be a finite number: ${i}`),assert&&assert(isFinite(r),`y must be a finite number: ${r}`),this.cubicCurveToPointRelative(ht(t,e),ht(s,n),ht(i,r))}cubicCurveToPointRelative(t,e,s){const n=this.getRelativePoint();return this.cubicCurveToPoint(n.plus(t),n.plus(e),n.plus(s))}smoothCubicCurveTo(t,e,s,n){return assert&&assert(isFinite(t),`cp2x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp2y must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(n),`y must be a finite number: ${n}`),this.cubicCurveToPoint(this.getSmoothCubicControlPoint(),ht(t,e),ht(s,n))}smoothCubicCurveToRelative(t,e,s,n){return assert&&assert(isFinite(t),`cp2x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp2y must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(n),`y must be a finite number: ${n}`),this.cubicCurveToPoint(this.getSmoothCubicControlPoint(),ht(t,e).plus(this.getRelativePoint()),ht(s,n).plus(this.getRelativePoint()))}cubicCurveToPoint(t,e,s){this.ensure(t);const n=this.getLastSubpath().getLastPoint(),r=new pt(n,t,e,s).getNondegenerateSegments();return _.each(r,a=>{this.addSegmentAndBounds(a)}),this.getLastSubpath().addPoint(s),this.setCubicControlPoint(e),this}arc(t,e,s,n,i,r){return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.arcPoint(ht(t,e),s,n,i,r)}arcPoint(t,e,s,n,i){i===void 0&&(i=!1);const r=new K(t,e,s,n,i),a=r.getStart(),l=r.getEnd();return this.hasSubpaths()&&this.getLastSubpath().getLength()>0&&!a.equals(this.getLastSubpath().getLastPoint())&&this.addSegmentAndBounds(new $(this.getLastSubpath().getLastPoint(),a)),this.hasSubpaths()||this.addSubpath(new It),this.getLastSubpath().addPoint(a),this.getLastSubpath().addPoint(l),this.addSegmentAndBounds(r),this.resetControlPoints(),this}ellipticalArc(t,e,s,n,i,r,a,l){return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.ellipticalArcPoint(ht(t,e),s,n,i,r,a,l)}ellipticalArcPoint(t,e,s,n,i,r,a){a===void 0&&(a=!1);const l=new ft(t,e,s,n,i,r,a),h=l.start,M=l.end;return this.hasSubpaths()&&this.getLastSubpath().getLength()>0&&!h.equals(this.getLastSubpath().getLastPoint())&&this.addSegmentAndBounds(new $(this.getLastSubpath().getLastPoint(),h)),this.hasSubpaths()||this.addSubpath(new It),this.getLastSubpath().addPoint(h),this.getLastSubpath().addPoint(M),this.addSegmentAndBounds(l),this.resetControlPoints(),this}close(){if(this.hasSubpaths()){const t=this.getLastSubpath(),e=new It;t.close(),this.addSubpath(e),e.addPoint(t.getFirstPoint())}return this.resetControlPoints(),this}newSubpath(){return this.addSubpath(new It),this.resetControlPoints(),this}makeImmutable(){return this._immutable=!0,this.notifyInvalidationListeners(),this}isImmutable(){return this._immutable}ellipticalArcToRelative(t,e,s,n,i,r,a){const l=this.getRelativePoint();return this.ellipticalArcTo(t,e,s,n,i,r+l.x,a+l.y)}ellipticalArcTo(t,e,s,n,i,r,a){const l=new o(r,a);this.ensure(l);const h=this.getLastSubpath().getLastPoint();this.getLastSubpath().addPoint(l),t<0&&(t*=-1),e<0&&(e*=-1);let M=t*t,Z=e*e;const g=h.minus(l).dividedScalar(2).rotated(-s),p=g.x*g.x,m=g.y*g.y;let A=new o(t*g.y/e,-e*g.x/t);const x=p/M+m/Z;x>1&&(t*=Math.sqrt(x),e*=Math.sqrt(x),M=t*t,Z=e*e,A=new o(t*g.y/e,-e*g.x/t)),A.multiplyScalar(Math.sqrt(Math.max(0,(M*Z-M*m-Z*p)/(M*m+Z*p)))),n===i&&A.multiplyScalar(-1);const b=h.blend(l,.5).plus(A.rotated(s)),w=(R,H)=>(R.x*H.y-R.y*H.x>0?1:-1)*R.angleBetween(H),q=new o((g.x-A.x)/t,(g.y-A.y)/e),S=new o((-g.x-A.x)/t,(-g.y-A.y)/e),T=w(o.X_UNIT,q);let F=w(q,S)%(Math.PI*2);!i&&F>0&&(F-=Math.PI*2),i&&F<0&&(F+=Math.PI*2);const O=new ft(b,t,e,s,T,T+F,!i).getNondegenerateSegments();return _.each(O,R=>{this.addSegmentAndBounds(R)}),this}circle(t,e,s){if(typeof t=="object"){const n=t;return s=e,this.arcPoint(n,s,0,Math.PI*2,!1).close()}else return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.arcPoint(ht(t,e),s,0,Math.PI*2,!1).close()}ellipse(t,e,s,n,i){if(typeof t=="object"){const r=t;return i=n,n=s,s=e,this.ellipticalArcPoint(r,s,n,i||0,0,Math.PI*2,!1).close()}else return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.ellipticalArcPoint(ht(t,e),s,n,i||0,0,Math.PI*2,!1).close()}rect(t,e,s,n){assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),assert&&assert(isFinite(s),`width must be a finite number: ${s}`),assert&&assert(isFinite(n),`height must be a finite number: ${n}`);const i=new It;return this.addSubpath(i),i.addPoint(ht(t,e)),i.addPoint(ht(t+s,e)),i.addPoint(ht(t+s,e+n)),i.addPoint(ht(t,e+n)),this.addSegmentAndBounds(new $(i.points[0],i.points[1])),this.addSegmentAndBounds(new $(i.points[1],i.points[2])),this.addSegmentAndBounds(new $(i.points[2],i.points[3])),i.close(),this.addSubpath(new It),this.getLastSubpath().addPoint(ht(t,e)),assert&&assert(!isNaN(this.bounds.getX())),this.resetControlPoints(),this}roundRect(t,e,s,n,i,r){const a=t+i,l=t+s-i,h=e+r,M=e+n-r;return i===r?this.arc(l,h,i,-Math.PI/2,0,!1).arc(l,M,i,0,Math.PI/2,!1).arc(a,M,i,Math.PI/2,Math.PI,!1).arc(a,h,i,Math.PI,Math.PI*3/2,!1).close():this.ellipticalArc(l,h,i,r,0,-Math.PI/2,0,!1).ellipticalArc(l,M,i,r,0,0,Math.PI/2,!1).ellipticalArc(a,M,i,r,0,Math.PI/2,Math.PI,!1).ellipticalArc(a,h,i,r,0,Math.PI,Math.PI*3/2,!1).close(),this}polygon(t){const e=t.length;if(e>0){this.moveToPoint(t[0]);for(let s=1;s<e;s++)this.lineToPoint(t[s])}return this.close()}cardinalSpline(t,e){const s=$e()({tension:0,isClosedLineSegments:!1},e);assert&&assert(s.tension<1&&s.tension>-1," the tension goes from -1 to 1 ");const n=t.length,i=s.isClosedLineSegments?n:n-1;for(let r=0;r<i;r++){let a;r===0&&!s.isClosedLineSegments?a=[t[0],t[0],t[1],t[2]]:r===i-1&&!s.isClosedLineSegments?a=[t[r-1],t[r],t[r+1],t[r+1]]:a=[t[(r-1+n)%n],t[r%n],t[(r+1)%n],t[(r+2)%n]];const l=[a[1],i1(a[0],a[1],a[2],s.tension),i1(a[3],a[2],a[1],s.tension),a[2]];r===0&&(this.ensure(l[0]),this.getLastSubpath().addPoint(l[0])),this.cubicCurveToPoint(l[1],l[2],l[3])}return this}copy(){return new ct(_.map(this.subpaths,t=>t.copy()),this.bounds)}writeToContext(t){const e=this.subpaths.length;for(let s=0;s<e;s++)this.subpaths[s].writeToContext(t)}getSVGPath(){let t="";const e=this.subpaths.length;for(let s=0;s<e;s++){const n=this.subpaths[s];if(n.isDrawable()){const i=n.segments[0].start;t+=`M ${U(i.x)} ${U(i.y)} `;for(let r=0;r<n.segments.length;r++)t+=`${n.segments[r].getSVGPathFragment()} `;n.isClosed()&&(t+="Z ")}}return t}transformed(t){const e=_.map(this.subpaths,n=>n.transformed(t)),s=_.reduce(e,(n,i)=>n.union(i.bounds),dt.NOTHING);return new ct(e,s)}nonlinearTransformed(t){const e=Ke({minLevels:0,maxLevels:7,distanceEpsilon:.16,curveEpsilon:t&&t.includeCurvature?.002:null},t),s=_.map(this.subpaths,i=>i.nonlinearTransformed(e)),n=_.reduce(s,(i,r)=>i.union(r.bounds),dt.NOTHING);return new ct(s,n)}polarToCartesian(t){return this.nonlinearTransformed(Ke({pointMap:e=>o.createPolar(e.y,e.x),methodName:"polarToCartesian"},t))}toPiecewiseLinear(t){return assert&&assert(!t||!t.pointMap,"No pointMap for toPiecewiseLinear allowed, since it could create non-linear segments"),assert&&assert(!t||!t.methodName,"No methodName for toPiecewiseLinear allowed, since it could create non-linear segments"),this.nonlinearTransformed(t)}containsPoint(t){const e=o.X_UNIT.copy();let s=0;for(;s<5&&(s++,_.some(this.subpaths,i=>_.some(i.segments,r=>{const a=r.start.minus(t),l=a.magnitude;return l!==0?(a.divideScalar(l),a.subtract(e),a.magnitudeSquared<1e-9):!1})));)e.rotate($1.nextDouble());return this.windingIntersection(new Ut(t,e))!==0}intersection(t){let e=[];const s=this.subpaths.length;for(let n=0;n<s;n++){const i=this.subpaths[n];if(i.isDrawable()){const r=i.segments.length;for(let a=0;a<r;a++){const l=i.segments[a];e=e.concat(l.intersection(t))}i.hasClosingSegment()&&(e=e.concat(i.getClosingSegment().intersection(t)))}}return _.sortBy(e,n=>n.distance)}interiorIntersectsLineSegment(t,e){const s=t.blend(e,.5);if(this.containsPoint(s))return!0;const n=e.minus(t),i=n.magnitude;if(i===0)return!1;n.normalize();const r=this.intersection(new Ut(t,n));for(let a=0;a<r.length;a++)if(r[a].distance<=i)return!0;return!1}windingIntersection(t){let e=0;const s=this.subpaths.length;for(let n=0;n<s;n++){const i=this.subpaths[n];if(i.isDrawable()){const r=i.segments.length;for(let a=0;a<r;a++)e+=i.segments[a].windingIntersection(t);i.hasClosingSegment()&&(e+=i.getClosingSegment().windingIntersection(t))}}return e}intersectsBounds(t){if(this.bounds.intersection(t).equals(this.bounds))return!0;const e=new Ut(new o(t.minX,t.minY),new o(1,0)),s=new Ut(new o(t.minX,t.minY),new o(0,1)),n=new Ut(new o(t.maxX,t.maxY),new o(-1,0)),i=new Ut(new o(t.maxX,t.maxY),new o(0,-1));let r,a;const l=this.intersection(e).concat(this.intersection(n));for(a=0;a<l.length;a++)if(r=l[a].point,r.x>=t.minX&&r.x<=t.maxX)return!0;const h=this.intersection(s).concat(this.intersection(i));for(a=0;a<h.length;a++)if(r=h[a].point,r.y>=t.minY&&r.y<=t.maxY)return!0;return!1}getStrokedShape(t){let e=[];const s=dt.NOTHING.copy();let n=this.subpaths.length;for(let i=0;i<n;i++){const a=this.subpaths[i].stroked(t);e=e.concat(a)}n=e.length;for(let i=0;i<n;i++)s.includeBounds(e[i].bounds);return new ct(e,s)}getOffsetShape(t){const e=[],s=dt.NOTHING.copy();let n=this.subpaths.length;for(let i=0;i<n;i++)e.push(this.subpaths[i].offset(t));n=e.length;for(let i=0;i<n;i++)s.includeBounds(e[i].bounds);return new ct(e,s)}getDashedShape(t,e,s){const n=$e()({distanceEpsilon:1e-10,curveEpsilon:1e-8},s);return new ct(_.flatten(this.subpaths.map(i=>i.dashed(t,e,n.distanceEpsilon,n.curveEpsilon))))}getBounds(){if(this._bounds===null){const t=dt.NOTHING.copy();_.each(this.subpaths,e=>{t.includeBounds(e.getBounds())}),this._bounds=t}return this._bounds}get bounds(){return this.getBounds()}getStrokedBounds(t){let e=!0;for(let s=0;s<this.subpaths.length;s++){const n=this.subpaths[s];if(n.isDrawable()&&!n.isClosed()){e=!1;break}for(let i=0;i<n.segments.length;i++)if(!n.segments[i].areStrokedBoundsDilated()){e=!1;break}}if(e)return this.bounds.dilated(t.lineWidth/2);{const s=this.bounds.copy();for(let n=0;n<this.subpaths.length;n++){const i=this.subpaths[n].stroked(t);for(let r=0;r<i.length;r++)s.includeBounds(i[r].bounds)}return s}}getSimplifiedAreaShape(){return Vt.simplifyNonZero(this)}getBoundsWithTransform(t,e){const s=dt.NOTHING.copy(),n=this.subpaths.length;for(let i=0;i<n;i++){const r=this.subpaths[i];s.includeBounds(r.getBoundsWithTransform(t))}return e&&s.includeBounds(this.getStrokedShape(e).getBoundsWithTransform(t)),s}getApproximateArea(t){const e=this.bounds.minX,s=this.bounds.minY,n=this.bounds.width,i=this.bounds.height,r=n*i;let a=0;const l=new o(0,0);for(let h=0;h<t;h++)l.x=e+xe()*n,l.y=s+xe()*i,this.containsPoint(l)&&a++;return r*a/t}getNonoverlappingArea(){return Math.abs(_.sum(this.subpaths.map(t=>_.sum(t.getFillSegments().map(e=>e.getSignedAreaFragment())))))}getArea(){return this.getSimplifiedAreaShape().getNonoverlappingArea()}getApproximateCentroid(t){const e=this.bounds.minX,s=this.bounds.minY,n=this.bounds.width,i=this.bounds.height;let r=0;const a=new o(0,0),l=new o(0,0);for(let h=0;h<t;h++)l.x=e+xe()*n,l.y=s+xe()*i,this.containsPoint(l)&&(a.add(l),r++);return a.dividedScalar(r)}getClosestPoints(t){return Zt.filterClosestToPointResult(_.flatten(this.subpaths.map(e=>e.getClosestPoints(t))))}getClosestPoint(t){return this.getClosestPoints(t)[0].closestPoint}invalidatePoints(){this._invalidatingPoints=!0;const t=this.subpaths.length;for(let e=0;e<t;e++)this.subpaths[e].invalidatePoints();this._invalidatingPoints=!1,this.invalidate()}toString(){return`new phet.kite.Shape( '${this.getSVGPath()}' )`}invalidate(){assert&&assert(!this._immutable,"Attempt to modify an immutable Shape"),this._invalidatingPoints||(this._bounds=null,this.notifyInvalidationListeners())}notifyInvalidationListeners(){this.invalidatedEmitter.emit()}addSegmentAndBounds(t){this.getLastSubpath().addSegment(t),this.invalidate()}ensure(t){this.hasSubpaths()||(this.addSubpath(new It),this.getLastSubpath().addPoint(t))}addSubpath(t){return this.subpaths.push(t),t.invalidatedEmitter.addListener(this._invalidateListener),this.invalidate(),this}hasSubpaths(){return this.subpaths.length>0}getLastSubpath(){return assert&&assert(this.hasSubpaths(),"We should have a subpath if this is called"),_.last(this.subpaths)}getLastPoint(){return assert&&assert(this.hasSubpaths(),"We should have a subpath if this is called"),assert&&assert(this.getLastSubpath().getLastPoint(),"We should have a last point"),this.getLastSubpath().getLastPoint()}getLastSegment(){if(!this.hasSubpaths())return null;const t=this.getLastSubpath();return t.isDrawable()?t.getLastSegment():null}getSmoothQuadraticControlPoint(){const t=this.getLastPoint();return this.lastQuadraticControlPoint?t.plus(t.minus(this.lastQuadraticControlPoint)):t}getSmoothCubicControlPoint(){const t=this.getLastPoint();return this.lastCubicControlPoint?t.plus(t.minus(this.lastCubicControlPoint)):t}getRelativePoint(){let t=o.ZERO;if(this.hasSubpaths()){const e=this.getLastSubpath();e.points.length&&(t=e.getLastPoint())}return t}shapeUnion(t){return Vt.binaryResult(this,t,Vt.BINARY_NONZERO_UNION)}shapeIntersection(t){return Vt.binaryResult(this,t,Vt.BINARY_NONZERO_INTERSECTION)}shapeDifference(t){return Vt.binaryResult(this,t,Vt.BINARY_NONZERO_DIFFERENCE)}shapeXor(t){return Vt.binaryResult(this,t,Vt.BINARY_NONZERO_XOR)}shapeClip(t,e){return Vt.clipShape(t,this,e)}getArcLength(t,e,s){let n=0;for(let i=0;i<this.subpaths.length;i++)n+=this.subpaths[i].getArcLength(t,e,s);return n}serialize(){return{type:"Shape",subpaths:this.subpaths.map(t=>t.serialize())}}static deserialize(t){return assert&&assert(t.type==="Shape"),new ct(t.subpaths.map(It.deserialize))}static rectangle(t,e,s,n){return new ct().rect(t,e,s,n)}static roundRect(t,e,s,n,i,r){return new ct().roundRect(t,e,s,n,i,r)}static roundedRectangleWithRadii(t,e,s,n,i){let r=i&&i.topLeft||0,a=i&&i.topRight||0,l=i&&i.bottomLeft||0,h=i&&i.bottomRight||0;assert&&assert(isFinite(t),"Non-finite x"),assert&&assert(isFinite(e),"Non-finite y"),assert&&assert(s>=0&&isFinite(s),"Negative or non-finite width"),assert&&assert(n>=0&&isFinite(n),"Negative or non-finite height"),assert&&assert(r>=0&&isFinite(r),"Invalid topLeft"),assert&&assert(a>=0&&isFinite(a),"Invalid topRight"),assert&&assert(l>=0&&isFinite(l),"Invalid bottomLeft"),assert&&assert(h>=0&&isFinite(h),"Invalid bottomRight");const M=r+a;M>s&&M>0&&(r=r/M*s,a=a/M*s);const Z=l+h;Z>s&&Z>0&&(l=l/Z*s,h=h/Z*s);const g=r+l;g>n&&g>0&&(r=r/g*n,l=l/g*n);const p=a+h;p>n&&p>0&&(a=a/p*n,h=h/p*n),assert&&assert(r+a<=s,"Corner overlap on top edge"),assert&&assert(l+h<=s,"Corner overlap on bottom edge"),assert&&assert(r+l<=n,"Corner overlap on left edge"),assert&&assert(a+h<=n,"Corner overlap on right edge");const m=new ct,A=t+s,x=e+n;return h>0?m.arc(A-h,x-h,h,0,Math.PI/2,!1):m.moveTo(A,x),l>0?m.arc(t+l,x-l,l,Math.PI/2,Math.PI,!1):m.lineTo(t,x),r>0?m.arc(t+r,e+r,r,Math.PI,3*Math.PI/2,!1):m.lineTo(t,e),a>0?m.arc(A-a,e+a,a,3*Math.PI/2,2*Math.PI,!1):m.lineTo(A,e),m.close(),m}static boundsOffsetWithRadii(t,e,s){const n=t.withOffsets(e.left,e.top,e.right,e.bottom);return ct.roundedRectangleWithRadii(n.minX,n.minY,n.width,n.height,s)}static polygon(t){return new ct().polygon(t)}static bounds(t){return new ct().rect(t.minX,t.minY,t.maxX-t.minX,t.maxY-t.minY)}static lineSegment(t,e,s,n){return typeof t=="number"?new ct().moveTo(t,e).lineTo(s,n):new ct().moveToPoint(t).lineToPoint(e)}static regularPolygon(t,e){const s=new ct;return _.each(_.range(t),n=>{const i=o.createPolar(e,2*Math.PI*n/t);n===0?s.moveToPoint(i):s.lineToPoint(i)}),s.close()}static circle(t,e,s){return e===void 0?new ct().circle(0,0,t):new ct().circle(t,e,s)}static ellipse(t,e,s,n,i){return n===void 0?new ct().ellipse(0,0,t,e,s):new ct().ellipse(t,e,s,n,i)}static arc(t,e,s,n,i,r){return new ct().arc(t,e,s,n,i,r)}static union(t){return Vt.unionNonZero(t)}static intersection(t){return Vt.intersectionNonZero(t)}static xor(t){return Vt.xorNonZero(t)}static segments(t,e){if(assert)for(let s=1;s<t.length;s++)assert(t[s-1].end.equalsEpsilon(t[s].start,1e-6),"Mismatched start/end");return new ct([new It(t,void 0,!!e)])}};ct.rect=ct.rectangle,ct.roundRectangle=ct.roundRect;let be=ct;Lt.register("Shape",be);const Bt=be;let Ms=0;const de=class de{constructor(t,e){this.id=++Ms,this.initialize(t,e)}initialize(t,e){return assert&&assert(t instanceof Lt.Edge),assert&&assert(typeof e=="boolean"),this.edge=t,this.face=null,this.isReversed=e,this.signedAreaFragment=t.signedAreaFragment*(e?-1:1),this.startVertex=null,this.endVertex=null,this.sortVector=this.sortVector||new o(0,0),this.data=null,this.updateReferences(),this}serialize(){return{type:"HalfEdge",id:this.id,edge:this.edge.id,face:this.face===null?null:this.face.id,isReversed:this.isReversed,signedAreaFragment:this.signedAreaFragment,startVertex:this.startVertex===null?null:this.startVertex.id,endVertex:this.endVertex===null?null:this.endVertex.id,sortVector:o.Vector2IO.toStateObject(this.sortVector),data:this.data}}dispose(){this.edge=null,this.face=null,this.startVertex=null,this.endVertex=null,this.data=null,this.freeToPool()}getNext(t){for(let e=1;;e++){let s=this.endVertex.incidentHalfEdges.indexOf(this)-e;s<0&&(s+=this.endVertex.incidentHalfEdges.length);const n=this.endVertex.incidentHalfEdges[s].getReversed();if(!(t&&!t(n.edge)))return assert&&assert(this.endVertex===n.startVertex),n}}updateReferences(){this.startVertex=this.isReversed?this.edge.endVertex:this.edge.startVertex,this.endVertex=this.isReversed?this.edge.startVertex:this.edge.endVertex,assert&&assert(this.startVertex),assert&&assert(this.endVertex)}getEndTangent(){return this.isReversed?this.edge.segment.startTangent:this.edge.segment.endTangent.negated()}getEndCurvature(){return this.isReversed?-this.edge.segment.curvatureAt(0):this.edge.segment.curvatureAt(1)}getReversed(){return this.isReversed?this.edge.forwardHalf:this.edge.reversedHalf}getDirectionalSegment(){return this.isReversed?this.edge.segment.reversed():this.edge.segment}freeToPool(){de.pool.freeToPool(this)}};k(de,"pool",new Kt(de));let me=de;Lt.register("HalfEdge",me);function Et(c){if(assert&&assert(!c||Array.isArray(c),"cleanArray either takes an Array"),c){for(;c.length;)c.pop();return c}else return[]}nt.register("cleanArray",Et);let us=0;const re=class re{constructor(t){this.id=++us,this.initialize(t)}initialize(t){return assert&&assert(t instanceof o),this.point=t,this.incidentHalfEdges=Et(this.incidentHalfEdges),this.visited=!1,this.visitIndex=0,this.lowIndex=0,this.data=null,this.internalData={},this}serialize(){return{type:"Vertex",id:this.id,point:o.Vector2IO.toStateObject(this.point),incidentHalfEdges:this.incidentHalfEdges.map(t=>t.id),visited:this.visited,visitIndex:this.visitIndex,lowIndex:this.lowIndex}}dispose(){this.point=o.ZERO,Et(this.incidentHalfEdges),this.freeToPool()}sortEdges(){const t=[];for(let n=0;n<this.incidentHalfEdges.length;n++){const i=this.incidentHalfEdges[n];t.push(i.sortVector.setXY(i.getEndTangent().angle,i.getEndCurvature()))}const e=-Math.PI+1e-4;let s=!1;for(;!s;){s=!0;for(let n=0;n<t.length;n++)t[n].x<e&&(s=!1);if(!s)for(let n=0;n<t.length;n++){const i=t[n];i.x-=1.62594024516,i.x<-Math.PI-1e-4&&(i.x+=Math.PI*2)}}this.incidentHalfEdges.sort(re.edgeComparison)}static edgeComparison(t,e){const s=t.sortVector.x,n=e.sortVector.x;if(Math.abs(s-n)>1e-5||s!==n&&t.edge.segment instanceof $&&e.edge.segment instanceof $)return s<n?-1:1;{const i=t.sortVector.y,r=e.sortVector.y;if(Math.abs(i-r)>1e-5)return i<r?1:-1;{const l=t.getDirectionalSegment().subdivided(.999)[1].curvatureAt(0),h=e.getDirectionalSegment().subdivided(.999)[1].curvatureAt(0);return l<h?1:-1}}}freeToPool(){re.pool.freeToPool(this)}};k(re,"pool",new Kt(re));let Ct=re;Lt.register("Vertex",Ct);let ds=0;const Ze=class Ze{constructor(t,e,s){this.id=++ds,this.initialize(t,e,s)}initialize(t,e,s){return assert&&assert(t instanceof Zt),assert&&assert(e instanceof Ct),assert&&assert(s instanceof Ct),assert&&assert(t.start.distance(e.point)<.001),assert&&assert(t.end.distance(s.point)<.001),this.segment=t,this.startVertex=e,this.endVertex=s,this.signedAreaFragment=t.getSignedAreaFragment(),this.forwardHalf=me.pool.create(this,!1),this.reversedHalf=me.pool.create(this,!0),this.visited=!1,this.data=null,this.internalData={},this}serialize(){return{type:"Edge",id:this.id,segment:this.segment.serialize(),startVertex:this.startVertex===null?null:this.startVertex.id,endVertex:this.endVertex===null?null:this.endVertex.id,signedAreaFragment:this.signedAreaFragment,forwardHalf:this.forwardHalf.serialize(),reversedHalf:this.reversedHalf.serialize(),visited:this.visited,data:this.data}}dispose(){this.segment=null,this.startVertex=null,this.endVertex=null,this.forwardHalf.dispose(),this.reversedHalf.dispose(),this.forwardHalf=null,this.reversedHalf=null,this.data=null,this.freeToPool()}getOtherVertex(t){return assert&&assert(t===this.startVertex||t===this.endVertex),this.startVertex===t?this.endVertex:this.startVertex}updateReferences(){this.forwardHalf.updateReferences(),this.reversedHalf.updateReferences(),assert&&assert(!(this.segment instanceof $)||this.startVertex!==this.endVertex,"No line segments for same vertices")}freeToPool(){Ze.pool.freeToPool(this)}};k(Ze,"pool",new Kt(Ze));let _t=Ze;Lt.register("Edge",_t);let Zs=0;const ge=class ge{constructor(t){this.id=++Zs,this.initialize(t)}initialize(t){return assert&&assert(t===null||t.isInner()),this.boundary=t,this.holes=Et(this.holes),this.windingMap=null,this.filled=null,t&&this.addBoundaryFaceReferences(t),this}serialize(){return{type:"Face",id:this.id,boundary:this.boundary===null?null:this.boundary.id,holes:this.holes.map(t=>t.id),windingMap:this.windingMap,filled:this.filled}}dispose(){this.boundary=null,Et(this.holes),this.windingMap=null,this.filled=null,this.freeToPool()}addBoundaryFaceReferences(t){for(let e=0;e<t.halfEdges.length;e++)assert&&assert(t.halfEdges[e].face===null),t.halfEdges[e].face=this}recursivelyAddHoles(t){assert&&assert(!t.isInner()),this.holes.push(t),this.addBoundaryFaceReferences(t);for(let e=0;e<t.childBoundaries.length;e++)this.recursivelyAddHoles(t.childBoundaries[e])}freeToPool(){ge.pool.freeToPool(this)}};k(ge,"pool",new Kt(ge));let ae=ge;Lt.register("Face",ae);let gs=0;const fe=class fe{constructor(t,e){this.id=++gs,this.initialize(t,e)}initialize(t,e){return assert&&assert(typeof t=="number"),assert&&assert(typeof e=="boolean"),this.shapeId=t,this.closed=e,this.halfEdges=Et(this.halfEdges),this}serialize(){return{type:"Loop",id:this.id,shapeId:this.shapeId,closed:this.closed,halfEdges:this.halfEdges.map(t=>t.id)}}toSubpath(){const t=[];for(let e=0;e<this.halfEdges.length;e++)t.push(this.halfEdges[e].getDirectionalSegment());return new It(t,void 0,this.closed)}dispose(){Et(this.halfEdges),this.freeToPool()}freeToPool(){fe.pool.freeToPool(this)}};k(fe,"pool",new Kt(fe));let we=fe;Lt.register("Loop",we);let fs=0;const pe=class pe{constructor(t){this.id=++fs,this.initialize(t)}initialize(t){return this.halfEdges=t,this.signedArea=this.computeSignedArea(),this.bounds=this.computeBounds(),this.childBoundaries=Et(this.childBoundaries),this}serialize(){return{type:"Boundary",id:this.id,halfEdges:this.halfEdges.map(t=>t.id),signedArea:this.signedArea,bounds:dt.Bounds2IO.toStateObject(this.bounds),childBoundaries:this.childBoundaries.map(t=>t.id)}}dispose(){this.halfEdges=[],Et(this.childBoundaries),this.freeToPool()}isInner(){return this.signedArea>0}computeSignedArea(){let t=0;for(let e=0;e<this.halfEdges.length;e++)t+=this.halfEdges[e].signedAreaFragment;return t}computeBounds(){const t=dt.NOTHING.copy();for(let e=0;e<this.halfEdges.length;e++)t.includeBounds(this.halfEdges[e].edge.segment.getBounds());return t}computeExtremePoint(t){assert&&assert(this.halfEdges.length>0,"There is no extreme point if we have no edges");const e=[];for(let n=0;n<this.halfEdges.length;n++)e.push(this.halfEdges[n].edge.segment.transformed(t.getMatrix()));const s=dt.NOTHING.copy();for(let n=0;n<e.length;n++)s.includeBounds(e[n].getBounds());for(let n=0;n<e.length;n++){const i=e[n];if(i.getBounds().top===s.top){let r=new o(0,Number.POSITIVE_INFINITY);const a=[0,1].concat(i.getInteriorExtremaTs());for(let l=0;l<a.length;l++){const h=i.positionAt(a[l]);h.y<r.y&&(r=h)}return t.inversePosition2(r)}}throw new Error("Should not reach here if we have segments")}computeExtremeRay(t){const e=this.computeExtremePoint(t),s=t.inverseDelta2(new o(0,-1)).normalized();return new Ut(e.plus(s.timesScalar(1e-4)),s)}hasHalfEdge(t){for(let e=0;e<this.halfEdges.length;e++)if(this.halfEdges[e]===t)return!0;return!1}toSubpath(){const t=[];for(let e=0;e<this.halfEdges.length;e++)t.push(this.halfEdges[e].getDirectionalSegment());return new It(t,null,!0)}freeToPool(){pe.pool.freeToPool(this)}};k(pe,"pool",new Kt(pe));let _e=pe;Lt.register("Boundary",_e);const bt=class bt{constructor(t,e,s,n,i,r,a,l,h,M){this.initialize(t,e,s,n,i,r,a,l,h,M)}initialize(t,e,s,n,i,r,a,l,h,M){return this.a=t,this.b=e,this.atMin=s,this.atMax=n,this.btMin=i,this.btMax=r,this.aMin=a,this.aMax=l,this.bMin=h,this.bMax=M,this}pushSubdivisions(t){const e=this,s=(e.atMax+e.atMin)/2,n=(e.btMax+e.btMin)/2;if(s===this.atMin||s===this.atMax||n===this.btMin||n===this.btMax){t.push(this);return}const i=e.a.positionAt(s),r=e.b.positionAt(n);bt.boxIntersects(e.aMin,i,e.bMin,r)&&t.push(bt.pool.create(e.a,e.b,e.atMin,s,e.btMin,n,e.aMin,i,e.bMin,r)),bt.boxIntersects(i,e.aMax,e.bMin,r)&&t.push(bt.pool.create(e.a,e.b,s,e.atMax,e.btMin,n,i,e.aMax,e.bMin,r)),bt.boxIntersects(e.aMin,i,r,e.bMax)&&t.push(bt.pool.create(e.a,e.b,e.atMin,s,n,e.btMax,e.aMin,i,r,e.bMax)),bt.boxIntersects(i,e.aMax,r,e.bMax)&&t.push(bt.pool.create(e.a,e.b,s,e.atMax,n,e.btMax,i,e.aMax,r,e.bMax)),this.freeToPool()}distance(t){const e=this.atMin-t.atMin,s=this.atMax-t.atMax,n=this.btMin-t.btMin,i=this.btMax-t.btMax;return e*e+s*s+n*n+i*i}clean(){this.a=null,this.b=null,this.aMin=null,this.aMax=null,this.bMin=null,this.bMax=null}static intersect(t,e){if(!t.bounds.intersectsBounds(e.bounds))return[];const s=bt.getIntersectionRanges(t,e),n=[];for(let r=0;r<s.length;r++){const a=s[r];let l=!1;t:for(let h=0;h<n.length;h++){const M=n[h];for(let Z=0;Z<M.length;Z++){const g=M[Z];if(a.distance(g)<1e-13){M.push(a),l=!0;break t}}}l||n.push([a])}const i=[];for(let r=0;r<n.length;r++){const a=n[r];let l=0,h=0;for(let g=0;g<a.length;g++)l+=a[g].atMin+a[g].atMax,h+=a[g].btMin+a[g].btMax;l/=2*a.length,h/=2*a.length;const M=t.positionAt(l),Z=e.positionAt(h);assert&&assert(M.distance(Z)<1e-10),i.push(new yt(M.average(Z),l,h))}for(let r=0;r<s.length;r++)s[r].freeToPool();return bt.cleanPool(),i}static getIntersectionRanges(t,e){const s=t.getInteriorExtremaTs(),n=e.getInteriorExtremaTs(),i=_.zip([0].concat(s),s.concat([1])),r=_.zip([0].concat(n),n.concat([1]));let a=[];for(let l=0;l<i.length;l++)for(let h=0;h<r.length;h++){const M=i[l][0],Z=i[l][1],g=r[h][0],p=r[h][1],m=t.positionAt(M),A=t.positionAt(Z),x=e.positionAt(g),b=e.positionAt(p);bt.boxIntersects(m,A,x,b)&&a.push(bt.pool.create(t,e,M,Z,g,p,m,A,x,b))}for(let l=0;l<50;l++){const h=[];for(let M=a.length-1;M>=0;M--)a[M].pushSubdivisions(h);a=h}return a}static boxIntersects(t,e,s,n){const i=Math.max(Math.min(t.x,e.x),Math.min(s.x,n.x)),r=Math.max(Math.min(t.y,e.y),Math.min(s.y,n.y)),a=Math.min(Math.max(t.x,e.x),Math.max(s.x,n.x)),l=Math.min(Math.max(t.y,e.y),Math.max(s.y,n.y));return a-i>=0&&l-r>=0}static cleanPool(){bt.pool.forEach(t=>t.clean())}freeToPool(){bt.pool.freeToPool(this)}};bt.pool=new Kt(bt);let he=bt;Lt.register("BoundsIntersection",he);let ps=1;const r1=[];class Ge{constructor(t=1e-6){this.rootNode=ke.pool.create(this,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY),this.rootNode.isBlack=!0,this.epsilon=t,this.items=new Set}query(t,e){const s=ps++;return this.rootNode?this.rootNode.query(t,this.getMinX(t,this.epsilon),this.getMaxX(t,this.epsilon),s,e):!1}addItem(t){const e=this.getMinX(t,this.epsilon),s=this.getMaxX(t,this.epsilon);this.rootNode.split(e,this),this.rootNode.split(s,this),this.rootNode.addItem(t,e,s),this.items.add(t)}removeItem(t){this.rootNode.removeItem(t,this.getMinX(t,this.epsilon),this.getMaxX(t,this.epsilon)),this.items.delete(t)}audit(){this.rootNode.audit(this.epsilon,this.items,[])}toString(){let t=0,e="";return function s(n){e+=`${_.repeat("  ",t)}${n.toString()}
`,t++,n.hasChildren()&&(s(n.left),s(n.right)),t--}(this.rootNode),e}}const ee=class ee{constructor(t,e,s){this.items=[],this.initialize(t,e,s)}initialize(t,e,s){return this.min=e,this.max=s,this.splitValue=null,this.left=null,this.right=null,this.parent=null,this.tree=t,this.isBlack=!1,Et(this.items),this}contains(t){return t>=this.min&&t<=this.max}hasChildren(){return this.splitValue!==null}query(t,e,s,n,i){var a,l;let r=!1;if(this.min<=s&&this.max>=e){for(let h=0;h<this.items.length;h++){const M=this.items[h];if((!((a=M.internalData)!=null&&a.segmentId)||((l=M.internalData)==null?void 0:l.segmentId)<n)&&(M.internalData.segmentId=n,r=i(M),r))return!0}this.hasChildren()&&(r||(r=this.left.query(t,e,s,n,i)),r||(r=this.right.query(t,e,s,n,i)))}return r}swapChild(t,e){assert&&assert(this.left===t||this.right===t),this.left===t?this.left=e:this.right=e}hasChild(t){return this.left===t||this.right===t}otherChild(t){return assert&&assert(this.hasChild(t)),this.left===t?this.right:this.left}leftRotate(t){if(assert&&assert(this.hasChildren()&&this.right.hasChildren()),this.right.hasChildren()){const e=this.right,s=this.left,n=e.left,i=e.right;e.parent=this.parent,this.parent?this.parent.swapChild(this,e):t.rootNode=e,this.parent=e,n.parent=this,e.left=this,this.left=s,this.right=n,this.max=n.max,this.splitValue=s.max,e.min=this.min,e.splitValue=this.max;const r=Et(r1);r.push(...this.items),Et(this.items);for(let a=s.items.length-1;a>=0;a--){const l=s.items[a],h=n.items.indexOf(l);h>=0&&(s.items.splice(a,1),n.items.splice(h,1),this.items.push(l))}n.items.push(...e.items),i.items.push(...e.items),Et(e.items),e.items.push(...r)}}rightRotate(t){assert&&assert(this.hasChildren()&&this.left.hasChildren());const e=this.left,s=this.right,n=e.left,i=e.right;e.parent=this.parent,this.parent?this.parent.swapChild(this,e):t.rootNode=e,this.parent=e,i.parent=this,e.right=this,this.left=i,this.right=s,this.min=i.min,this.splitValue=s.min,e.max=this.max,e.splitValue=this.min;const r=Et(r1);r.push(...this.items),Et(this.items);for(let a=s.items.length-1;a>=0;a--){const l=s.items[a],h=i.items.indexOf(l);h>=0&&(s.items.splice(a,1),i.items.splice(h,1),this.items.push(l))}n.items.push(...e.items),i.items.push(...e.items),Et(e.items),e.items.push(...r)}fixRedBlack(t){if(assert&&assert(!this.isBlack),!this.parent)this.isBlack=!0;else{const e=this.parent;if(!e.isBlack){const s=e.parent,n=s.otherChild(e);n.isBlack?e===s.left?this===e.right?(e.leftRotate(t),e.parent.isBlack=!0,e.parent.parent.isBlack=!1,e.parent.parent.rightRotate(t)):(e.isBlack=!0,s.isBlack=!1,s.rightRotate(t)):this===e.left?(e.rightRotate(t),e.parent.isBlack=!0,e.parent.parent.isBlack=!1,e.parent.parent.leftRotate(t)):(e.isBlack=!0,s.isBlack=!1,s.leftRotate(t)):(e.isBlack=!0,n.isBlack=!0,s.isBlack=!1,s.fixRedBlack(t))}}}split(t,e){if(assert&&assert(this.contains(t)),!(t===this.min||t===this.max))if(this.hasChildren())this.splitValue!==t&&(t>this.splitValue?this.right:this.left).split(t,e);else{this.splitValue=t;const s=ee.pool.create(this.tree,this.min,t);s.parent=this,this.left=s;const n=ee.pool.create(this.tree,t,this.max);if(n.parent=this,this.right=n,!this.isBlack&&this.parent){const i=this.parent,r=i.otherChild(this);r.isBlack?(this===i.left?(i.rightRotate(e),s.isBlack=!0):(i.leftRotate(e),n.isBlack=!0),this.fixRedBlack(e)):(this.isBlack=!0,r.isBlack=!0,i.isBlack=!1,i.fixRedBlack(e))}}}addItem(t,e,s){this.min>s||this.max<e||(this.min>=e&&this.max<=s?this.items.push(t):this.hasChildren()&&(this.left.addItem(t,e,s),this.right.addItem(t,e,s)))}removeItem(t,e,s){this.min>s||this.max<e||(this.min>=e&&this.max<=s?(assert&&assert(this.items.includes(t)),Qt(this.items,t)):this.hasChildren()&&(this.left.removeItem(t,e,s),this.right.removeItem(t,e,s)))}audit(t,e,s=[]){if(assert){for(const n of s)assert(!this.items.includes(n));for(const n of this.items)assert(this.tree.getMinX(n,t)<=this.min),assert(this.tree.getMaxX(n,t)>=this.max);for(const n of s)this.tree.getMinX(n,t)<=this.min&&this.tree.getMaxX(n,t)>=this.max&&assert(e.has(n)||this.items.includes(n));if(assert(this.hasChildren()===(this.left!==null)),assert(this.hasChildren()===(this.right!==null)),assert(this.hasChildren()===(this.splitValue!==null)),assert(this.min<this.max),this.parent&&(assert(this.parent.hasChild(this)),assert(this.isBlack||this.parent.isBlack)),this.hasChildren()){assert(this.left.parent===this),assert(this.right.parent===this),assert(this.min===this.left.min),assert(this.max===this.right.max),assert(this.splitValue===this.left.max),assert(this.splitValue===this.right.min);for(const i of this.left.items)assert(!this.right.items.includes(i),"We shouldn't have two children with the same item");const n=[...s,...this.items];this.left.audit(t,e,n),this.right.audit(t,e,n)}}}toString(){return`[${this.min} ${this.max}] split:${this.splitValue} ${this.isBlack?"black":"red"} ${this.items}`}freeToPool(){ee.pool.freeToPool(this)}};ee.pool=new Kt(ee);let ke=ee;Lt.register("SegmentTree",Ge);class Oe extends Ge{getMinX(t,e){return t.segment.bounds.left-e}getMaxX(t,e){return t.segment.bounds.right+e}}Lt.register("EdgeSegmentTree",Oe);class g1 extends Ge{getMinX(t,e){return t.point.x-e}getMaxX(t,e){return t.point.x+e}}Lt.register("VertexSegmentTree",g1);let ms=0,Ve=0;const Ee=1e-5,a1=.1*Ee,o1=.01*Ee,Ae=1e-6;class Tt{constructor(){this.vertices=[],this.edges=[],this.innerBoundaries=[],this.outerBoundaries=[],this.boundaries=[],this.shapeIds=[],this.loops=[],this.unboundedFace=ae.pool.create(null),this.faces=[this.unboundedFace]}serialize(){return{type:"Graph",vertices:this.vertices.map(t=>t.serialize()),edges:this.edges.map(t=>t.serialize()),boundaries:this.boundaries.map(t=>t.serialize()),innerBoundaries:this.innerBoundaries.map(t=>t.id),outerBoundaries:this.outerBoundaries.map(t=>t.id),shapeIds:this.shapeIds,loops:this.loops.map(t=>t.serialize()),unboundedFace:this.unboundedFace.id,faces:this.faces.map(t=>t.serialize())}}static deserialize(t){const e=new Tt,s={},n={},i={},r={},a={},l={};return e.vertices=t.vertices.map(h=>{const M=new Ct(o.Vector2IO.fromStateObject(h.point));return s[h.id]=M,M.visited=h.visited,M.visitIndex=h.visitIndex,M.lowIndex=h.lowIndex,M}),e.edges=t.edges.map(h=>{const M=new _t(Zt.deserialize(h.segment),s[h.startVertex],s[h.endVertex]);n[h.id]=M,M.signedAreaFragment=h.signedAreaFragment;const Z=(g,p)=>{i[p.id]=g,g.isReversed=p.isReversed,g.signedAreaFragment=p.signedAreaFragment,g.startVertex=s[p.startVertex.id],g.endVertex=s[p.endVertex.id],g.sortVector=o.Vector2IO.fromStateObject(p.sortVector),g.data=p.data};return Z(M.forwardHalf,h.forwardHalf),Z(M.reversedHalf,h.reversedHalf),M.visited=h.visited,M.data=h.data,M}),t.vertices.forEach((h,M)=>{const Z=e.vertices[M];Z.incidentHalfEdges=h.incidentHalfEdges.map(g=>i[g])}),e.boundaries=t.boundaries.map(h=>{const M=_e.pool.create(h.halfEdges.map(Z=>i[Z]));return r[h.id]=M,M.signedArea=h.signedArea,M.bounds=dt.Bounds2IO.fromStateObject(h.bounds),M}),t.boundaries.forEach((h,M)=>{const Z=e.boundaries[M];Z.childBoundaries=h.childBoundaries.map(g=>r[g])}),e.innerBoundaries=t.innerBoundaries.map(h=>r[h]),e.outerBoundaries=t.outerBoundaries.map(h=>r[h]),e.shapeIds=t.shapeIds,e.loops=t.loops.map(h=>{const M=new we(h.shapeId,h.closed);return a[h.id]=M,M.halfEdges=h.halfEdges.map(Z=>i[Z]),M}),e.faces=t.faces.map((h,M)=>{const Z=M===0?e.unboundedFace:new ae(r[h.boundary]);return l[h.id]=Z,Z.holes=h.holes.map(g=>r[g]),Z.windingMap=h.windingMap,Z.filled=h.filled,Z}),t.edges.forEach((h,M)=>{const Z=e.edges[M];Z.forwardHalf.face=h.forwardHalf.face===null?null:l[h.forwardHalf.face],Z.reversedHalf.face=h.reversedHalf.face===null?null:l[h.reversedHalf.face]}),e}addShape(t,e,s){for(let n=0;n<e.subpaths.length;n++)this.addSubpath(t,e.subpaths[n],s)}addSubpath(t,e,s){if(assert&&assert(typeof t=="number"),assert&&assert(e instanceof It),s=Ne({ensureClosed:!0},s),this.shapeIds.indexOf(t)<0&&this.shapeIds.push(t),e.segments.length===0)return;const n=e.closed||s.ensureClosed,i=s.ensureClosed?e.getFillSegments():e.segments;let r;const a=[];for(r=0;r<i.length;r++){let h=r-1;h<0&&(h=i.length-1);let M=i[h].end;const Z=i[r].start;!n&&r===0&&(M=Z),Z.equals(M)?a.push(Ct.pool.create(Z)):(assert&&assert(Z.distance(M)<1e-5,"Inaccurate start/end points"),a.push(Ct.pool.create(Z.average(M))))}n||a.push(Ct.pool.create(i[i.length-1].end));const l=we.pool.create(t,n);for(r=0;r<i.length;r++){let h=r+1;n&&h===i.length&&(h=0);const M=_t.pool.create(i[r],a[r],a[h]);l.halfEdges.push(M.forwardHalf),this.addEdge(M)}this.loops.push(l),this.vertices.push(...a)}computeSimplifiedFaces(){this.eliminateOverlap(),this.eliminateSelfIntersection(),this.eliminateIntersection(),this.collapseVertices(),this.removeBridges(),this.removeLowOrderVertices(),this.orderVertexEdges(),this.extractFaces(),this.computeBoundaryTree(),this.computeWindingMap()}computeFaceInclusion(t){for(let e=0;e<this.faces.length;e++){const s=this.faces[e];s.filled=t(s.windingMap)}}createFilledSubGraph(){const t=new Tt,e={};for(let s=0;s<this.edges.length;s++){const n=this.edges[s];if(n.forwardHalf.face.filled!==n.reversedHalf.face.filled){if(!e[n.startVertex.id]){const a=Ct.pool.create(n.startVertex.point);t.vertices.push(a),e[n.startVertex.id]=a}if(!e[n.endVertex.id]){const a=Ct.pool.create(n.endVertex.point);t.vertices.push(a),e[n.endVertex.id]=a}const i=e[n.startVertex.id],r=e[n.endVertex.id];t.addEdge(_t.pool.create(n.segment,i,r))}}return t.collapseAdjacentEdges(),t.orderVertexEdges(),t.extractFaces(),t.computeBoundaryTree(),t.fillAlternatingFaces(),t}facesToShape(){const t=[];for(let e=0;e<this.faces.length;e++){const s=this.faces[e];if(s.filled){t.push(s.boundary.toSubpath());for(let n=0;n<s.holes.length;n++)t.push(s.holes[n].toSubpath())}}return new Lt.Shape(t)}dispose(){for(;this.boundaries.length;)this.boundaries.pop().dispose();for(Et(this.innerBoundaries),Et(this.outerBoundaries);this.loops.length;)this.loops.pop().dispose();for(;this.faces.length;)this.faces.pop().dispose();for(;this.vertices.length;)this.vertices.pop().dispose();for(;this.edges.length;)this.edges.pop().dispose()}addEdge(t){assert&&assert(t instanceof _t),assert&&assert(!_.includes(t.startVertex.incidentHalfEdges,t.reversedHalf),"Should not already be connected"),assert&&assert(!_.includes(t.endVertex.incidentHalfEdges,t.forwardHalf),"Should not already be connected"),this.edges.push(t),t.startVertex.incidentHalfEdges.push(t.reversedHalf),t.endVertex.incidentHalfEdges.push(t.forwardHalf)}removeEdge(t){assert&&assert(t instanceof _t),Qt(this.edges,t),Qt(t.startVertex.incidentHalfEdges,t.reversedHalf),Qt(t.endVertex.incidentHalfEdges,t.forwardHalf)}replaceEdgeInLoops(t,e){const s=[];for(let n=0;n<e.length;n++)s.push(e[e.length-1-n].getReversed());for(let n=0;n<this.loops.length;n++){const i=this.loops[n];for(let r=i.halfEdges.length-1;r>=0;r--){const a=i.halfEdges[r];if(a.edge===t){const l=a===t.forwardHalf?e:s;Array.prototype.splice.apply(i.halfEdges,[r,1].concat(l))}}}}collapseAdjacentEdges(){let t=!0;for(;t;){t=!1;for(let e=0;e<this.vertices.length;e++){const s=this.vertices[e];if(s.incidentHalfEdges.length===2){const n=s.incidentHalfEdges[0].edge,i=s.incidentHalfEdges[1].edge;let r=n.segment,a=i.segment;const l=n.getOtherVertex(s),h=i.getOtherVertex(s);if(assert&&assert(this.loops.length===0),n.startVertex===s&&(r=r.reversed()),i.endVertex===s&&(a=a.reversed()),r instanceof $&&a instanceof $&&r.tangentAt(0).normalized().distance(a.tangentAt(0).normalized())<1e-6){this.removeEdge(n),this.removeEdge(i),n.dispose(),i.dispose(),Qt(this.vertices,s),s.dispose();const M=new $(l.point,h.point);this.addEdge(new _t(M,l,h)),t=!0;break}}}}}eliminateOverlap(){const e=new self.FlatQueue,s=new Oe(1e-4),n=Ve++,i=l=>{const h=l.segment.bounds;e.push({start:!0,edge:l},h.minY-1e-4),e.push({start:!1,edge:l},h.maxY+1e-4)},r=l=>{l.internalData.removedId=n};for(let l=0;l<this.edges.length;l++)i(this.edges[l]);const a=[];for(;e.length;){const l=e.pop(),h=l.edge;if(h.internalData.removedId!==n)if(l.start){let M=!1,Z,g;if(s.query(h,p=>{const m=h.segment.getOverlaps(p.segment);if(m!==null&&m.length)for(let A=0;A<m.length;A++){const x=m[A];if(Math.abs(x.t1-x.t0)>1e-5&&Math.abs(x.qt1-x.qt0)>1e-5)return g=this.splitOverlap(h,p,x),M=!0,Z=p,!0}return!1}),M){s.removeItem(Z),r(Z),r(h);for(let p=0;p<g.length;p++)i(g[p]);a.push(h),a.push(Z)}else s.addItem(h)}else s.removeItem(h)}for(let l=0;l<a.length;l++)a[l].dispose()}splitOverlap(t,e,s){const n=[],i=t.segment,r=e.segment;this.removeEdge(t),this.removeEdge(e);let a=s.t0,l=s.t1,h=s.qt0,M=s.qt1;a<1e-5&&(a=0),l>1-1e-5&&(l=1),h<1e-5&&(h=0),M>1-1e-5&&(M=1);const Z=a>0?i.subdivided(a)[0]:null,g=h>0?r.subdivided(h)[0]:null,p=l<1?i.subdivided(l)[1]:null,m=M<1?r.subdivided(M)[1]:null;let A=i;a>0&&(A=A.subdivided(a)[1]),l<1&&(A=A.subdivided(Y.linear(a,1,0,1,l))[0]);let x;Z&&g?(x=Ct.pool.create(A.start),this.vertices.push(x)):Z?x=s.a>0?e.startVertex:e.endVertex:x=t.startVertex;let b;p&&m?(b=Ct.pool.create(A.end),this.vertices.push(b)):p?b=s.a>0?e.endVertex:e.startVertex:b=t.endVertex;const w=_t.pool.create(A,x,b);n.push(w);let q,S,T,F;Z&&(q=_t.pool.create(Z,t.startVertex,x),n.push(q)),p&&(S=_t.pool.create(p,b,t.endVertex),n.push(S)),g&&(T=_t.pool.create(g,e.startVertex,s.a>0?x:b),n.push(T)),m&&(F=_t.pool.create(m,s.a>0?b:x,e.endVertex),n.push(F));for(let C=0;C<n.length;C++)this.addEdge(n[C]);const V=(Z?[q]:[]).concat([w]).concat(p?[S]:[]),O=(g?[T]:[]).concat([w]).concat(m?[F]:[]),R=[],H=[];for(let C=0;C<V.length;C++)R.push(V[C].forwardHalf);for(let C=0;C<O.length;C++){const tt=O[C]!==w||s.a>0;H.push(tt?O[C].forwardHalf:O[C].reversedHalf)}return this.replaceEdgeInLoops(t,R),this.replaceEdgeInLoops(e,H),n}eliminateSelfIntersection(){assert&&assert(this.boundaries.length===0,"Only handles simpler level primitive splitting right now");for(let t=this.edges.length-1;t>=0;t--){const e=this.edges[t],s=e.segment;if(s instanceof pt){const n=s.getSelfIntersection();if(n){assert&&assert(n.aT<n.bT);const i=s.subdivisions([n.aT,n.bT]),r=Ct.pool.create(n.point);this.vertices.push(r);const a=_t.pool.create(i[0],e.startVertex,r),l=_t.pool.create(i[1],r,r),h=_t.pool.create(i[2],r,e.endVertex);this.removeEdge(e),this.addEdge(a),this.addEdge(l),this.addEdge(h),this.replaceEdgeInLoops(e,[a.forwardHalf,l.forwardHalf,h.forwardHalf]),e.dispose()}}}}eliminateIntersection(){const e=new self.FlatQueue,s=new Oe(1e-4),n=Ve++,i=l=>{const h=l.segment.bounds;e.push({start:!0,edge:l},h.minY-1e-4),e.push({start:!1,edge:l},h.maxY+1e-4)},r=l=>{l.internalData.removedId=n};for(let l=0;l<this.edges.length;l++)i(this.edges[l]);const a=[];for(;e.length;){const l=e.pop(),h=l.edge;if(h.internalData.removedId!==n)if(l.start){let M=!1,Z,g,p;if(s.query(h,m=>{const A=h.segment,x=m.segment;let b=Zt.intersect(A,x);if(b=b.filter(w=>{const q=w.point;return Tt.isInternal(q,w.aT,A,a1,Ae)||Tt.isInternal(q,w.bT,x,a1,Ae)}),b.length){const w=b[0],q=this.simpleSplit(h,m,w.aT,w.bT,w.point);if(q)return M=!0,Z=m,g=q.addedEdges,p=q.removedEdges,!0}return!1}),M){p.includes(h)?(r(h),a.push(h)):s.addItem(h),p.includes(Z)&&(s.removeItem(Z),r(Z),a.push(Z));for(let m=0;m<g.length;m++)i(g[m])}else s.addItem(h)}else s.removeItem(h)}for(let l=0;l<a.length;l++)a[l].dispose()}simpleSplit(t,e,s,n,i){const r=Tt.isInternal(i,s,t.segment,o1,Ae),a=Tt.isInternal(i,n,e.segment,o1,Ae);let l=null;r?a?(l=Ct.pool.create(i),this.vertices.push(l)):l=n<.5?e.startVertex:e.endVertex:l=s<.5?t.startVertex:t.endVertex;let h=!1;const M=[],Z=[];return r&&l!==t.startVertex&&l!==t.endVertex&&(M.push(...this.splitEdge(t,s,l)),Z.push(t),h=!0),a&&l!==e.startVertex&&l!==e.endVertex&&(M.push(...this.splitEdge(e,n,l)),Z.push(e),h=!0),h?{addedEdges:M,removedEdges:Z}:null}splitEdge(t,e,s){assert&&assert(this.boundaries.length===0,"Only handles simpler level primitive splitting right now"),assert&&assert(t.startVertex!==s),assert&&assert(t.endVertex!==s);const n=t.segment.subdivided(e);assert&&assert(n.length===2);const i=_t.pool.create(n[0],t.startVertex,s),r=_t.pool.create(n[1],s,t.endVertex);return this.removeEdge(t),this.addEdge(i),this.addEdge(r),this.replaceEdgeInLoops(t,[i.forwardHalf,r.forwardHalf]),[i,r]}collapseVertices(){assert&&assert(_.every(this.edges,l=>_.includes(this.vertices,l.startVertex))),assert&&assert(_.every(this.edges,l=>_.includes(this.vertices,l.endVertex)));const t=10*Ee,e=new self.FlatQueue,s=new g1(t),n=Ve++,i=l=>{e.push({start:!0,vertex:l},l.point.y-t),e.push({start:!1,vertex:l},l.point.y+t)},r=l=>{l.internalData.removedId=n};for(let l=0;l<this.vertices.length;l++)i(this.vertices[l]);const a=[];for(;e.length;){const l=e.pop(),h=l.vertex;if(h.internalData.removedId!==n)if(l.start){let M=!1,Z,g;if(s.query(h,p=>{const m=h.point.distance(p.point);if(m<Ee){const A=Ct.pool.create(m===0?h.point:h.point.average(p.point));this.vertices.push(A),Qt(this.vertices,h),Qt(this.vertices,p);for(let x=this.edges.length-1;x>=0;x--){const b=this.edges[x],w=b.startVertex===h||b.startVertex===p,q=b.endVertex===h||b.endVertex===p;if(w&&q){if((b.segment.bounds.width>1e-5||b.segment.bounds.height>1e-5)&&(b.segment instanceof pt||b.segment instanceof K||b.segment instanceof ft)){const S=_t.pool.create(b.segment,A,A);this.addEdge(S),this.replaceEdgeInLoops(b,[S.forwardHalf])}else this.replaceEdgeInLoops(b,[]);this.removeEdge(b),b.dispose()}else w?(b.startVertex=A,A.incidentHalfEdges.push(b.reversedHalf),b.updateReferences()):q&&(b.endVertex=A,A.incidentHalfEdges.push(b.forwardHalf),b.updateReferences())}return g=[A],M=!0,Z=p,!0}return!1}),M){s.removeItem(Z),r(Z),r(h);for(let p=0;p<g.length;p++)i(g[p]);a.push(h),a.push(Z)}else s.addItem(h)}else s.removeItem(h)}for(let l=0;l<a.length;l++)a[l].dispose();assert&&assert(_.every(this.edges,l=>_.includes(this.vertices,l.startVertex))),assert&&assert(_.every(this.edges,l=>_.includes(this.vertices,l.endVertex)))}markBridges(t,e){e.visited=!0,e.visitIndex=e.lowIndex=ms++;for(let s=0;s<e.incidentHalfEdges.length;s++){const n=e.incidentHalfEdges[s].edge,i=e.incidentHalfEdges[s].startVertex;i.visited?n.visited||(e.lowIndex=Math.min(e.lowIndex,i.visitIndex)):(n.visited=!0,i.parent=e,this.markBridges(t,i),e.lowIndex=Math.min(e.lowIndex,i.lowIndex),i.lowIndex>e.visitIndex&&t.push(n))}}removeBridges(){const t=[];for(let e=0;e<this.vertices.length;e++){const s=this.vertices[e];s.visited||this.markBridges(t,s)}for(let e=0;e<t.length;e++){const s=t[e];this.removeEdge(s),this.replaceEdgeInLoops(s,[]),s.dispose()}}removeLowOrderVertices(){assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.startVertex))),assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.endVertex)));let t=!0;for(;t;){t=!1;for(let e=this.vertices.length-1;e>=0;e--){const s=this.vertices[e];if(s.incidentHalfEdges.length<2){for(let n=0;n<s.incidentHalfEdges.length;n++){const i=s.incidentHalfEdges[n].edge;this.removeEdge(i),this.replaceEdgeInLoops(i,[]),i.dispose()}this.vertices.splice(e,1),s.dispose(),t=!0;break}}}assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.startVertex))),assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.endVertex)))}orderVertexEdges(){for(let t=0;t<this.vertices.length;t++)this.vertices[t].sortEdges()}extractFaces(){const t=[];for(let e=0;e<this.edges.length;e++)t.push(this.edges[e].forwardHalf),t.push(this.edges[e].reversedHalf);for(;t.length;){const e=[];let s=t[0];const n=s;for(;s&&(Qt(t,s),e.push(s),s=s.getNext(),s!==n););const i=_e.pool.create(e);(i.signedArea>0?this.innerBoundaries:this.outerBoundaries).push(i),this.boundaries.push(i)}for(let e=0;e<this.innerBoundaries.length;e++)this.faces.push(ae.pool.create(this.innerBoundaries[e]))}computeBoundaryTree(){const t=[],e=new u1(Yt.rotation2(1.5729657));for(let s=0;s<this.outerBoundaries.length;s++){const n=this.outerBoundaries[s],i=n.computeExtremeRay(e);let r=null,a=Number.POSITIVE_INFINITY,l=!1;for(let h=0;h<this.edges.length;h++){const M=this.edges[h],Z=M.segment.intersection(i);for(let g=0;g<Z.length;g++){const p=Z[g];p.distance<a&&(r=M,a=p.distance,l=p.wind)}}if(r===null)t.push(n);else{const M=l<0?r.reversedHalf:r.forwardHalf;this.getBoundaryOfHalfEdge(M).childBoundaries.push(n)}}t.forEach(this.unboundedFace.recursivelyAddHoles.bind(this.unboundedFace));for(let s=0;s<this.faces.length;s++){const n=this.faces[s];n.boundary!==null&&n.boundary.childBoundaries.forEach(n.recursivelyAddHoles.bind(n))}}computeWindingMap(){const t=this.edges.slice(),e={};for(let s=0;s<this.shapeIds.length;s++)e[this.shapeIds[s]]=0;for(this.unboundedFace.windingMap=e;t.length;)for(let s=t.length-1;s>=0;s--){const n=t[s],i=n.forwardHalf,r=n.reversedHalf,a=i.face,l=r.face;assert&&assert(a!==l);const h=a.windingMap!==null,M=l.windingMap!==null;if(h&&M){if(t.splice(s,1),assert)for(let Z=0;Z<this.shapeIds.length;Z++){const g=this.shapeIds[Z];assert(a.windingMap[g]-l.windingMap[g]===this.computeDifferential(n,g))}}else{if(!h&&!M)continue;{const Z=h?a:l,g=h?l:a,p={};for(let m=0;m<this.shapeIds.length;m++){const A=this.shapeIds[m],x=this.computeDifferential(n,A);p[A]=Z.windingMap[A]+x*(h?-1:1)}g.windingMap=p}}}}computeDifferential(t,e){let s=0;for(let n=0;n<this.loops.length;n++){const i=this.loops[n];if(assert&&assert(i.closed,"This is only defined to work for closed loops"),i.shapeId===e)for(let r=0;r<i.halfEdges.length;r++){const a=i.halfEdges[r];a===t.forwardHalf?s++:a===t.reversedHalf&&s--}}return s}fillAlternatingFaces(){let t=0;for(let e=0;e<this.faces.length;e++)this.faces[e].filled=null,t++;for(this.unboundedFace.filled=!1,t--;t;)for(let e=0;e<this.edges.length;e++){const s=this.edges[e],n=s.forwardHalf.face,i=s.reversedHalf.face,r=n.filled===null,a=i.filled===null;r&&!a?(n.filled=!i.filled,t--):!r&&a&&(i.filled=!n.filled,t--)}}getBoundaryOfHalfEdge(t){for(let e=0;e<this.boundaries.length;e++){const s=this.boundaries[e];if(s.hasHalfEdge(t))return s}throw new Error("Could not find boundary")}static isInternal(t,e,s,n,i){return e>i&&e<1-i&&t.distance(s.start)>n&&t.distance(s.end)>n}static BINARY_NONZERO_UNION(t){return t[0]!==0||t[1]!==0}static BINARY_NONZERO_INTERSECTION(t){return t[0]!==0&&t[1]!==0}static BINARY_NONZERO_DIFFERENCE(t){return t[0]!==0&&t[1]===0}static BINARY_NONZERO_XOR(t){return(t[0]!==0^t[1]!==0)===1}static binaryResult(t,e,s){const n=new Tt;n.addShape(0,t),n.addShape(1,e),n.computeSimplifiedFaces(),n.computeFaceInclusion(s);const i=n.createFilledSubGraph(),r=i.facesToShape();return n.dispose(),i.dispose(),r}static unionNonZero(t){const e=new Tt;for(let i=0;i<t.length;i++)e.addShape(i,t[i]);e.computeSimplifiedFaces(),e.computeFaceInclusion(i=>{for(let r=0;r<t.length;r++)if(i[r]!==0)return!0;return!1});const s=e.createFilledSubGraph(),n=s.facesToShape();return e.dispose(),s.dispose(),n}static intersectionNonZero(t){const e=new Tt;for(let i=0;i<t.length;i++)e.addShape(i,t[i]);e.computeSimplifiedFaces(),e.computeFaceInclusion(i=>{for(let r=0;r<t.length;r++)if(i[r]===0)return!1;return!0});const s=e.createFilledSubGraph(),n=s.facesToShape();return e.dispose(),s.dispose(),n}static xorNonZero(t){const e=new Tt;for(let i=0;i<t.length;i++)e.addShape(i,t[i]);e.computeSimplifiedFaces(),e.computeFaceInclusion(i=>{let r=!1;for(let a=0;a<t.length;a++)i[a]!==0&&(r=!r);return r});const s=e.createFilledSubGraph(),n=s.facesToShape();return e.dispose(),s.dispose(),n}static simplifyNonZero(t){const e=new Tt;e.addShape(0,t),e.computeSimplifiedFaces(),e.computeFaceInclusion(i=>i[0]!==0);const s=e.createFilledSubGraph(),n=s.facesToShape();return e.dispose(),s.dispose(),n}static clipShape(t,e,s){let n,i,r;s=Ne({includeExterior:!1,includeBoundary:!0,includeInterior:!0},s);const h=Tt.simplifyNonZero(t),M=new Tt;for(M.addShape(0,e,{ensureClosed:!1}),M.addShape(1,h),M.eliminateOverlap(),M.eliminateSelfIntersection(),M.eliminateIntersection(),M.collapseVertices(),n=0;n<M.loops.length;n++)if(r=M.loops[n],r.shapeId===1)for(i=0;i<r.halfEdges.length;i++)r.halfEdges[i].edge.data=!0;const Z=[];for(n=0;n<M.loops.length;n++)if(r=M.loops[n],r.shapeId===0){let g=[];for(i=0;i<r.halfEdges.length;i++){const p=r.halfEdges[i];(p.edge.data?s.includeBoundary:h.containsPoint(p.edge.segment.positionAt(.5))?s.includeInterior:s.includeExterior)?g.push(p.getDirectionalSegment()):g.length&&(Z.push(new It(g,void 0,r.closed)),g=[])}g.length&&Z.push(new It(g,void 0,r.closed))}return M.dispose(),new Lt.Shape(Z)}}Lt.register("Graph",Tt);const Vt=Tt;function ws(c){return c.replace(/\u202a|\u202b|\u202c/g,"")}nt.register("stripEmbeddingMarks",ws);function _s(c,t,e,s,n){assert&&assert(Array.isArray(c)&&_.uniq(c).length===c.length,"a is not an array of unique items"),assert&&assert(Array.isArray(t)&&_.uniq(t).length===t.length,"b is not an array of unique items"),e=e||[],s=s||[],n=n||[],assert&&assert(Array.isArray(e)&&e.length===0),assert&&assert(Array.isArray(s)&&s.length===0),assert&&assert(Array.isArray(n)&&n.length===0),Array.prototype.push.apply(e,c),Array.prototype.push.apply(s,t);t:for(let i=0;i<e.length;i++){const r=e[i];for(let a=0;a<s.length;a++){const l=s[a];if(r===l){if(n.push(r),e.splice(i,1),s.splice(a,1),a=0,i===e.length)break t;i-=1}}}return e}nt.register("arrayDifference",_s);function vs(c){const t=new Map;return e=>{if(t.has(e))return t.get(e);{const s=c(e);return t.set(e,s),s}}}nt.register("memoize",vs);const xs=(c,t)=>{assert&&c&&t.forEach(e=>{assert&&assert(Object.getOwnPropertyDescriptor(c,e)||_.some(k1(c.constructor).map(s=>Object.getOwnPropertyDescriptor(s.prototype,e))),`property not defined: ${e}`)})};nt.register("assertHasProperties",xs);function As(c){return c.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;").replace(/ /g,"&nbsp;")}nt.register("escapeHTML",As);function bs(c,...t){return _.each(t,e=>{if(e)for(const s in e){const n=Object.getOwnPropertyDescriptor(e,s);n&&(typeof n.get=="function"||e[s]!==void 0)&&Object.defineProperty(c,s,n)}}),c}nt.register("extendDefined",bs);function Es(c,t,e){assert&&assert(c),assert&&assert(Array.isArray(t)),e&&(assert&&assert(Object.getPrototypeOf(e)===Object.prototype,"Extra prototype on options object is a code smell"),_.each(t,s=>{assert&&assert(!e.hasOwnProperty(s)||e[s]!==void 0,`Undefined not allowed for key: ${s}`),e[s]!==void 0&&(c[s]=e[s])}))}nt.register("mutate",Es);class Pe{constructor(t,e){this._map=new Map,this._enumeration=t,this._values=t.enumeration.values,this._values.forEach(s=>{assert&&assert(!this._map.has(s),"Enumeration key override problem"),this._map.set(s,e(s))})}get(t){return assert&&assert(this._values.includes(t)),assert&&assert(this._map.has(t)),this._map.get(t)}set(t,e){assert&&assert(this._values.includes(t)),this._map.set(t,e)}map(t){return new Pe(this._enumeration,e=>t(this.get(e),e))}forEach(t){this._values.forEach(e=>t(this.get(e),e))}values(){return this._values.map(t=>this.get(t))}}nt.register("EnumerationMap",Pe);class ue extends Pe{constructor(t,e){super(kt,s=>s===kt.HORIZONTAL?t:e)}get horizontal(){return this.get(kt.HORIZONTAL)}set horizontal(t){this.set(kt.HORIZONTAL,t)}get vertical(){return this.get(kt.VERTICAL)}set vertical(t){this.set(kt.VERTICAL,t)}with(t,e){return new ue(t===kt.HORIZONTAL?e:this.horizontal,t===kt.VERTICAL?e:this.vertical)}static create(t){return new ue(t(kt.HORIZONTAL),t(kt.VERTICAL))}map(t){return new ue(t(this.horizontal,kt.HORIZONTAL),t(this.vertical,kt.VERTICAL))}}nt.register("OrientationPair",ue);class qs{constructor(){this.pendingLocks=[],this.loadComplete=!1,this.listeners=[]}reset(){this.loadComplete=!1}addListener(t){this.listeners.push(t)}proceedIfReady(){this.pendingLocks.length===0&&(assert&&assert(!this.loadComplete,"cannot complete load twice"),this.loadComplete=!0,this.listeners.forEach(t=>t()))}createLock(t){return assert&&assert(!this.loadComplete,"Cannot create more locks after load-step has completed"),this.pendingLocks.push(t),()=>{assert&&assert(this.pendingLocks.includes(t),"invalid lock"),Qt(this.pendingLocks,t),this.proceedIfReady()}}}const f1=new qs;nt.register("asyncLoader",f1);function ys(c){const t=[];return c(e=>{t.push(e)}),t}nt.register("collect",ys);function He(c){if(Array.isArray(c))return c.map(He);if(typeof c!="object"||c===null)return c;const t={};return Object.keys(c).sort().forEach(e=>{const s=c[e];t[e]=He(s)}),t}nt.register("copyWithSortedKeys",He);function Ps(c,t,e){const s=[];function n(i,r){return r.forEach((a,l)=>{s.push(l),i===1?e(a,...s):n(i-1,a),s.pop()})}return n(c,t)}nt.register("dimensionForEach",Ps);function Ss(c,t,e){const s=[];function n(i,r){return r.map((a,l)=>{s.push(l);const h=i===1?e(a,...s):n(i-1,a);return s.pop(),h})}return n(c,t)}nt.register("dimensionMap",Ss);class Ts{constructor(t,e){this.eventModel=t,this.eventCallback=e,this.period=this.eventModel.getPeriodBeforeNextEvent(),this.timeBeforeNextEvent=this.period}step(t){for(;t>=this.timeBeforeNextEvent;)t-=this.timeBeforeNextEvent,this.period=this.eventModel.getPeriodBeforeNextEvent(),this.timeBeforeNextEvent=this.period,this.eventCallback(t);this.timeBeforeNextEvent-=t}getRatio(){return(this.period-this.timeBeforeNextEvent)/this.period}}class Cs{constructor(t){this.rate=t,assert&&assert(t>0,"We need to have a strictly positive rate in order to prevent infinite loops.")}getPeriodBeforeNextEvent(){return 1/this.rate}}class Is{constructor(t,e){this.rate=t,this.pseudoRandomNumberSource=e,assert&&assert(t>0,"We need to have a strictly positive rate in order to prevent infinite loops.")}getPeriodBeforeNextEvent(){const t=this.pseudoRandomNumberSource();return assert&&assert(t>=0&&t<1,`Our uniform random number is outside of its expected range with a value of ${t}`),t*2/this.rate}}class Fs{constructor(t,e){this.rate=t,this.pseudoRandomNumberSource=e,assert&&assert(t>0,"We need to have a strictly positive poisson rate in order to prevent infinite loops.")}getPeriodBeforeNextEvent(){const t=this.pseudoRandomNumberSource();return assert&&assert(t>=0&&t<1,`Our uniform random number is outside of its expected range with a value of ${t}`),-Math.log(t)/this.rate}}nt.register("PoissonEventModel",Fs);nt.register("UniformEventModel",Is);nt.register("ConstantEventModel",Cs);nt.register("EventTimer",Ts);const p1=c=>{assert&&assert(c.trim()===c,"path must be trimmed");const t=_.get(self,c);return t!==void 0?t:null};nt.register("getGlobal",p1);const Vs=c=>{assert&&assert(c.split(".").length>1,"path must have multiple parts"),assert&&assert(c.trim()===c,"path must be trimmed");const t=c.split("."),e=t.pop(),s=_.get(self,t);return s?s[e].bind(s):null};nt.register("gracefulBind",Vs);function Bs(c){return c}nt.register("identity",Bs);function Rs(c,t){assert&&assert(Array.isArray(c));const e=[],s=c.length*2-1;for(let n=0;n<s;n++)n%2===0?e.push(c[n/2]):e.push(t((n-1)/2));return e}nt.register("interleave",Rs);function Ns(c){const t=typeof c=="string"?{src:c}:c,e=t.src,s=t.callback,n=t.async===void 0?!0:t.async,i=t.cacheBust===void 0?!1:t.cacheBust;let r=!1;const a=document.createElement("script");a.type="text/javascript",a.async=n,a.onload=a.onreadystatechange=function(){const h=this.readyState;h&&h!=="complete"&&h!=="loaded"||r||(r=!0,s&&s())},a.src=e+(i?`?random=${Math.random().toFixed(10)}`:"");const l=document.getElementsByTagName("script")[0];l.parentNode.insertBefore(a,l)}nt.register("loadScript",Ns);function $s(c){phet.log&&phet.log(`${c}: ${JSON.stringify(p1(c),null,2)}`)}nt.register("logGlobal",$s);class ks{constructor(t,e,s){this.width=t,this.height=e,this.url=s,this.img=new Image;const n=f1.createLock(this.img);this.img.onload=n,this.img.src=this.url,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height;const i=this.canvas.getContext("2d");this.updateCanvas=()=>{this.img.complete&&(typeof this.img.naturalWidth>"u"||this.img.naturalWidth>0)&&(i.drawImage(this.img,0,0),delete this.updateCanvas)}}}nt.register("MipmapElement",ks);function Os(c){const t=[],e=c.length;if(e>1)for(let s=0;s<e-1;s++){const n=c[s];for(let i=s+1;i<e;i++)t.push([n,c[i]])}return t}nt.register("pairs",Os);function Hs(c,t){assert&&assert(Array.isArray(c));const e=[],s=[],n=c.length;for(let i=0;i<n;i++)t(c[i])?e.push(c[i]):s.push(c[i]);return[e,s]}nt.register("partition",Hs);const Ds={GRAVITATIONAL_CONSTANT:66743e-15,GRAVITY_ON_EARTH:9.81};nt.register("PhysicalConstants",Ds);function zs(c){return assert&&assert(c!==void 0,"Required field is undefined."),c}nt.register("required",zs);const Be={};function Xs(c,t,e){const s=Be;let n=s,i=s;return c.hasOwnProperty(t)&&(n=c[t]),c.hasOwnProperty(e)&&(i=c[e]),n!==Be?c[e]=n:delete c[e],i!==Be?c[t]=i:delete c[t],c}nt.register("swapObjectKeys",Xs);const it=self._,E=(c,...t)=>self.assert(c,...t),P=()=>!!self.assert;class Ys{constructor(t,e){k(this,"incomingHalfEdges");k(this,"outgoingHalfEdges");k(this,"edges");k(this,"faces");this.logicalCoordinates=t,this.viewCoordinates=e,P()&&E(t),P()&&E(e)}getHalfEdgeTo(t){const e=this.outgoingHalfEdges.find(s=>s.end===t);return P()&&E(e),e}getHalfEdgeFrom(t){const e=this.incomingHalfEdges.find(s=>s.start===t);return P()&&E(e),e}getEdgeTo(t){const e=this.edges.find(s=>s.start===t||s.end===t);return P()&&E(e),e}}class Gs{constructor(t,e){k(this,"halfEdges");k(this,"edges");k(this,"vertices");this.logicalCoordinates=t,this.viewCoordinates=e,P()&&E(t),P()&&E(e)}}class Ws{constructor(t,e){k(this,"forwardHalf");k(this,"reversedHalf");k(this,"forwardFace");k(this,"reversedFace");k(this,"vertices");k(this,"faces");this.start=t,this.end=e,P()&&E(t),P()&&E(e)}getOtherVertex(t){return P()&&E(t===this.start||t===this.end,"vertex must be one of the two vertices of this edge"),t===this.start?this.end:this.start}getOtherFace(t){return P()&&E(t===this.forwardFace||t===this.reversedFace,"face must be one of the two faces of this edge"),t===this.forwardFace?this.reversedFace:this.forwardFace}}class Qs{constructor(t,e,s){k(this,"edge");k(this,"reversed");k(this,"next");k(this,"previous");k(this,"face",null);this.start=t,this.end=e,this.isReversed=s,P()&&E(t),P()&&E(e)}}const qe=c=>{let t=0;for(let e=0;e<c.length;e++){const s=c[e],n=c[(e+1)%c.length];t+=(n.x+s.x)*(n.y-s.y)}return .5*t},Us=c=>Math.abs(qe(c)),m1=c=>{const t=qe(c);if(t===0)return c.reduce((n,i)=>n.plus(i),new o(0,0)).timesScalar(1/c.length);let e=0,s=0;for(let n=0;n<c.length;n++){const i=c[n],r=c[(n+1)%c.length],a=i.x*(2*i.y+r.y)+r.x*(i.y+2*r.y);e+=(i.x-r.x)*a,s+=(r.y-i.y)*a}return new o(e,s).timesScalar(1/(6*t))},ZL=(c,t)=>{let e=0;for(let s=0;s<c.length;s++){const n=c[s],i=c[(s+1)%c.length],r=t[s],a=t[(s+1)%c.length];e+=(i.x+n.x)*(a.y-r.y)+(a.x-r.x)*(i.y-n.y)}return .5*e},w1=(c,t)=>{const e=c.faces.map(r=>Us(r.vertices.map(a=>a.viewCoordinates))),s=t(e),n=c.vertices.map(r=>({logicalCoordinates:r.logicalCoordinates,viewCoordinates:r.viewCoordinates.timesScalar(s)})),i=new Map(n.map((r,a)=>[c.vertices[a],r]));return{vertices:n,faces:c.faces.map(r=>({logicalCoordinates:r.logicalCoordinates,vertices:r.vertices.map(a=>i.get(a))}))}},Js=(c,t)=>w1(c,e=>Math.sqrt(t/(it.sum(e)/e.length))),js=(c,t)=>w1(c,e=>Math.sqrt(t/Math.min(...e)));class Ks{constructor(t,e){this.start=t,this.end=e}isCanonicalHalfEdge(){return this.start.x<this.end.x||this.start.x===this.end.x&&this.start.y<this.end.y}}class tn{constructor(){k(this,"identifiers",[]);k(this,"canonicalIdentifiers",[]);k(this,"map",new Map)}add(t,e){if(P()&&E(t.x!==e.x||t.y!==e.y),this.lookupAttempt(t,e)!==null)return;const s=(n,i)=>{let r;this.map.has(n)?r=this.map.get(n):(r=new Map,this.map.set(n,r));const a=new Ks(n,i);r.set(i,a),this.identifiers.push(a),a.isCanonicalHalfEdge()&&this.canonicalIdentifiers.push(a)};s(t,e),s(e,t)}getAdjacentLocations(t){const e=this.map.get(t);return e?Array.from(e.keys()):[]}lookupAttempt(t,e){const s=this.map.get(t);return s?s.get(e)??null:null}lookup(t,e){const s=this.lookupAttempt(t,e);return P()&&E(s),s}lookupCanonical(t,e){const s=this.lookup(t,e);return s.isCanonicalHalfEdge()?s:this.lookup(e,t)}}const We=c=>{const t=c.vertices;let e=c.faces;e=e.map(w=>qe(w.vertices.map(q=>q.viewCoordinates))>0?w:{logicalCoordinates:w.logicalCoordinates,vertices:w.vertices.slice().reverse()});const s=new tn;e.forEach(w=>{for(let q=0;q<w.vertices.length;q++){const S=w.vertices[q].logicalCoordinates,T=w.vertices[(q+1)%w.vertices.length].logicalCoordinates;s.add(S,T)}});const n=new Map,i=new Map,r=new Map,a=new Map,l=w=>n.get(w)??null,h=w=>i.get(w)??null,M=(w,q)=>{const S=s.lookup(w,q);return a.get(S)??null},Z=t.map(w=>new Ys(w.logicalCoordinates,w.viewCoordinates));Z.forEach(w=>n.set(w.logicalCoordinates,w));const g=e.map(w=>new Gs(w.logicalCoordinates,m1(w.vertices.map(q=>q.viewCoordinates))));g.forEach(w=>i.set(w.logicalCoordinates,w));const p=s.canonicalIdentifiers.map(w=>new Ws(l(w.start),l(w.end)));p.forEach(w=>r.set(s.lookupCanonical(w.start.logicalCoordinates,w.end.logicalCoordinates),w));const m=s.identifiers.map(w=>new Qs(l(w.start),l(w.end),!w.isCanonicalHalfEdge()));m.forEach(w=>a.set(s.lookup(w.start.logicalCoordinates,w.end.logicalCoordinates),w)),p.forEach(w=>{const q=M(w.start.logicalCoordinates,w.end.logicalCoordinates),S=M(w.end.logicalCoordinates,w.start.logicalCoordinates);P()&&E(q),P()&&E(S),q.edge=w,S.edge=w,q.reversed=S,S.reversed=q,w.forwardHalf=q,w.reversedHalf=S,w.vertices=[w.start,w.end]}),e.forEach(w=>{const q=h(w.logicalCoordinates),S=w.vertices.map(V=>l(V.logicalCoordinates)),T=[],F=[];for(let V=0;V<S.length;V++){const O=w.vertices[V].logicalCoordinates,R=w.vertices[(V+1)%S.length].logicalCoordinates,H=w.vertices[(V+2)%S.length].logicalCoordinates,C=M(O,R);C.face=q;const tt=M(R,H);C.next=tt,tt.previous=C,F.push(C),T.push(C.edge)}q.halfEdges=F,q.edges=T,q.vertices=S}),m.forEach(w=>{w.face===void 0&&(w.face=null)}),p.forEach(w=>{w.forwardFace=w.forwardHalf.face,w.reversedFace=w.reversedHalf.face,w.faces=[w.forwardFace,w.reversedFace].filter(q=>q!==null)});const A=new Set(m.filter(w=>w.face===null)),x=[],b=[];for(;A.size;){const w=A.values().next().value;A.delete(w);const q=F=>{P()&&E(F.face===null);const V=F.end.logicalCoordinates,H=s.getAdjacentLocations(V).filter(C=>C!==F.start.logicalCoordinates).map(C=>M(V,C)).filter(C=>C.face===null);return P()&&E(H.length===1),H[0]},S=[w];let T=q(w);for(w.next=T,T.previous=w;T!==w;){S.push(T),A.delete(T);const F=T;T=q(T),F.next=T,T.previous=F}qe(S.map(F=>F.start.viewCoordinates))<0?x.push(S):b.push(S)}return P()&&E(x.length===1),Z.forEach(w=>{const q=s.getAdjacentLocations(w.logicalCoordinates),S=M(q[0],w.logicalCoordinates);let T=S;const F=[S];for(;T.reversed.previous!==S;)P()&&E(T.reversed.previous),T=T.reversed.previous,F.push(T);w.incomingHalfEdges=F,w.outgoingHalfEdges=F.map(V=>V.reversed),w.edges=F.map(V=>V.edge),w.faces=F.map(V=>V.face).filter(V=>V!==null)}),{edges:p,vertices:Z,faces:g,halfEdges:m,outerBoundary:x[0],innerBoundaries:b}};class oe{constructor(t,e,s,n,i,r,a){k(this,"isAutomorphism");k(this,"isIdentityAutomorphism");k(this,"vertexInverseMap");k(this,"edgeInverseMap");k(this,"sectorInverseMap");k(this,"faceInverseMap");this.sourcePatternBoard=t,this.targetPatternBoard=e,this.vertexMap=s,this.nonExitEdgeMap=n,this.exitEdgeMap=i,this.sectorMap=r,this.faceMap=a,this.isAutomorphism=t===e,this.isAutomorphism&&(this.vertexInverseMap=new Map(Array.from(s).map(([l,h])=>[h,l])),this.sectorInverseMap=new Map(Array.from(r).map(([l,h])=>[h,l])),this.faceInverseMap=new Map(Array.from(a).map(([l,h])=>[h,l])),this.edgeInverseMap=new Map([...Array.from(n).map(([l,h])=>[h,l]),...Array.from(i).map(([l,h])=>(P()&&E(h.length===1),[h[0],l]))])),this.isIdentityAutomorphism=this.computeIsIdentityAutomorphism()}static fromMaps(t,e,s,n,i,r,a){return new oe(t,e,s,n,i,r,a)}getVertexMap(){return this.vertexMap}getNonExitEdgeMap(){return this.nonExitEdgeMap}getExitEdgeMap(){return this.exitEdgeMap}getSectorMap(){return this.sectorMap}getFaceMap(){return this.faceMap}mapVertex(t){const e=this.vertexMap.get(t);return P()&&E(e),e}mapNonExitEdge(t){const e=this.nonExitEdgeMap.get(t);return P()&&E(e),e}mapExitEdges(t){const e=this.exitEdgeMap.get(t);return P()&&E(e),e}mapSector(t){const e=this.sectorMap.get(t);return P()&&E(e),e}mapFace(t){const e=this.faceMap.get(t);return P()&&E(e),e}inverseMapVertex(t){const e=this.vertexInverseMap.get(t);return P()&&E(e),e}inverseMapEdge(t){const e=this.edgeInverseMap.get(t);return P()&&E(e),e}inverseMapSector(t){const e=this.sectorInverseMap.get(t);return P()&&E(e),e}inverseMapFace(t){const e=this.faceInverseMap.get(t);return P()&&E(e),e}equals(t){return this.vertexMap.size===t.vertexMap.size&&this.nonExitEdgeMap.size===t.nonExitEdgeMap.size&&this.exitEdgeMap.size===t.exitEdgeMap.size&&this.sectorMap.size===t.sectorMap.size&&this.faceMap.size===t.faceMap.size&&Array.from(this.vertexMap).every(([e,s])=>t.vertexMap.get(e)===s)&&Array.from(this.nonExitEdgeMap).every(([e,s])=>t.nonExitEdgeMap.get(e)===s)&&Array.from(this.exitEdgeMap).every(([e,s])=>t.exitEdgeMap.get(e)===s)&&Array.from(this.sectorMap).every(([e,s])=>t.sectorMap.get(e)===s)&&Array.from(this.faceMap).every(([e,s])=>t.faceMap.get(e)===s)}toString(){return`Embedding(
  vertexMap: ${[...this.vertexMap].map(t=>`${t[0].index} ${t[0].isExit?"->":"=>"} ${t[1].index}`).join(", ")}
  nonExitEdgeMap: ${[...this.nonExitEdgeMap].map(t=>`${t[0].index} => ${t[1].index}`).join(", ")}
  exitEdgeMap: ${[...this.exitEdgeMap].map(t=>`${t[0].index} => [${t[1].map(e=>e.index).join(", ")}]`).join(", ")}
  sectorMap: ${[...this.sectorMap].map(t=>`${t[0].index} => ${t[1].index}`).join(", ")}
  faceMap: ${[...this.faceMap].map(t=>`${t[0].index} ${t[0].isExit?"->":"=>"} ${t[1].index}`).join(", ")}
)`}computeIsIdentityAutomorphism(){if(this.sourcePatternBoard!==this.targetPatternBoard)return!1;for(const t of this.vertexMap.keys())if(this.vertexMap.get(t)!==t)return!1;for(const t of this.nonExitEdgeMap.keys())if(this.nonExitEdgeMap.get(t)!==t)return!1;for(const t of this.exitEdgeMap.keys())if(this.exitEdgeMap.get(t).length!==1||this.exitEdgeMap.get(t)[0]!==t)return!1;for(const t of this.sectorMap.keys())if(this.sectorMap.get(t)!==t)return!1;for(const t of this.faceMap.keys())if(this.faceMap.get(t)!==t)return!1;return!0}serialize(){return{vertexMapping:this.sourcePatternBoard.vertices.map(t=>(P()&&E(this.vertexMap.has(t)),this.vertexMap.get(t).index)),edgeMapping:this.sourcePatternBoard.edges.map(t=>t.isExit?(P()&&E(this.exitEdgeMap.has(t)),this.exitEdgeMap.get(t).map(e=>e.index)):(P()&&E(this.nonExitEdgeMap.has(t)),this.nonExitEdgeMap.get(t).index)),sectorMapping:this.sourcePatternBoard.sectors.map(t=>(P()&&E(this.sectorMap.has(t)),this.sectorMap.get(t).index)),faceMapping:this.sourcePatternBoard.faces.map(t=>(P()&&E(this.faceMap.has(t)),this.faceMap.get(t).index))}}static deserialize(t,e,s){return new oe(t,e,new Map(t.vertices.map(n=>[n,e.vertices[s.vertexMapping[n.index]]])),new Map(t.edges.filter(n=>!n.isExit).map(n=>[n,e.edges[s.edgeMapping[n.index]]])),new Map(t.edges.filter(n=>n.isExit).map(n=>[n,s.edgeMapping[n.index].map(i=>e.edges[i])])),new Map(t.sectors.map(n=>[n,e.sectors[s.sectorMapping[n.index]]])),new Map(t.faces.map(n=>[n,e.faces[s.faceMapping[n.index]]])))}}const en=(c,t,e=!1)=>{if(c.faces.filter(i=>!i.isExit).length>t.faces.filter(i=>!i.isExit).length||c.sectors.length>t.sectors.length||c.edges.filter(i=>!i.isExit).length>t.edges.filter(i=>!i.isExit).length||c.vertices.length>t.vertices.length)return[];const s=[],n=c.faces.filter(i=>!i.isExit);if(n.length){const i=n[0],r=[i],a=[],l=[],h=new Set(n.slice(1)),M=new Set(i.edges),Z=new Set(i.vertices);for(;h.size;){const p=it.maxBy([...h],m=>{let A=0;for(const x of m.edges)M.has(x)&&(A+=5);for(const x of m.vertices)Z.has(x)&&(A+=1);return A});P()&&E(p),r.push(p),a.push(it.findIndex(p.edges,m=>M.has(m))),l.push(it.findIndex(p.vertices,m=>Z.has(m))),h.delete(p);for(const m of p.edges)M.add(m);for(const m of p.vertices)Z.add(m)}const g=(p,m,A)=>{if(p.edges.length!==m.edges.length)return!1;for(let x=0;x<p.edges.length;x++){const b=p.edges[x],w=m.edges[A.mapEdgeIndex(x)];P()&&E(b.faces.includes(p)),P()&&E(w.faces.includes(m));const q=b.faces[0]===p?b.faces[1]:b.faces[0];if(!q.isExit){const S=w.faces[0]===m?w.faces[1]:w.faces[0];if(S.isExit||q.edges.length!==S.edges.length)return!1}}return!0};for(const p of t.faces)if(!p.isExit&&p.edges.length===i.edges.length)for(const m of le.allForOrder(p.edges.length)){if(!g(i,p,m))continue;const A=new Map,x=new Map,b=new Map,w=new Map,q=new Map;A.set(i,m),x.set(i,p),b.set(p,i);for(let T=0;T<i.vertices.length;T++){const F=i.vertices[T],V=p.vertices[m.mapVertexIndex(T)];w.set(F,V),q.set(V,F)}const S=(T,F,V,O,R,H)=>{if(P()&&E(R.size===H.size),T===r.length){P()&&E(R.size===c.vertices.length);const C=new Map,tt=new Set;for(const[D,J]of V){const X=F.get(D);for(let st=0;st<D.edges.length;st++){const j=D.edges[st],G=J.edges[X.mapEdgeIndex(st)];P()&&C.has(j)&&E(C.get(j)===G),C.set(j,G),tt.add(G)}}P()&&E(C.size===c.edges.filter(D=>!D.isExit).length);const mt=new Map;for(const D of c.edges.filter(J=>J.isExit)){const J=D.exitVertex;P()&&E(J);const X=R.get(J);P()&&E(X),mt.set(D,X.edges.filter(st=>!tt.has(st)))}for(const D of c.faces.filter(J=>J.isExit)){const J=D.edges[0];P()&&E(J&&D.edges.length===1);const X=C.get(J),st=J.faces[0]===D?J.faces[1]:J.faces[0],j=V.get(st),G=X.faces[0]===j?X.faces[1]:X.faces[0];P()&&E(G),V.set(D,G)}const W=new Map;for(const D of c.sectors){const J=D.face,X=V.get(J);P()&&E(X);const st=D.edges[0],j=D.edges[1],G=C.get(st),Q=C.get(j);P()&&E(G&&Q);const ot=X.sectors.find(z=>z.edges.includes(G)&&z.edges.includes(Q));P()&&E(ot),W.set(D,ot)}if(s.push(oe.fromMaps(c,t,R,C,mt,W,V)),e)return}else{const C=r[T],tt=a[T-1],mt=l[T-1];if(tt>=0){const W=C.edges[tt],D=W.vertices[0],J=W.vertices[1],X=R.get(D),st=R.get(J),j=W.faces[0]===C?W.faces[1]:W.faces[0],G=V.get(j);P()&&E(G);const Q=G.edges.find(Nt=>Nt.vertices.includes(X)&&Nt.vertices.includes(st));P()&&E(Q);const ot=Q.faces[0]===G?Q.faces[1]:Q.faces[0];if(ot.isExit||O.has(ot))return;const z=C.vertices.indexOf(D),lt=C.vertices.indexOf(J),at=ot.vertices.indexOf(X),Mt=ot.vertices.indexOf(st),wt=(z+1)%C.vertices.length===lt,At=(at+1)%ot.vertices.length===Mt,gt=wt===At?1:-1,qt=(at-z*gt+C.vertices.length)%C.vertices.length,N=new le(C.vertices.length,qt,gt);if(P()&&E(N.mapVertexIndex(z)===at),P()&&E(N.mapVertexIndex(lt)===Mt),!g(C,ot,N)||(V.set(C,ot),O.set(ot,C),V.size!==O.size))return;for(let Nt=0;Nt<C.vertices.length;Nt++){const Ft=C.vertices[Nt],Pt=ot.vertices[N.mapVertexIndex(Nt)];if(R.has(Ft)){if(R.get(Ft)!==Pt)return}else R.set(Ft,Pt);if(H.has(Pt)){if(H.get(Pt)!==Ft)return}else H.set(Pt,Ft);P()&&E(R.size===H.size)}if(F.set(C,N),S(T+1,F,V,O,R,H),e&&s.length)return}else{P()&&E(mt>=0,"If this is not satisfied, we have disconnected components OR orderedFaces order is bad");const W=C.vertices[mt],D=R.get(W),J=D.faces.filter(X=>!X.isExit&&!O.has(X));for(const X of J){const st=C.vertices.indexOf(W),j=X.vertices.indexOf(D);P()&&E(st>=0),P()&&E(j>=0);for(const G of[1,-1]){const Q=(j-st*G+C.vertices.length)%C.vertices.length,ot=new le(C.vertices.length,Q,G);if(!g(C,X,ot))continue;let z=!0;const lt=new Map(R),at=new Map(H);for(let gt=0;gt<C.vertices.length;gt++){const qt=C.vertices[gt],N=X.vertices[ot.mapVertexIndex(gt)];if(lt.has(qt)){if(lt.get(qt)!==N){z=!1;break}}else lt.set(qt,N);if(at.has(N)){if(at.get(N)!==qt){z=!1;break}}else at.set(N,qt);P()&&E(lt.size===at.size)}if(!z)continue;const Mt=new Map(V),wt=new Map(O);if(Mt.set(C,X),wt.set(X,C),Mt.size!==wt.size)continue;const At=new Map(F);if(At.set(C,ot),S(T+1,At,Mt,wt,lt,at),e&&s.length)return}}}}};if(S(1,A,x,b,w,q),e&&s.length)return s}}else if(c.vertices.length===1){const i=c.vertices[0];P()&&E(i.edges.length===c.edges.length);const r=i.edges.filter(M=>!M.isExit),a=i.edges.filter(M=>!M.isExit).length,l=i.isExit,h=it.range(0,a).map(M=>{const Z=r[M],g=r.slice(0,M+1);return i.sectors.filter(p=>p.edges.includes(Z)&&p.edges.every(m=>g.includes(m)))});if(P()&&E(h.flat().length===i.sectors.length),P()&&!i.isExit){E(i.sectors.length===a);for(let M=0;M<a;M++){const Z=i.edges[M],g=i.edges[(M+1)%a],p=i.sectors[M],m=i.faces[M];E(p.edges.includes(Z)),E(p.edges.includes(g)),E(p.face===m)}}for(const M of t.vertices){if(l){if(M.edges.length<a||M.sectors.length<i.sectors.length)continue}else{if(M.isExit||M.edges.length!==a)continue;P()&&E(M.sectors.length===a)}const Z=new Map([[i,M]]),g=(p,m,A,x)=>{if(p===a){P()&&E(m.size===r.length),P()&&E(A.size===c.sectors.length);const b=l?new Map([[i.exitEdge,M.edges.filter(q=>!x.has(q))]]):new Map,w=new Map([...A.keys()].map(q=>[q.face,A.get(q).face]));if(i.sectors.length===0)for(const[q,S]of m){const T=q.faces[0],F=q.faces[1];P()&&E(T.isExit&&F.isExit),w.set(T,S.faces[0]),w.set(F,S.faces[1])}else if(l){for(const q of c.faces.filter(S=>S.isExit))if(q.edges.length===1){const S=q.edges[0];P()&&E(S&&q.edges.length===1);const T=m.get(S);P()&&E(T);const F=S.faces[0]===q?S.faces[1]:S.faces[0],V=w.get(F);P()&&E(V);const O=T.faces[0]===V?T.faces[1]:T.faces[0];P()&&E(O),w.set(q,O)}}else for(const q of c.sectors){const S=q.face,F=A.get(q).face;w.set(S,F)}if(s.push(oe.fromMaps(c,t,Z,m,b,A,w)),e)return}else{const b=r[p],w=h[p];for(const q of M.edges){if(q.isExit||x.has(q))continue;const S=[];let T=!0;for(const F of w){const V=F.edges[0],O=F.edges[1],R=V===b?q:m.get(V),H=O===b?q:m.get(O);P()&&E(R&&H);const C=M.sectors.find(tt=>tt.edges.includes(R)&&tt.edges.includes(H)&&(a>2||!S.includes(tt)))??null;if(C)S.push(C);else{T=!1;break}}if(T){const F=new Map(m);F.set(b,q);const V=new Map(A);for(let R=0;R<w.length;R++)V.set(w[R],S[R]);const O=new Set(x);O.add(q),g(p+1,F,V,O)}}}};g(0,new Map,new Map,new Set)}}else if(c.vertices.length===0&&c.edges.length===1){const i=c.edges[0];for(const r of t.edges.filter(a=>!a.isExit))if(s.push(oe.fromMaps(c,t,new Map,new Map([[i,r]]),new Map,new Map,new Map([[i.faces[0],r.faces[0]],[i.faces[1],r.faces[1]]]))),e)return s}else throw new Error("pattern search not implemented generally yet");return P()&&c===t&&E(s.filter(i=>i.isIdentityAutomorphism).length===1),s};class le{constructor(t,e,s){this.edgeCount=t,this.offset=e,this.direction=s,P()&&E(s===1||s===-1)}mapVertexIndex(t){return(this.offset+t*this.direction+this.edgeCount)%this.edgeCount}mapEdgeIndex(t){return this.direction===1?(this.offset+t)%this.edgeCount:(this.offset-t-1+2*this.edgeCount)%this.edgeCount}toString(){return`FaceMapping( edgeCount=${this.edgeCount}, offset=${this.offset}, direction=${this.direction} )`}toDetailedString(t,e){return`FaceMapping( vertices: ${it.range(0,this.edgeCount).map(s=>`${t.vertices[s].index} => ${e.vertices[this.mapVertexIndex(s)].index}`).join(", ")}, edges: ${it.range(0,this.edgeCount).map(s=>{const n=t.edges[s],i=e.edges[this.mapEdgeIndex(s)];return`#${n.index} (${n.vertices.map(r=>r.index).join(",")}) => #${i.index} (${i.vertices.map(r=>r.index).join(",")})`}).join(", ")} )`}static allForOrder(t){return[...it.range(0,t).map(e=>new le(t,e,1)),...it.range(0,t).map(e=>new le(t,e,-1))]}}const l1=new WeakMap,h1=(c,t)=>{P()&&E(c),P()&&E(t);let e=l1.get(c)??null;e||(e=new WeakMap,l1.set(c,e));let s=e.get(t)??null;return s||(s=en(c,t),e.set(t,s)),s},sn=(c,t)=>{if(c.numNonExitVertices!==t.numNonExitVertices||c.numExitVertices!==t.numExitVertices||c.type!==t.type)return!1;if(c.type==="faces"&&t.type==="faces"){if(c.vertexLists.length!==t.vertexLists.length)return!1;for(let e=0;e<c.vertexLists.length;e++){if(c.vertexLists[e].length!==t.vertexLists[e].length)return!1;for(let s=0;s<c.vertexLists[e].length;s++)if(c.vertexLists[e][s]!==t.vertexLists[e][s])return!1}}if(c.type==="non-exit-vertex"&&t.type==="non-exit-vertex"&&c.edgeCount!==t.edgeCount)return!1;if(c.type==="exit-vertex"&&t.type==="exit-vertex"){if(c.edgeCount!==t.edgeCount||c.spans.length!==t.spans.length)return!1;for(let e=0;e<c.spans.length;e++)if(c.spans[e]!==t.spans[e])return!1}return!0},nn=c=>{const t=[];t.push(c.numNonExitVertices),t.push(c.numExitVertices),t.push(c.type),c.type==="faces"?t.push(c.vertexLists):(c.type==="non-exit-vertex"||c.type==="exit-vertex")&&(t.push(c.edgeCount),c.type==="exit-vertex"&&t.push(c.spans));const e=JSON.stringify(t);return P()&&E(sn(_1(e),c)),e},_1=c=>{const t=JSON.parse(c),e=t.shift(),s=t.shift(),n=t.shift();return n==="faces"?{numNonExitVertices:e,numExitVertices:s,type:n,vertexLists:t.shift()}:n==="non-exit-vertex"?{numNonExitVertices:e,numExitVertices:s,type:n,edgeCount:t.shift()}:n==="exit-vertex"?{numNonExitVertices:e,numExitVertices:s,type:n,edgeCount:t.shift(),spans:t.shift()}:{numNonExitVertices:e,numExitVertices:s,type:n}};class c1{constructor(t,e){k(this,"exitEdge",null);k(this,"edges",[]);k(this,"sectors",[]);k(this,"faces",[]);this.index=t,this.isExit=e}}class Le{constructor(t,e,s=null){k(this,"vertices");k(this,"sectors",[]);k(this,"faces",[]);this.index=t,this.isExit=e,this.exitVertex=s,this.vertices=s?[s]:[]}}class Re{constructor(t,e,s){k(this,"face");this.index=t,this.vertex=e,this.edges=s}}class Ot{constructor(t,e,s,n,i){this.index=t,this.isExit=e,this.vertices=s,this.edges=n,this.sectors=i}}class xt{constructor(t,e){k(this,"name");k(this,"vertices");k(this,"edges");k(this,"sectors");k(this,"faces");this.descriptor=t;const s=[...it.range(0,t.numNonExitVertices).map(a=>new c1(a,!1)),...it.range(0,t.numExitVertices).map(a=>new c1(a+t.numNonExitVertices,!0))];let n=[],i=[],r=[];if(t.type==="faces"){for(const a of t.vertexLists){const l=a.map(g=>s[g]),h=l.map((g,p)=>{const m=l[(p+1)%l.length],A=g.edges.find(x=>x.vertices.includes(m));if(A)return A;{const x=new Le(n.length,!1),b=g.index<m.index?g:m,w=g.index<m.index?m:g;return x.vertices.push(b),x.vertices.push(w),n.push(x),g.edges.push(x),m.edges.push(x),x}}),M=h.map((g,p)=>{const m=h[(p+1)%h.length],A=g.vertices.find(b=>m.vertices.includes(b));P()&&E(A);const x=new Re(i.length,A,[g,m]);return i.push(x),g.sectors.push(x),m.sectors.push(x),A.sectors.push(x),x}),Z=new Ot(r.length,!1,l,h,M);r.push(Z),l.forEach(g=>{g.faces.push(Z)}),M.forEach(g=>{g.face=Z}),h.forEach(g=>{g.faces.push(Z)})}n.forEach(a=>{if(a.faces.length<2){P()&&E(a.faces.length===1);const l=new Ot(r.length,!0,a.vertices,[a],[]);r.push(l),a.faces.push(l),a.vertices.forEach(h=>{h.faces.push(l)})}}),s.forEach(a=>{if(a.isExit){const l=new Le(n.length,!0,a);n.push(l),a.edges.push(l),a.exitEdge=l}})}else if(t.type==="edge"){P()&&E(s.length===0);const a=new Le(0,!1,null);n.push(a);const l=new Ot(0,!0,[],[a],[]);r.push(l);const h=new Ot(1,!0,[],[a],[]);r.push(h),a.faces.push(l),a.faces.push(h)}else if(t.type==="non-exit-vertex"){P()&&E(s.length===1&&!s[0].isExit);const a=s[0];n.push(...it.range(0,t.edgeCount).map(l=>{const h=new Le(l,!1);return a.edges.push(h),h.vertices.push(a),h})),i.push(...it.range(0,t.edgeCount).map(l=>{const h=new Re(l,a,[n[l],n[(l+1)%t.edgeCount]]);return h.edges.forEach(M=>{M.sectors.push(h)}),a.sectors.push(h),h})),r.push(...it.range(0,t.edgeCount).map(l=>{const h=i[l],M=new Ot(l,!0,[a],[n[l],n[(l+1)%t.edgeCount]],[h]);return a.faces.push(M),M.edges.forEach(Z=>{Z.faces.push(M)}),h.face=M,M}))}else if(t.type==="exit-vertex"){P()&&E(s.length===1&&s[0].isExit);const a=s[0];n.push(...it.range(0,t.edgeCount).map(h=>{const M=new Le(h,!1);return a.edges.push(M),M.vertices.push(a),M}));const l=new Le(n.length,!0,a);if(n.push(l),a.edges.push(l),a.exitEdge=l,t.spans.length){const h=[];let M=0;t.spans.forEach((Z,g)=>{const p=M,m=p+Z;M=m+1,h.push(it.range(p,m+1).map(A=>n[A]))}),P()&&E(M===t.edgeCount),h.forEach(Z=>{for(let g=0;g<Z.length-1;g++){const p=Z[g],m=Z[g+1],A=new Re(i.length,a,[p,m]);i.push(A),p.sectors.push(A),m.sectors.push(A),a.sectors.push(A);const x=new Ot(r.length,!0,[a],[p,m],[A]);r.push(x),a.faces.push(x),p.faces.push(x),m.faces.push(x),A.face=x}}),h.forEach(Z=>{const g=Z[0],p=Z[Z.length-1],m=new Ot(r.length,!0,[a],[g],[]);r.push(m),g.faces.push(m),a.faces.push(m);const A=new Ot(r.length,!0,[a],[p],[]);r.push(A),p.faces.push(A),a.faces.push(A)})}else{P()&&E(t.edgeCount===2);const h=n[0],M=n[1],Z=new Ot(r.length,!0,[a],[h],[]);r.push(Z),h.faces.push(Z),a.faces.push(Z);const g=new Ot(r.length,!0,[a],[h],[]);r.push(g),h.faces.push(g),a.faces.push(g);const p=new Ot(r.length,!0,[a],[M],[]);r.push(p),M.faces.push(p),a.faces.push(p);const m=new Ot(r.length,!0,[a],[M],[]);r.push(m),M.faces.push(m),a.faces.push(m)}}else throw new Error(`Invalid descriptor: ${t}`);this.vertices=s,this.edges=n,this.sectors=i,this.faces=r,e&&(this.name=e)}serialize(){return nn(this.descriptor)}static deserialize(t){return new xt(_1(t))}}const Ln=new WeakMap,ie=.3,rn=c=>(P()&&E(c.vertices.length===0),P()&&E(c.sectors.length===0),P()&&E(c.faces.length===2),P()&&E(c.edges.length===1),{vertexMap:new Map,edgeMap:new Map([[c.edges[0],[new o(0,0),new o(1,0)]]]),sectorMap:new Map,faceMap:new Map([[c.faces[0],[new o(0,0),new o(1,0),new o(.5,ie)]],[c.faces[1],[new o(0,0),new o(.5,-ie),new o(1,0)]]])}),v1=c=>{P()&&E(c.vertices.length===1);const t=c.edges.filter(l=>!l.isExit),e=t.length,s=e===2&&c.sectors.length?3:e,n=new Map([[c.vertices[0],o.ZERO]]),i=new Map;c.edges.forEach((l,h)=>{i.set(l,[o.ZERO,o.createPolar(1,2*Math.PI*h/s)])});const r=new Map;c.sectors.forEach(l=>{const h=l.edges[0],M=l.edges[1];(h.index+1)%e!==M.index?r.set(l,[i.get(h)[1],o.ZERO,i.get(M)[1]]):r.set(l,[i.get(M)[1],o.ZERO,i.get(h)[1]])});const a=new Map;return e===2&&c.sectors.length===0?(t[0].faces.forEach((l,h)=>{a.set(l,h===0?[new o(0,0),new o(1,0),new o(.5,ie)]:[new o(0,0),new o(.5,-ie),new o(1,0)])}),t[1].faces.forEach((l,h)=>{a.set(l,h===0?[new o(0,0),new o(-.5,ie),new o(-1,0)]:[new o(0,0),new o(-1,0),new o(-.5,-ie)])})):(c.sectors.forEach((l,h)=>{const M=r.get(l).slice();h===1&&e===2&&(M[1]=M[0].plus(M[2]).negated()),a.set(l.face,M)}),c.faces.forEach(l=>{if(!a.has(l)){P()&&E(l.edges.length===1);const h=l.edges[0],M=i.get(h);P()&&E(h.sectors.length===1);const Z=h.sectors[0];{const g=M[1].perpendicular;let p=0;r.get(Z).forEach(A=>p+=A.dot(g));const m=M[1].timesScalar(.5);a.set(l,[M[1],o.ZERO,m.plus(g.times(-Math.sign(p)*.5*Math.sin(2*Math.PI/3/e)))])}}})),{vertexMap:n,edgeMap:i,sectorMap:r,faceMap:a}},gL=c=>{if(P()){const l=h=>{E(h.every(M=>M.index<h.length))};l([...c.vertexMap.keys()]),l([...c.edgeMap.keys()]),l([...c.sectorMap.keys()]),l([...c.faceMap.keys()])}const t=it.sortBy([...c.vertexMap.keys()],l=>l.index),e=it.sortBy([...c.edgeMap.keys()],l=>l.index),s=it.sortBy([...c.sectorMap.keys()],l=>l.index),n=it.sortBy([...c.faceMap.keys()],l=>l.index),i=l=>[l.x,l.y],r=l=>{for(let h=0;h<t.length;h++)if(c.vertexMap.get(t[h]).equals(l))return h;return i(l)},a=JSON.stringify([t.map(l=>i(c.vertexMap.get(l))),e.map(l=>c.edgeMap.get(l).map(r)),s.map(l=>c.sectorMap.get(l).map(i)),n.map(l=>c.faceMap.get(l).map(i))]);if(P()){const l=an(a,{vertices:t,edges:e,sectors:s,faces:n,descriptor:{}}),h=(M,Z)=>{if(M.length!==Z.length)return!1;for(let g=0;g<M.length;g++)if(!M[g].equals(Z[g]))return!1;return!0};t.forEach(M=>E(c.vertexMap.get(M).equals(l.vertexMap.get(M)))),e.forEach(M=>E(h(c.edgeMap.get(M),l.edgeMap.get(M)))),s.forEach(M=>E(h(c.sectorMap.get(M),l.sectorMap.get(M)))),n.forEach(M=>E(h(c.faceMap.get(M),l.faceMap.get(M))))}return a},an=(c,t)=>{const e=JSON.parse(c),s=e[0],n=e[1],i=e[2],r=e[3],a=new Map,l=new Map,h=new Map,M=new Map;s.forEach((g,p)=>{a.set(t.vertices[p],new o(g[0],g[1]))});const Z=g=>typeof g=="number"?a.get(t.vertices[g]):new o(g[0],g[1]);return n.forEach((g,p)=>{l.set(t.edges[p],[Z(g[0]),Z(g[1])])}),i.forEach((g,p)=>{h.set(t.sectors[p],[Z(g[0]),Z(g[1]),Z(g[2])])}),r.forEach((g,p)=>{M.set(t.faces[p],g.map(m=>new o(m[0],m[1])))}),{vertexMap:a,edgeMap:l,sectorMap:h,faceMap:M}},x1=(c,t)=>c.vertices.length!==t.vertices.length||c.edges.length!==t.edges.length||c.faces.length!==t.faces.length||c.sectors.length!==t.sectors.length||c.vertices.filter(e=>e.isExit).length!==t.vertices.filter(e=>e.isExit).length||c.edges.filter(e=>e.isExit).length!==t.edges.filter(e=>e.isExit).length||c.faces.filter(e=>e.isExit).length!==t.faces.filter(e=>e.isExit).length?!1:h1(c,t).length>0&&h1(t,c).length>0,on=(c,t)=>{if(c.forwardHalf.next.edge===t)return c.forwardHalf;if(c.reversedHalf.next.edge===t)return c.reversedHalf;if(t.forwardHalf.next.edge===c)return t.forwardHalf;if(t.reversedHalf.next.edge===c)return t.reversedHalf;throw new Error("Edges are not connected")};class Qe{constructor(t){k(this,"edges");k(this,"vertices");k(this,"faces");k(this,"halfEdges");k(this,"outerBoundary");k(this,"innerBoundaries");this.boardDescriptor=t,this.edges=t.edges,this.vertices=t.vertices,this.faces=t.faces,this.halfEdges=t.halfEdges,this.outerBoundary=t.outerBoundary,this.innerBoundaries=t.innerBoundaries}}const M1=(c,t)=>{const e=it.sortBy(c),s=[];let n=[];for(let r=0;r<e.length;r++){const a=e[r];n.length===0||Math.abs(n[n.length-1]-a)<=t?n.push(a):(s.push(n),n=[a])}n.length>0&&s.push(n);const i=new Map;return s.forEach(r=>{const a=it.sum(r)/r.length;r.forEach(l=>i.set(l,a))}),i};class A1 extends Qe{constructor(t,e){const s=t.flatMap(Z=>Z.map(g=>g.x)),n=t.flatMap(Z=>Z.map(g=>g.y)),i=M1(s,1e-4),r=M1(n,1e-4),a=[],l=new Map,h=Z=>{const g=i.get(Z.x),p=r.get(Z.y);P()&&E(g!==void 0&&p!==void 0);const m=`${g},${p}`;if(!l.has(m)){const A={logicalCoordinates:new o(0,l.size),viewCoordinates:new o(g,p).timesScalar(e)};l.set(m,A),a.push(A)}return l.get(m)},M=t.map((Z,g)=>({logicalCoordinates:new o(g,0),vertices:Z.map(h)}));super(We(js({vertices:a,faces:M},e))),this.polygons=t,this.scale=e}}const fL={name:"Square Tiling",basisA:new o(1,0),basisB:new o(0,1),polygons:[[new o(0,0),new o(0,1),new o(1,1),new o(1,0)]],translation:new o(1,1)},pL={name:"Hexagonal Tiling",basisA:new o(1,0),basisB:new o(.5,Math.sqrt(3)/2),polygons:[[new o(0,1/Math.sqrt(3)),new o(.5,Math.sqrt(3)/2),new o(1,1/Math.sqrt(3)),new o(1,0),new o(.5,-(1/(2*Math.sqrt(3)))),new o(0,0)]],translation:new o(3/2,Math.sqrt(3)/2)},ln={name:"Triangular",basisA:new o(1,0),basisB:new o(.5,Math.sqrt(3)/2),polygons:[[new o(0,0),new o(1,0),new o(.5,Math.sqrt(3)/2)],[new o(.5,Math.sqrt(3)/2),new o(3/2,Math.sqrt(3)/2),new o(1,0)]],translation:new o(3/2,Math.sqrt(3)/2)},hn={name:"Trihexagonal",basisA:new o(2,0),basisB:new o(1,Math.sqrt(3)),polygons:[[new o(1/2,Math.sqrt(3)/2),new o(1,0),new o(1/2,-(Math.sqrt(3)/2)),new o(-1/2,-(Math.sqrt(3)/2)),new o(-1,0),new o(-1/2,Math.sqrt(3)/2)],[new o(1/2,Math.sqrt(3)/2),new o(1,0),new o(3/2,Math.sqrt(3)/2)],[new o(1/2,-(Math.sqrt(3)/2)),new o(1,0),new o(3/2,-(Math.sqrt(3)/2))]],translation:new o(3,Math.sqrt(3))},cn={name:"Rhombitrihexagonal",basisA:new o(.5*(3+Math.sqrt(3)),.5*(1+Math.sqrt(3))),basisB:new o(.5*(3+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),polygons:[[new o(1/2,Math.sqrt(3)/2),new o(1,0),new o(1/2,-(Math.sqrt(3)/2)),new o(-1/2,-(Math.sqrt(3)/2)),new o(-1,0),new o(-1/2,Math.sqrt(3)/2)],[new o(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new o(1/2,-(Math.sqrt(3)/2)),new o(1,0),new o(1/2*(2+Math.sqrt(3)),-1/2)],[new o(1+Math.sqrt(3)/2,1/2),new o(1,0),new o(1+Math.sqrt(3)/2,-1/2)],[new o(1+Math.sqrt(3)/2,1/2),new o(1,0),new o(1/2,Math.sqrt(3)/2),new o(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3)))],[new o(1/2,1/2*(2+Math.sqrt(3))),new o(1/2,Math.sqrt(3)/2),new o(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3)))],[new o(1/2,1/2*(2+Math.sqrt(3))),new o(1/2,Math.sqrt(3)/2),new o(-1/2,Math.sqrt(3)/2),new o(-1/2,1/2*(2+Math.sqrt(3)))]],translation:new o(3+Math.sqrt(3),.5*(-1-Math.sqrt(3))+.5*(1+Math.sqrt(3)))},mL={name:"Truncated Square",basisA:new o(2+Math.sqrt(2),0),basisB:new o(.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2)),polygons:[[new o(.5,.5*(1+Math.sqrt(2))),new o(.5*(1+Math.sqrt(2)),.5),new o(.5*(1+Math.sqrt(2)),-.5),new o(.5,.5*(-1-Math.sqrt(2))),new o(-.5,.5*(-1-Math.sqrt(2))),new o(.5*(-1-Math.sqrt(2)),-.5),new o(.5*(-1-Math.sqrt(2)),.5),new o(-.5,.5*(1+Math.sqrt(2)))],[new o(.5*(1+Math.sqrt(2)),.5),new o(.5*(1+Math.sqrt(2)),-.5),new o(3/2+1/Math.sqrt(2),-.5),new o(3/2+1/Math.sqrt(2),.5)]],translation:new o(2+Math.sqrt(2)+.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2))},Mn={name:"Snub Square",basisA:new o(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),basisB:new o(1/2*(-1-Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),polygons:[[new o(1/2,0),new o(0,-(Math.sqrt(3)/2)),new o(-(1/2),0)],[new o(1/2,0),new o(0,Math.sqrt(3)/2),new o(-(1/2),0)],[new o(1/2*(1+Math.sqrt(3)),1/2),new o(1/2,0),new o(0,Math.sqrt(3)/2),new o(Math.sqrt(3)/2,1/2*(1+Math.sqrt(3)))],[new o(Math.sqrt(3)/2,1/2*(1+Math.sqrt(3))),new o(0,Math.sqrt(3)/2),new o(0,1/2*(2+Math.sqrt(3)))],[new o(-(Math.sqrt(3)/2),1/2*(1+Math.sqrt(3))),new o(0,Math.sqrt(3)/2),new o(0,1/2*(2+Math.sqrt(3)))],[new o(1/2*(-1-Math.sqrt(3)),1/2),new o(-(1/2),0),new o(0,Math.sqrt(3)/2),new o(-(Math.sqrt(3)/2),1/2*(1+Math.sqrt(3)))]],translation:new o(1/2*(-1-Math.sqrt(3))+1/2*(1+Math.sqrt(3)),-1-Math.sqrt(3))},wL={name:"Truncated Hexagonal",basisA:new o(2+Math.sqrt(3),0),basisB:new o(.5*(2+Math.sqrt(3)),3/2+Math.sqrt(3)),polygons:[[new o(1/2,1/2*(2+Math.sqrt(3))),new o(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new o(1/2*(2+Math.sqrt(3)),1/2),new o(1/2*(2+Math.sqrt(3)),-(1/2)),new o(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new o(1/2,1/2*(-2-Math.sqrt(3))),new o(-(1/2),1/2*(-2-Math.sqrt(3))),new o(1/2*(-1-Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new o(1/2*(-2-Math.sqrt(3)),-(1/2)),new o(1/2*(-2-Math.sqrt(3)),1/2),new o(1/2*(-1-Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new o(-(1/2),1/2*(2+Math.sqrt(3)))],[new o(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new o(1/2*(3+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new o(1/2*(2+Math.sqrt(3)),1/2)],[new o(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new o(1/2*(3+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new o(1/2*(2+Math.sqrt(3)),-(1/2))]],translation:new o(2+Math.sqrt(3)+.5*(2+Math.sqrt(3)),3/2+Math.sqrt(3))},un={name:"Elongated Triangular",basisA:new o(1,0),basisB:new o(.5,.5*(2+Math.sqrt(3))),polygons:[[new o(-(1/2),-(1/2)),new o(-(1/2),1/2),new o(1/2,1/2),new o(1/2,-(1/2))],[new o(1/2,1/2),new o(0,1/2*(1+Math.sqrt(3))),new o(-(1/2),1/2)],[new o(1/2,-(1/2)),new o(0,1/2*(-1-Math.sqrt(3))),new o(-(1/2),-(1/2))]],translation:new o(3/2,.5*(2+Math.sqrt(3)))},_L={name:"Great Rhombitrihexagonal",basisA:new o(3+Math.sqrt(3),0),basisB:new o(.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3))),polygons:[[new o(1/2,1/2*(2+Math.sqrt(3))),new o(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new o(1/2*(2+Math.sqrt(3)),1/2),new o(1/2*(2+Math.sqrt(3)),-(1/2)),new o(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new o(1/2,1/2*(-2-Math.sqrt(3))),new o(-(1/2),1/2*(-2-Math.sqrt(3))),new o(1/2*(-1-Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new o(1/2*(-2-Math.sqrt(3)),-(1/2)),new o(1/2*(-2-Math.sqrt(3)),1/2),new o(1/2*(-1-Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new o(-(1/2),1/2*(2+Math.sqrt(3)))],[new o(1,1+Math.sqrt(3)),new o(.5*(2+Math.sqrt(3)),.5*(1+2*Math.sqrt(3))),new o(.5*(1+Math.sqrt(3)),.5*(1+Math.sqrt(3))),new o(.5,.5*(2+Math.sqrt(3)))],[new o(.5*(1+Math.sqrt(3)),.5*(1+Math.sqrt(3))),new o(.5*(2+Math.sqrt(3)),.5),new o(1+.5*(2+Math.sqrt(3)),.5),new o(.5*(5+Math.sqrt(3)),.5*(1+Math.sqrt(3))),new o(.5*(4+Math.sqrt(3)),.5*(1+2*Math.sqrt(3))),new o(.5*(2+Math.sqrt(3)),.5*(1+2*Math.sqrt(3)))],[new o(1+.5*(2+Math.sqrt(3)),.5),new o(1+.5*(2+Math.sqrt(3)),-(1/2)),new o(.5*(2+Math.sqrt(3)),-(1/2)),new o(.5*(2+Math.sqrt(3)),.5)],[new o(.5*(1+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new o(.5*(2+Math.sqrt(3)),-(1/2)),new o(1+.5*(2+Math.sqrt(3)),-(1/2)),new o(.5*(5+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new o(.5*(4+Math.sqrt(3)),.5*(-1-2*Math.sqrt(3))),new o(.5*(2+Math.sqrt(3)),.5*(-1-2*Math.sqrt(3)))],[new o(.5*(2+Math.sqrt(3)),.5*(-1-2*Math.sqrt(3))),new o(1,-1-Math.sqrt(3)),new o(.5,.5*(-2-Math.sqrt(3))),new o(.5*(1+Math.sqrt(3)),.5*(-1-Math.sqrt(3)))]],translation:new o(3+Math.sqrt(3)+.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3)))},vL={name:"Snub Hexagonal",basisA:new o(5/2,-Math.sqrt(3)/2),basisB:new o(-1/2,3*Math.sqrt(3)/2),polygons:[[new o(1/2,Math.sqrt(3)/2),new o(1,0),new o(1/2,-(Math.sqrt(3)/2)),new o(-(1/2),-(Math.sqrt(3)/2)),new o(-1,0),new o(-(1/2),Math.sqrt(3)/2)],[new o(-1,0),new o(-3/2,-(Math.sqrt(3)/2)),new o(-2,0)],[new o(-(1/2),-(Math.sqrt(3)/2)),new o(-1,0),new o(-3/2,-(Math.sqrt(3)/2))],[new o(1/2,Math.sqrt(3)/2),new o(1,0),new o(3/2,Math.sqrt(3)/2)],[new o(1,0),new o(3/2,Math.sqrt(3)/2),new o(2,0)],[new o(-1,0),new o(-(1/2),Math.sqrt(3)/2),new o(-(3/2),Math.sqrt(3)/2)],[new o(1/2,-(Math.sqrt(3)/2)),new o(-(1/2),-(Math.sqrt(3)/2)),new o(0,-Math.sqrt(3))],[new o(1,0),new o(1/2,-(Math.sqrt(3)/2)),new o(3/2,-(Math.sqrt(3)/2))],[new o(-(1/2),Math.sqrt(3)/2),new o(1/2,Math.sqrt(3)/2),new o(0,Math.sqrt(3))]],translation:new o(2,Math.sqrt(3))},dn={name:"Rhombille",basisA:new o(2,0),basisB:new o(1,Math.sqrt(3)),polygons:[[new o(5,5/Math.sqrt(3)),new o(4,2*Math.sqrt(3)),new o(5,7/Math.sqrt(3)),new o(6,2*Math.sqrt(3))],[new o(5,5/Math.sqrt(3)),new o(6,2*Math.sqrt(3)),new o(6,4/Math.sqrt(3)),new o(5,Math.sqrt(3))],[new o(5,5/Math.sqrt(3)),new o(5,Math.sqrt(3)),new o(4,4/Math.sqrt(3)),new o(4,2*Math.sqrt(3))]],translation:new o(3,Math.sqrt(3))},Zn={name:"Deltoidal Trihexagonal",basisA:new o(.5*(3+Math.sqrt(3)),.5*(1+Math.sqrt(3))),basisB:new o(.5*(3+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),polygons:[[new o(1/3*(12+4*Math.sqrt(3)),0),new o(1/4*(15+5*Math.sqrt(3)),.25*(-1-Math.sqrt(3))),new o(3+Math.sqrt(3),0),new o(1/4*(15+5*Math.sqrt(3)),.25*(1+Math.sqrt(3)))],[new o(1/3*(12+4*Math.sqrt(3)),0),new o(1/4*(15+5*Math.sqrt(3)),.25*(1+Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),.5*(1+Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),0)],[new o(1/3*(12+4*Math.sqrt(3)),0),new o(.5*(9+3*Math.sqrt(3)),0),new o(.5*(9+3*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new o(1/4*(15+5*Math.sqrt(3)),.25*(-1-Math.sqrt(3)))],[new o(1/3*(15+5*Math.sqrt(3)),0),new o(.5*(9+3*Math.sqrt(3)),0),new o(.5*(9+3*Math.sqrt(3)),.5*(1+Math.sqrt(3))),new o(1/4*(21+7*Math.sqrt(3)),.25*(1+Math.sqrt(3)))],[new o(1/3*(15+5*Math.sqrt(3)),0),new o(1/4*(21+7*Math.sqrt(3)),.25*(1+Math.sqrt(3))),new o(6+2*Math.sqrt(3),0),new o(1/4*(21+7*Math.sqrt(3)),.25*(-1-Math.sqrt(3)))],[new o(1/3*(15+5*Math.sqrt(3)),0),new o(1/4*(21+7*Math.sqrt(3)),.25*(-1-Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),0)]],translation:new o(3+Math.sqrt(3),.5*(-1-Math.sqrt(3))+.5*(1+Math.sqrt(3)))},xL={name:"Tetrakis Square",basisA:new o(2+Math.sqrt(2),0),basisB:new o(.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2)),polygons:[[new o(4+2*Math.sqrt(2),.5*(2+Math.sqrt(2))),new o(4+2*Math.sqrt(2),2+Math.sqrt(2)),new o(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2)))],[new o(.5*(10+5*Math.sqrt(2)),2+Math.sqrt(2)),new o(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2))),new o(4+2*Math.sqrt(2),2+Math.sqrt(2))],[new o(.5*(10+5*Math.sqrt(2)),2+Math.sqrt(2)),new o(6+3*Math.sqrt(2),2+Math.sqrt(2)),new o(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2)))],[new o(6+3*Math.sqrt(2),2+Math.sqrt(2)),new o(6+3*Math.sqrt(2),.5*(2+Math.sqrt(2))),new o(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2)))]],translation:new o(2+Math.sqrt(2)+.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2))},gn={name:"Cairo Pentagonal",basisA:new o(.5*(1+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),basisB:new o(.5*(-1-Math.sqrt(3)),.5*(-1-Math.sqrt(3))),polygons:[[new o(0,1/6*(-6-5*Math.sqrt(3))),new o(.25*(-1-Math.sqrt(3)),.25*(-3-3*Math.sqrt(3))),new o(-1/(2*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new o(1/(2*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new o(.25*(1+Math.sqrt(3)),.25*(-3-3*Math.sqrt(3)))],[new o(0,1/6*(-6-5*Math.sqrt(3))),new o(.25*(1+Math.sqrt(3)),.25*(-3-3*Math.sqrt(3))),new o(1/6*(3+2*Math.sqrt(3)),-1-Math.sqrt(3)),new o(.25*(1+Math.sqrt(3)),.25*(-5-5*Math.sqrt(3))),new o(0,1/6*(-6-7*Math.sqrt(3)))],[new o(0,1/6*(-6-7*Math.sqrt(3))),new o(.25*(-1-Math.sqrt(3)),.25*(-5-5*Math.sqrt(3))),new o(1/6*(-3-2*Math.sqrt(3)),-1-Math.sqrt(3)),new o(.25*(-1-Math.sqrt(3)),.25*(-3-3*Math.sqrt(3))),new o(0,1/6*(-6-5*Math.sqrt(3)))],[new o(0,1/6*(-6-7*Math.sqrt(3))),new o(.25*(1+Math.sqrt(3)),.25*(-5-5*Math.sqrt(3))),new o(1/(2*Math.sqrt(3)),.5*(-3-3*Math.sqrt(3))),new o(-1/(2*Math.sqrt(3)),.5*(-3-3*Math.sqrt(3))),new o(.25*(-1-Math.sqrt(3)),.25*(-5-5*Math.sqrt(3)))]],translation:new o(.5*(-1-Math.sqrt(3))+.5*(1+Math.sqrt(3)),-1-Math.sqrt(3))},AL={name:"Triakis Triangular",basisA:new o(2+Math.sqrt(3),0),basisB:new o(.5*(2+Math.sqrt(3)),1.5+Math.sqrt(3)),polygons:[[new o(4+2*Math.sqrt(3),1/3*(6+4*Math.sqrt(3))),new o(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3))),new o(.5*(6+3*Math.sqrt(3)),.5*(3+2*Math.sqrt(3)))],[new o(4+2*Math.sqrt(3),1/3*(6+4*Math.sqrt(3))),new o(.5*(6+3*Math.sqrt(3)),.5*(3+2*Math.sqrt(3))),new o(4+2*Math.sqrt(3),3+2*Math.sqrt(3))],[new o(4+2*Math.sqrt(3),1/3*(6+4*Math.sqrt(3))),new o(4+2*Math.sqrt(3),3+2*Math.sqrt(3)),new o(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3)))],[new o(.5*(10+5*Math.sqrt(3)),1/6*(15+10*Math.sqrt(3))),new o(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3))),new o(4+2*Math.sqrt(3),3+2*Math.sqrt(3))],[new o(.5*(10+5*Math.sqrt(3)),1/6*(15+10*Math.sqrt(3))),new o(4+2*Math.sqrt(3),3+2*Math.sqrt(3)),new o(6+3*Math.sqrt(3),3+2*Math.sqrt(3))],[new o(.5*(10+5*Math.sqrt(3)),1/6*(15+10*Math.sqrt(3))),new o(6+3*Math.sqrt(3),3+2*Math.sqrt(3)),new o(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3)))]],translation:new o(2+Math.sqrt(3)+.5*(2+Math.sqrt(3)),1.5+Math.sqrt(3))},fn={name:"Prismatic Pentagonal",basisA:new o(1,0),basisB:new o(.5,.5*(2+Math.sqrt(3))),polygons:[[new o(2,1/6*(9+5*Math.sqrt(3))),new o(2.5,1/6*(9+4*Math.sqrt(3))),new o(2.5,.5*(2+Math.sqrt(3))),new o(1.5,.5*(2+Math.sqrt(3))),new o(1.5,1/6*(9+4*Math.sqrt(3)))],[new o(2.5,1/6*(9+4*Math.sqrt(3))),new o(2,1/6*(9+5*Math.sqrt(3))),new o(2,2+Math.sqrt(3)),new o(3,2+Math.sqrt(3)),new o(3,1/6*(9+5*Math.sqrt(3)))]],translation:new o(1.5,.5*(2+Math.sqrt(3)))},bL={name:"Bisected Hexagonal",basisA:new o(3+Math.sqrt(3),0),basisB:new o(.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3))),polygons:[[new o(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new o(6+2*Math.sqrt(3),2+2*Math.sqrt(3)),new o(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new o(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new o(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new o(6+2*Math.sqrt(3),1+Math.sqrt(3))],[new o(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new o(6+2*Math.sqrt(3),1+Math.sqrt(3)),new o(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new o(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new o(6+2*Math.sqrt(3),2+2*Math.sqrt(3))],[new o(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(6+2*Math.sqrt(3),2+2*Math.sqrt(3)),new o(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new o(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),.5*(5+5*Math.sqrt(3)))],[new o(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(.5*(9+3*Math.sqrt(3)),.5*(5+5*Math.sqrt(3))),new o(6+2*Math.sqrt(3),3+3*Math.sqrt(3))],[new o(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(6+2*Math.sqrt(3),3+3*Math.sqrt(3)),new o(6+2*Math.sqrt(3),2+2*Math.sqrt(3))],[new o(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(6+2*Math.sqrt(3),2+2*Math.sqrt(3)),new o(6+2*Math.sqrt(3),3+3*Math.sqrt(3))],[new o(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(6+2*Math.sqrt(3),3+3*Math.sqrt(3)),new o(.5*(15+5*Math.sqrt(3)),.5*(5+5*Math.sqrt(3)))],[new o(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(.5*(15+5*Math.sqrt(3)),.5*(5+5*Math.sqrt(3))),new o(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new o(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new o(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new o(6+2*Math.sqrt(3),2+2*Math.sqrt(3))]],translation:new o(3+Math.sqrt(3)+.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3)))},pn={name:"Floret Pentagonal",basisA:new o(2.5,-Math.sqrt(3)/2),basisB:new o(-.5,3*Math.sqrt(3)/2),polygons:[[new o(2,Math.sqrt(3)),new o(3,4/Math.sqrt(3)),new o(3.5,7/(2*Math.sqrt(3))),new o(3.5,5/(2*Math.sqrt(3))),new o(3,2/Math.sqrt(3))],[new o(2,Math.sqrt(3)),new o(3,2/Math.sqrt(3)),new o(3,1/Math.sqrt(3)),new o(2.5,1/(2*Math.sqrt(3))),new o(2,1/Math.sqrt(3))],[new o(2,Math.sqrt(3)),new o(2,1/Math.sqrt(3)),new o(1.5,1/(2*Math.sqrt(3))),new o(1,1/Math.sqrt(3)),new o(1,2/Math.sqrt(3))],[new o(2,Math.sqrt(3)),new o(1,2/Math.sqrt(3)),new o(.5,5/(2*Math.sqrt(3))),new o(.5,7/(2*Math.sqrt(3))),new o(1,4/Math.sqrt(3))],[new o(2,Math.sqrt(3)),new o(1,4/Math.sqrt(3)),new o(1,5/Math.sqrt(3)),new o(1.5,11/(2*Math.sqrt(3))),new o(2,5/Math.sqrt(3))],[new o(2,Math.sqrt(3)),new o(2,5/Math.sqrt(3)),new o(2.5,11/(2*Math.sqrt(3))),new o(3,5/Math.sqrt(3)),new o(3,4/Math.sqrt(3))]],translation:new o(2,Math.sqrt(3))},mn={name:"Portugal",basisA:new o(2,2),basisB:new o(-2,2),polygons:[[new o(0,0),new o(1,0),new o(2,1),new o(2,2),new o(1,2),new o(0,1)],[new o(2,2),new o(3,2),new o(4,1),new o(4,0),new o(3,0),new o(2,1)],[new o(1,0),new o(2,1),new o(3,0),new o(2,-1)]],translation:new o(0,4)},EL={name:"Trihex and Hex",basisA:new o(2,0),basisB:new o(1,Math.sqrt(3)),polygons:[[new o(-1,0),new o(-1,1/Math.sqrt(3)),new o(-.5,Math.sqrt(3)/2),new o(0,1/Math.sqrt(3)),new o(.5,Math.sqrt(3)/2),new o(1,1/Math.sqrt(3)),new o(1,0),new o(.5,-1/(2*Math.sqrt(3))),new o(.5,-Math.sqrt(3)/2),new o(0,-2/Math.sqrt(3)),new o(-.5,-Math.sqrt(3)/2),new o(-.5,-1/(2*Math.sqrt(3)))],[new o(-.5,5/(2*Math.sqrt(3))),new o(0,Math.sqrt(3)),new o(.5,5/(2*Math.sqrt(3))),new o(.5,Math.sqrt(3)/2),new o(0,1/Math.sqrt(3)),new o(-.5,Math.sqrt(3)/2)]],translation:new o(3,Math.sqrt(3))},qL={name:"Penrose6",thinShape:new Bt("M726,577 L759,475 L672,538 L640,640 Z M726,702 L640,640 L672,741 L759,804 Z M500,538 L414,475 L447,577 L533,640 Z M500,538 L533,437 L566,538 L533,640 Z M500,741 L533,640 L566,741 L533,842 Z M500,741 L533,640 L447,702 L414,804 Z M619,374 L726,374 L640,437 L533,437 Z M619,374 L726,374 L640,311 L533,311 Z M447,374 L360,311 L327,210 L414,272 Z M447,374 L340,374 L254,311 L360,311 Z M726,374 L759,272 L845,210 L812,311 Z M726,374 L832,374 L919,311 L812,311 Z M1005,374 L919,311 L952,413 L1038,475 Z M1005,374 L1038,272 L1071,374 L1038,475 Z M845,210 L759,147 L726,46 L812,108 Z M812,108 L919,108 L832,46 L726,46 Z M533,108 L639,108 L726,46 L619,46 Z M533,311 L566,210 L533,108 L500,210 Z M414,147 L447,46 L360,108 L327,210 Z M134,475 L167,374 L134,272 L101,374 Z M221,413 L254,311 L167,374 L134,475 Z M101,577 L134,475 L48,538 L15,640 Z M188,640 L221,538 L254,640 L221,741 Z M101,702 L15,640 L48,741 L134,804 Z M134,804 L101,905 L134,1007 L167,905 Z M221,866 L134,804 L167,905 L254,968 Z M414,1132 L327,1069 L360,1171 L447,1233 Z M447,905 L414,1007 L327,1069 L360,968 Z M447,905 L340,905 L254,968 L360,968 Z M414,804 L307,804 L221,741 L327,741 Z M533,968 L500,1069 L533,1171 L566,1069 Z M619,905 L726,905 L640,968 L533,968 Z M619,905 L726,905 L640,842 L533,842 Z M726,905 L812,968 L845,1069 L759,1007 Z M726,905 L832,905 L919,968 L812,968 Z M1038,804 L1071,702 L1157,639 L1124,741 Z M1038,804 L1145,804 L1231,741 L1124,741 Z M1005,905 L1038,804 L1071,905 L1038,1007 Z M1005,905 L1038,804 L952,866 L919,968 Z M1038,475 L1124,538 L1157,639 L1071,577 Z M1038,475 L1145,475 L1231,538 L1124,538 Z M919,640 L952,538 L985,640 L952,741 Z M845,538 L952,538 L865,475 L759,475 Z M845,741 L952,741 L865,804 L759,804 Z M845,1069 L812,1171 L726,1233 L759,1132 Z M812,1171 L919,1171 L832,1233 L726,1233 Z M533,1171 L640,1171 L726,1233 L619,1233 Z M414,475 L307,475 L221,538 L327,538 Z "),thickShape:new Bt("M533,640 L447,577 L360,640 L447,702 Z M533,640 L640,640 L672,741 L566,741 Z M533,640 L640,640 L672,538 L566,538 Z M500,538 L533,437 L447,374 L414,475 Z M500,741 L414,804 L447,905 L533,842 Z M533,437 L640,437 L672,538 L566,538 Z M619,374 L533,311 L447,374 L533,437 Z M726,374 L640,437 L672,538 L759,475 Z M726,374 L759,272 L672,210 L640,311 Z M726,374 L832,374 L865,475 L759,475 Z M812,311 L919,311 L952,210 L845,210 Z M759,272 L672,210 L759,147 L845,210 Z M832,374 L919,311 L952,413 L865,475 Z M1005,374 L1038,272 L952,210 L919,311 Z M1038,272 L1145,272 L1178,374 L1071,374 Z M845,210 L952,210 L919,108 L812,108 Z M672,210 L759,147 L726,46 L639,108 Z M566,210 L672,210 L639,108 L533,108 Z M533,311 L447,374 L414,272 L500,210 Z M533,311 L640,311 L672,210 L566,210 Z M500,210 L414,147 L327,210 L414,272 Z M500,210 L533,108 L447,46 L414,147 Z M360,311 L254,311 L221,210 L327,210 Z M254,311 L167,374 L134,272 L221,210 Z M188,640 L101,702 L134,804 L221,741 Z M188,640 L101,577 L15,640 L101,702 Z M188,640 L221,538 L134,475 L101,577 Z M254,968 L221,1069 L134,1007 L167,905 Z M360,968 L254,968 L221,1069 L327,1069 Z M414,804 L447,702 L360,640 L327,741 Z M414,804 L307,804 L340,905 L447,905 Z M533,842 L640,842 L672,741 L566,741 Z M533,968 L500,1069 L414,1007 L447,905 Z M533,968 L640,968 L672,1069 L566,1069 Z M307,804 L221,866 L254,968 L340,905 Z M307,804 L221,741 L134,804 L221,866 Z M566,1069 L672,1069 L640,1171 L533,1171 Z M619,905 L533,842 L447,905 L533,968 Z M500,1069 L414,1132 L447,1233 L533,1171 Z M500,1069 L414,1007 L327,1069 L414,1132 Z M672,1069 L640,1171 L726,1233 L759,1132 Z M726,905 L640,968 L672,1069 L759,1007 Z M726,905 L759,804 L672,741 L640,842 Z M726,905 L832,905 L865,804 L759,804 Z M759,1007 L845,1069 L759,1132 L672,1069 Z M812,968 L919,968 L952,1069 L845,1069 Z M832,905 L865,804 L952,866 L919,968 Z M952,741 L1038,804 L952,866 L865,804 Z M952,741 L985,640 L1071,702 L1038,804 Z M1038,804 L1145,804 L1178,905 L1071,905 Z M1124,741 L1231,741 L1264,639 L1157,639 Z M1005,905 L919,968 L952,1069 L1038,1007 Z M1124,538 L1231,538 L1264,639 L1157,639 Z M1038,475 L1145,475 L1178,374 L1071,374 Z M985,640 L1071,702 L1157,639 L1071,577 Z M952,538 L1038,475 L1071,577 L985,640 Z M952,538 L865,475 L952,413 L1038,475 Z M812,640 L726,702 L759,804 L845,741 Z M812,640 L726,577 L640,640 L726,702 Z M812,640 L845,538 L759,475 L726,577 Z M812,640 L919,640 L952,741 L845,741 Z M812,640 L919,640 L952,538 L845,538 Z M1038,1007 L1145,1007 L1178,905 L1071,905 Z M845,1069 L952,1069 L919,1171 L812,1171 Z M327,741 L221,741 L254,640 L360,640 Z M327,538 L221,538 L254,640 L360,640 Z M414,475 L327,538 L360,640 L447,577 Z M414,475 L307,475 L340,374 L447,374 Z M307,475 L221,413 L134,475 L221,538 Z M307,475 L340,374 L254,311 L221,413 Z ")},yL={name:"Penrose10",thinShape:new Bt("M691,602 L711,541 L659,579 L640,640 Z M691,677 L640,640 L659,700 L711,738 Z M556,579 L504,541 L524,602 L576,640 Z M556,579 L576,518 L595,579 L576,640 Z M556,700 L576,640 L595,700 L576,761 Z M556,700 L576,640 L524,677 L504,738 Z M627,480 L691,480 L640,518 L576,518 Z M627,480 L691,480 L640,443 L576,443 Z M524,480 L472,443 L452,382 L504,419 Z M524,480 L460,480 L408,443 L472,443 Z M691,480 L711,419 L763,382 L743,443 Z M691,480 L755,480 L807,443 L743,443 Z M859,480 L807,443 L827,503 L879,541 Z M859,480 L879,419 L898,480 L879,541 Z M807,321 L827,260 L879,222 L859,283 Z M879,344 L898,283 L879,222 L859,283 Z M879,419 L943,419 L994,382 L930,382 Z M763,382 L711,344 L691,283 L743,321 Z M743,321 L807,321 L755,283 L691,283 Z M576,321 L640,321 L691,283 L627,283 Z M576,443 L595,382 L576,321 L556,382 Z M504,344 L524,283 L472,321 L452,382 Z M524,283 L460,283 L408,321 L472,321 Z M504,222 L524,161 L575,124 L556,185 Z M504,222 L440,222 L388,185 L452,185 Z M576,246 L595,185 L575,124 L556,185 Z M408,321 L356,283 L336,222 L388,260 Z M336,419 L272,419 L221,382 L285,382 Z M336,344 L356,283 L336,222 L317,283 Z M336,344 L272,344 L221,382 L285,382 Z M253,283 L272,222 L221,260 L201,321 Z M221,382 L157,382 L105,419 L169,419 Z M201,443 L221,382 L169,419 L149,480 Z M65,541 L85,480 L33,518 L14,579 Z M221,579 L169,541 L149,480 L201,518 Z M336,541 L356,480 L336,419 L317,480 Z M336,541 L272,541 L221,579 L285,579 Z M388,503 L408,443 L356,480 L336,541 Z M317,602 L336,541 L285,579 L265,640 Z M368,640 L388,579 L408,640 L388,700 Z M317,677 L265,640 L285,700 L336,738 Z M336,738 L317,799 L336,860 L356,799 Z M336,738 L272,738 L221,700 L285,700 Z M388,776 L336,738 L356,799 L408,836 Z M221,700 L201,761 L149,799 L169,738 Z M201,836 L149,799 L169,860 L221,897 Z M65,738 L14,700 L33,761 L85,799 Z M85,677 L65,738 L85,799 L105,738 Z M201,640 L137,640 L85,677 L149,677 Z M201,640 L137,640 L85,602 L149,602 Z M85,602 L105,541 L85,480 L65,541 Z M253,996 L201,958 L221,1019 L272,1057 Z M221,897 L157,897 L105,860 L169,860 Z M336,860 L272,860 L221,897 L285,897 Z M336,935 L317,996 L336,1057 L356,996 Z M336,935 L272,935 L221,897 L285,897 Z M388,1094 L368,1155 L388,1216 L408,1155 Z M368,1155 L317,1118 L336,1178 L388,1216 Z M576,1155 L556,1216 L504,1254 L524,1193 Z M640,1155 L691,1193 L711,1254 L659,1216 Z M711,1057 L691,1118 L640,1155 L659,1094 Z M711,1057 L775,1057 L827,1094 L763,1094 Z M827,1094 L807,1155 L827,1216 L847,1155 Z M763,1216 L827,1216 L775,1254 L711,1254 Z M898,1118 L879,1178 L827,1216 L847,1155 Z M898,1118 L962,1118 L1014,1155 L950,1155 Z M943,1057 L994,1094 L1014,1155 L962,1118 Z M1014,958 L994,1019 L943,1057 L962,996 Z M1014,958 L1078,958 L1130,996 L1066,996 Z M994,897 L1014,836 L1066,799 L1046,860 Z M994,897 L1058,897 L1110,860 L1046,860 Z M879,935 L859,996 L879,1057 L898,996 Z M930,897 L994,897 L943,935 L879,935 Z M807,958 L859,996 L879,1057 L827,1019 Z M743,958 L807,958 L755,996 L691,996 Z M763,897 L743,958 L691,996 L711,935 Z M691,799 L743,836 L763,897 L711,860 Z M691,799 L755,799 L807,836 L743,836 Z M576,836 L556,897 L576,958 L595,897 Z M576,958 L640,958 L691,996 L627,996 Z M524,996 L460,996 L408,958 L472,958 Z M627,996 L691,996 L640,1033 L576,1033 Z M576,1033 L556,1094 L576,1155 L595,1094 Z M504,935 L452,897 L472,958 L524,996 Z M504,1057 L556,1094 L576,1155 L524,1118 Z M504,1057 L440,1057 L388,1094 L452,1094 Z M408,958 L388,1019 L336,1057 L356,996 Z M524,799 L504,860 L452,897 L472,836 Z M524,799 L460,799 L408,836 L472,836 Z M504,738 L440,738 L388,700 L452,700 Z M504,541 L440,541 L388,579 L452,579 Z M627,799 L691,799 L640,836 L576,836 Z M627,799 L691,799 L640,761 L576,761 Z M879,738 L898,677 L950,640 L930,700 Z M879,738 L943,738 L994,700 L930,700 Z M859,799 L879,738 L898,799 L879,860 Z M859,799 L879,738 L827,776 L807,836 Z M994,700 L1046,738 L1066,799 L1014,761 Z M1014,640 L1078,640 L1130,602 L1066,602 Z M1014,640 L1078,640 L1130,677 L1066,677 Z M994,579 L1014,518 L1066,480 L1046,541 Z M1110,738 L1130,677 L1150,738 L1130,799 Z M1130,799 L1150,738 L1201,700 L1182,761 Z M1110,860 L1162,897 L1182,958 L1130,921 Z M1162,897 L1182,836 L1201,897 L1182,958 Z M1130,480 L1182,518 L1201,579 L1150,541 Z M1110,419 L1130,358 L1182,321 L1162,382 Z M1110,541 L1130,480 L1150,541 L1130,602 Z M994,382 L1046,419 L1066,480 L1014,443 Z M994,382 L1058,382 L1110,419 L1046,419 Z M879,541 L930,579 L950,640 L898,602 Z M879,541 L943,541 L994,579 L930,579 Z M807,640 L827,579 L847,640 L827,700 Z M763,579 L827,579 L775,541 L711,541 Z M763,700 L827,700 L775,738 L711,738 Z M1014,321 L962,283 L943,222 L994,260 Z M1014,321 L1078,321 L1130,283 L1066,283 Z M930,382 L994,382 L943,344 L879,344 Z M1162,382 L1182,321 L1201,382 L1182,443 Z M943,222 L962,161 L1014,124 L994,185 Z M898,161 L847,124 L827,63 L879,101 Z M898,161 L962,161 L1014,124 L950,124 Z M827,185 L847,124 L827,63 L807,124 Z M711,222 L659,185 L639,124 L691,161 Z M711,222 L775,222 L827,185 L763,185 Z M639,124 L659,63 L711,25 L691,86 Z M575,124 L524,86 L504,25 L556,63 Z M763,63 L827,63 L775,25 L711,25 Z M388,185 L408,124 L388,63 L368,124 Z M368,124 L388,63 L336,101 L317,161 Z M879,860 L943,860 L994,897 L930,897 Z M627,283 L691,283 L640,246 L576,246 Z "),thickShape:new Bt("M576,640 L524,602 L472,640 L524,677 Z M576,640 L640,640 L659,700 L595,700 Z M576,640 L640,640 L659,579 L595,579 Z M556,579 L576,518 L524,480 L504,541 Z M556,700 L504,738 L524,799 L576,761 Z M576,518 L640,518 L659,579 L595,579 Z M627,480 L576,443 L524,480 L576,518 Z M691,480 L640,518 L659,579 L711,541 Z M691,480 L711,419 L659,382 L640,443 Z M691,480 L755,480 L775,541 L711,541 Z M743,443 L807,443 L827,382 L763,382 Z M711,419 L659,382 L711,344 L763,382 Z M755,480 L807,443 L827,503 L775,541 Z M859,480 L879,419 L827,382 L807,443 Z M827,382 L879,344 L859,283 L807,321 Z M807,321 L827,260 L775,222 L755,283 Z M879,344 L943,344 L962,283 L898,283 Z M879,419 L827,382 L879,344 L930,382 Z M879,419 L943,419 L962,480 L898,480 Z M763,382 L827,382 L807,321 L743,321 Z M691,283 L711,222 L659,185 L640,246 Z M691,283 L755,283 L775,222 L711,222 Z M659,382 L711,344 L691,283 L640,321 Z M595,382 L659,382 L640,321 L576,321 Z M576,321 L524,283 L576,246 L627,283 Z M576,443 L524,480 L504,419 L556,382 Z M576,443 L640,443 L659,382 L595,382 Z M556,382 L504,344 L452,382 L504,419 Z M556,382 L576,321 L524,283 L504,344 Z M452,382 L388,382 L408,321 L472,321 Z M524,283 L576,246 L556,185 L504,222 Z M524,283 L460,283 L440,222 L504,222 Z M504,222 L524,161 L472,124 L452,185 Z M576,246 L640,246 L659,185 L595,185 Z M460,283 L408,321 L388,260 L440,222 Z M440,222 L388,185 L336,222 L388,260 Z M388,382 L336,344 L285,382 L336,419 Z M388,382 L408,321 L356,283 L336,344 Z M408,443 L356,480 L336,419 L388,382 Z M336,344 L272,344 L253,283 L317,283 Z M317,283 L253,283 L272,222 L336,222 Z M272,344 L221,382 L201,321 L253,283 Z M221,382 L157,382 L137,321 L201,321 Z M201,321 L221,260 L169,222 L149,283 Z M157,382 L105,419 L85,358 L137,321 Z M149,480 L85,480 L105,419 L169,419 Z M169,541 L105,541 L85,480 L149,480 Z M253,480 L201,443 L149,480 L201,518 Z M253,480 L272,419 L221,382 L201,443 Z M272,541 L221,579 L201,518 L253,480 Z M317,480 L253,480 L272,419 L336,419 Z M336,541 L272,541 L253,480 L317,480 Z M265,640 L201,640 L221,700 L285,700 Z M265,640 L201,640 L221,579 L285,579 Z M368,640 L317,677 L336,738 L388,700 Z M368,640 L317,602 L265,640 L317,677 Z M368,640 L388,579 L336,541 L317,602 Z M336,738 L272,738 L253,799 L317,799 Z M317,799 L253,799 L272,860 L336,860 Z M272,738 L253,799 L201,761 L221,700 Z M253,799 L201,836 L221,897 L272,860 Z M253,799 L201,761 L149,799 L201,836 Z M149,799 L85,799 L105,860 L169,860 Z M169,738 L105,738 L85,799 L149,799 Z M85,677 L65,738 L14,700 L33,640 Z M137,640 L85,602 L33,640 L85,677 Z M149,677 L85,677 L105,738 L169,738 Z M201,640 L149,677 L169,738 L221,700 Z M201,640 L221,579 L169,541 L149,602 Z M149,602 L85,602 L105,541 L169,541 Z M85,602 L33,640 L14,579 L65,541 Z M157,897 L137,958 L85,921 L105,860 Z M201,958 L149,996 L169,1057 L221,1019 Z M221,897 L157,897 L137,958 L201,958 Z M272,935 L253,996 L201,958 L221,897 Z M336,935 L272,935 L253,996 L317,996 Z M388,897 L336,935 L356,996 L408,958 Z M388,897 L336,860 L285,897 L336,935 Z M317,996 L253,996 L272,1057 L336,1057 Z M336,1057 L272,1057 L253,1118 L317,1118 Z M388,1094 L368,1155 L317,1118 L336,1057 Z M272,1057 L221,1019 L169,1057 L221,1094 Z M472,1155 L452,1216 L504,1254 L524,1193 Z M472,1155 L408,1155 L388,1216 L452,1216 Z M452,1094 L388,1094 L408,1155 L472,1155 Z M524,1118 L576,1155 L524,1193 L472,1155 Z M576,1155 L640,1155 L659,1216 L595,1216 Z M595,1094 L659,1094 L640,1155 L576,1155 Z M691,1118 L743,1155 L691,1193 L640,1155 Z M711,1057 L691,1118 L743,1155 L763,1094 Z M691,996 L640,1033 L659,1094 L711,1057 Z M691,996 L755,996 L775,1057 L711,1057 Z M763,1094 L827,1094 L807,1155 L743,1155 Z M827,1019 L879,1057 L827,1094 L775,1057 Z M879,1057 L827,1094 L847,1155 L898,1118 Z M879,1057 L943,1057 L962,1118 L898,1118 Z M743,1155 L691,1193 L711,1254 L763,1216 Z M743,1155 L807,1155 L827,1216 L763,1216 Z M994,1019 L1046,1057 L994,1094 L943,1057 Z M1066,996 L1130,996 L1110,1057 L1046,1057 Z M1078,958 L1130,996 L1182,958 L1130,921 Z M1058,897 L1110,860 L1130,921 L1078,958 Z M1014,958 L994,1019 L1046,1057 L1066,996 Z M994,897 L943,935 L962,996 L1014,958 Z M994,897 L1058,897 L1078,958 L1014,958 Z M898,996 L962,996 L943,1057 L879,1057 Z M879,935 L943,935 L962,996 L898,996 Z M827,897 L807,958 L859,996 L879,935 Z M807,958 L755,996 L775,1057 L827,1019 Z M763,897 L827,897 L807,958 L743,958 Z M743,836 L807,836 L827,897 L763,897 Z M711,860 L763,897 L711,935 L659,897 Z M691,799 L640,836 L659,897 L711,860 Z M691,799 L711,738 L659,700 L640,761 Z M691,799 L755,799 L775,738 L711,738 Z M659,897 L640,958 L691,996 L711,935 Z M595,897 L659,897 L640,958 L576,958 Z M576,836 L556,897 L504,860 L524,799 Z M576,836 L640,836 L659,897 L595,897 Z M576,958 L627,996 L576,1033 L524,996 Z M556,897 L504,935 L524,996 L576,958 Z M556,897 L504,860 L452,897 L504,935 Z M524,996 L504,1057 L556,1094 L576,1033 Z M524,996 L460,996 L440,1057 L504,1057 Z M576,1033 L640,1033 L659,1094 L595,1094 Z M504,1057 L452,1094 L472,1155 L524,1118 Z M460,996 L440,1057 L388,1019 L408,958 Z M440,1057 L388,1019 L336,1057 L388,1094 Z M452,897 L388,897 L408,958 L472,958 Z M472,836 L408,836 L388,897 L452,897 Z M408,836 L388,897 L336,860 L356,799 Z M440,738 L388,776 L408,836 L460,799 Z M440,738 L388,700 L336,738 L388,776 Z M504,738 L524,677 L472,640 L452,700 Z M504,738 L440,738 L460,799 L524,799 Z M452,700 L388,700 L408,640 L472,640 Z M452,579 L388,579 L408,640 L472,640 Z M504,541 L452,579 L472,640 L524,602 Z M504,541 L440,541 L460,480 L524,480 Z M440,541 L388,503 L336,541 L388,579 Z M440,541 L460,480 L408,443 L388,503 Z M576,761 L640,761 L659,700 L595,700 Z M627,799 L576,761 L524,799 L576,836 Z M755,799 L775,738 L827,776 L807,836 Z M827,700 L879,738 L827,776 L775,738 Z M827,700 L847,640 L898,677 L879,738 Z M879,738 L943,738 L962,799 L898,799 Z M930,700 L994,700 L1014,640 L950,640 Z M859,799 L807,836 L827,897 L879,860 Z M943,738 L994,700 L1014,761 L962,799 Z M962,799 L1014,836 L1066,799 L1014,761 Z M994,700 L1014,640 L1066,677 L1046,738 Z M1046,738 L1110,738 L1130,799 L1066,799 Z M1046,738 L1110,738 L1130,677 L1066,677 Z M994,579 L1046,541 L1066,602 L1014,640 Z M1078,640 L1130,677 L1182,640 L1130,602 Z M1130,602 L1150,541 L1201,579 L1182,640 Z M1130,677 L1182,640 L1201,700 L1150,738 Z M1182,640 L1246,640 L1265,700 L1201,700 Z M1182,640 L1246,640 L1265,579 L1201,579 Z M1130,799 L1182,836 L1233,799 L1182,761 Z M1182,761 L1201,700 L1253,738 L1233,799 Z M1110,860 L1130,799 L1182,836 L1162,897 Z M1046,860 L1110,860 L1130,799 L1066,799 Z M1182,518 L1233,480 L1253,541 L1201,579 Z M1130,480 L1182,518 L1233,480 L1182,443 Z M1110,419 L1162,382 L1182,443 L1130,480 Z M1046,419 L1110,419 L1130,480 L1066,480 Z M1046,541 L1110,541 L1130,602 L1066,602 Z M1046,541 L1110,541 L1130,480 L1066,480 Z M994,382 L1014,321 L962,283 L943,344 Z M994,382 L1058,382 L1078,321 L1014,321 Z M962,480 L1014,518 L1066,480 L1014,443 Z M943,419 L994,382 L1014,443 L962,480 Z M943,541 L962,480 L1014,518 L994,579 Z M879,541 L943,541 L962,480 L898,480 Z M827,579 L879,541 L898,602 L847,640 Z M827,579 L775,541 L827,503 L879,541 Z M930,579 L994,579 L1014,640 L950,640 Z M847,640 L898,677 L950,640 L898,602 Z M743,640 L691,677 L711,738 L763,700 Z M743,640 L691,602 L640,640 L691,677 Z M743,640 L763,579 L711,541 L691,602 Z M743,640 L807,640 L827,700 L763,700 Z M743,640 L807,640 L827,579 L763,579 Z M1014,321 L1066,283 L1046,222 L994,260 Z M1058,382 L1078,321 L1130,358 L1110,419 Z M1078,321 L1130,358 L1182,321 L1130,283 Z M1066,283 L1130,283 L1110,222 L1046,222 Z M994,260 L943,222 L994,185 L1046,222 Z M879,222 L898,161 L847,124 L827,185 Z M879,222 L943,222 L962,161 L898,161 Z M898,283 L962,283 L943,222 L879,222 Z M827,260 L775,222 L827,185 L879,222 Z M763,185 L827,185 L807,124 L743,124 Z M743,124 L763,63 L711,25 L691,86 Z M743,124 L807,124 L827,63 L763,63 Z M711,222 L763,185 L743,124 L691,161 Z M691,161 L639,124 L691,86 L743,124 Z M595,185 L659,185 L639,124 L575,124 Z M575,124 L639,124 L659,63 L595,63 Z M524,161 L472,124 L524,86 L575,124 Z M472,124 L524,86 L504,25 L452,63 Z M472,124 L408,124 L388,63 L452,63 Z M452,185 L388,185 L408,124 L472,124 Z M388,185 L336,222 L317,161 L368,124 Z M336,222 L272,222 L253,161 L317,161 Z M272,222 L221,185 L169,222 L221,260 Z M943,860 L962,799 L1014,836 L994,897 Z M879,860 L930,897 L879,935 L827,897 Z M879,860 L943,860 L962,799 L898,799 Z M472,443 L408,443 L388,382 L452,382 Z ")},PL={name:"Penrose11",thinShape:new Bt("M687,605 L705,550 L657,584 L640,640 Z M687,674 L640,640 L657,695 L705,729 Z M563,584 L516,550 L534,605 L581,640 Z M563,584 L581,529 L599,584 L581,640 Z M563,695 L581,640 L599,695 L581,750 Z M563,695 L581,640 L534,674 L516,729 Z M628,495 L687,495 L640,529 L581,529 Z M628,495 L687,495 L640,460 L581,460 Z M534,495 L487,460 L469,405 L516,439 Z M534,495 L476,495 L429,460 L487,460 Z M687,495 L705,439 L752,405 L734,460 Z M687,495 L745,495 L792,460 L734,460 Z M839,495 L792,460 L810,516 L857,550 Z M839,495 L857,439 L875,495 L857,550 Z M792,350 L810,294 L857,260 L839,316 Z M857,371 L875,316 L857,260 L839,316 Z M857,439 L915,439 L962,405 L904,405 Z M752,405 L705,371 L687,316 L734,350 Z M734,350 L792,350 L745,316 L687,316 Z M581,350 L640,350 L687,316 L628,316 Z M581,460 L599,405 L581,350 L563,405 Z M516,371 L534,316 L487,350 L469,405 Z M534,316 L476,316 L429,350 L487,350 Z M516,260 L534,205 L581,171 L563,226 Z M516,260 L458,260 L411,226 L469,226 Z M581,281 L599,226 L581,171 L563,226 Z M429,350 L382,316 L364,260 L411,294 Z M364,439 L306,439 L259,405 L317,405 Z M364,371 L382,316 L364,260 L346,316 Z M364,371 L306,371 L259,405 L317,405 Z M288,316 L306,260 L259,294 L241,350 Z M259,405 L201,405 L153,439 L212,439 Z M241,350 L183,350 L135,316 L194,316 Z M241,460 L259,405 L212,439 L194,495 Z M153,439 L106,405 L88,350 L135,384 Z M88,460 L106,405 L88,350 L70,405 Z M117,550 L135,495 L88,529 L70,584 Z M259,584 L212,550 L194,495 L241,529 Z M364,550 L382,495 L364,439 L346,495 Z M364,550 L306,550 L259,584 L317,584 Z M411,516 L429,460 L382,495 L364,550 Z M346,605 L364,550 L317,584 L299,640 Z M393,640 L411,584 L429,640 L411,695 Z M346,674 L299,640 L317,695 L364,729 Z M364,729 L346,784 L364,840 L382,784 Z M364,729 L306,729 L259,695 L317,695 Z M411,763 L364,729 L382,784 L429,819 Z M259,695 L241,750 L194,784 L212,729 Z M241,819 L194,784 L212,840 L259,874 Z M117,729 L70,695 L88,750 L135,784 Z M153,840 L135,895 L88,929 L106,874 Z M88,819 L70,874 L88,929 L106,874 Z M135,674 L117,729 L135,784 L153,729 Z M241,640 L183,640 L135,674 L194,674 Z M241,640 L183,640 L135,605 L194,605 Z M135,605 L153,550 L135,495 L117,550 Z M241,929 L183,929 L135,963 L194,963 Z M288,963 L241,929 L259,985 L306,1019 Z M259,874 L201,874 L153,840 L212,840 Z M364,840 L306,840 L259,874 L317,874 Z M364,908 L346,963 L364,1019 L382,963 Z M364,908 L306,908 L259,874 L317,874 Z M411,1053 L393,1108 L411,1164 L429,1108 Z M346,1074 L288,1074 L241,1108 L299,1108 Z M306,1019 L288,1074 L241,1108 L259,1053 Z M411,1164 L458,1198 L476,1253 L429,1219 Z M393,1108 L346,1074 L364,1129 L411,1164 Z M469,1164 L411,1164 L458,1198 L516,1198 Z M581,1108 L563,1164 L581,1219 L599,1164 Z M581,1108 L563,1164 L516,1198 L534,1142 Z M640,1108 L687,1142 L705,1198 L657,1164 Z M705,1019 L687,1074 L640,1108 L657,1053 Z M705,1019 L763,1019 L810,1053 L752,1053 Z M810,1053 L792,1108 L810,1164 L828,1108 Z M810,1164 L792,1219 L745,1253 L763,1198 Z M752,1164 L810,1164 L763,1198 L705,1198 Z M581,1219 L640,1219 L687,1253 L628,1253 Z M904,1164 L962,1164 L915,1198 L857,1198 Z M1027,1074 L1085,1074 L1038,1108 L980,1108 Z M1085,963 L1067,1019 L1085,1074 L1103,1019 Z M1114,874 L1132,819 L1150,874 L1132,929 Z M1132,819 L1191,819 L1238,784 L1179,784 Z M1085,784 L1103,729 L1150,695 L1132,750 Z M1067,729 L1085,674 L1103,729 L1085,784 Z M1067,840 L1114,874 L1132,929 L1085,895 Z M962,874 L980,819 L1027,784 L1009,840 Z M962,874 L1020,874 L1067,840 L1009,840 Z M980,929 L962,985 L915,1019 L933,963 Z M980,929 L1038,929 L1085,963 L1027,963 Z M904,874 L962,874 L915,908 L857,908 Z M857,908 L839,963 L857,1019 L875,963 Z M857,840 L915,840 L962,874 L904,874 Z M839,784 L857,729 L875,784 L857,840 Z M839,784 L857,729 L810,763 L792,819 Z M857,729 L875,674 L922,640 L904,695 Z M857,729 L915,729 L962,695 L904,695 Z M962,695 L1009,729 L1027,784 L980,750 Z M980,640 L1038,640 L1085,605 L1027,605 Z M980,640 L1038,640 L1085,674 L1027,674 Z M857,550 L904,584 L922,640 L875,605 Z M857,550 L915,550 L962,584 L904,584 Z M792,640 L810,584 L828,640 L810,695 Z M752,695 L810,695 L763,729 L705,729 Z M687,784 L734,819 L752,874 L705,840 Z M687,784 L745,784 L792,819 L734,819 Z M628,784 L687,784 L640,819 L581,819 Z M628,784 L687,784 L640,750 L581,750 Z M581,819 L563,874 L581,929 L599,874 Z M534,784 L516,840 L469,874 L487,819 Z M534,784 L476,784 L429,819 L487,819 Z M516,729 L458,729 L411,695 L469,695 Z M581,929 L640,929 L687,963 L628,963 Z M516,908 L469,874 L487,929 L534,963 Z M534,963 L476,963 L429,929 L487,929 Z M581,998 L563,1053 L581,1108 L599,1053 Z M516,1019 L563,1053 L581,1108 L534,1074 Z M516,1019 L458,1019 L411,1053 L469,1053 Z M429,929 L411,985 L364,1019 L382,963 Z M628,963 L687,963 L640,998 L581,998 Z M752,874 L734,929 L687,963 L705,908 Z M734,929 L792,929 L745,963 L687,963 Z M792,929 L839,963 L857,1019 L810,985 Z M516,550 L458,550 L411,584 L469,584 Z M752,584 L810,584 L763,550 L705,550 Z M962,584 L980,529 L1027,495 L1009,550 Z M1085,495 L1132,529 L1150,584 L1103,550 Z M1067,439 L1085,384 L1132,350 L1114,405 Z M1132,460 L1191,460 L1238,495 L1179,495 Z M1067,550 L1085,495 L1103,550 L1085,605 Z M1150,695 L1209,695 L1256,729 L1197,729 Z M1150,584 L1209,584 L1256,550 L1197,550 Z M1191,640 L1238,674 L1256,729 L1209,695 Z M1191,640 L1209,584 L1256,550 L1238,605 Z M1085,316 L1103,260 L1085,205 L1067,260 Z M1114,405 L1132,350 L1150,405 L1132,460 Z M1027,205 L1085,205 L1038,171 L980,171 Z M915,260 L933,205 L980,171 L962,226 Z M810,226 L828,171 L810,115 L792,171 Z M875,205 L828,171 L810,115 L857,150 Z M875,205 L933,205 L980,171 L922,171 Z M810,115 L763,81 L745,26 L792,60 Z M752,115 L810,115 L763,81 L705,81 Z M639,171 L657,115 L705,81 L687,137 Z M581,171 L534,137 L516,81 L563,115 Z M581,171 L599,115 L581,60 L563,115 Z M581,60 L639,60 L687,26 L628,26 Z M411,115 L429,60 L476,26 L458,81 Z M393,171 L411,115 L364,150 L346,205 Z M469,115 L411,115 L458,81 L516,81 Z M411,226 L429,171 L411,115 L393,171 Z M346,205 L288,205 L241,171 L299,171 Z M306,260 L259,226 L241,171 L288,205 Z M705,260 L657,226 L639,171 L687,205 Z M705,260 L763,260 L810,226 L752,226 Z M904,115 L962,115 L915,81 L857,81 Z M980,350 L933,316 L915,260 L962,294 Z M980,350 L1038,350 L1085,316 L1027,316 Z M962,405 L1009,439 L1027,495 L980,460 Z M962,405 L1020,405 L1067,439 L1009,439 Z M904,405 L962,405 L915,371 L857,371 Z M915,1019 L962,1053 L980,1108 L933,1074 Z M875,1074 L857,1129 L810,1164 L828,1108 Z M875,1074 L933,1074 L980,1108 L922,1108 Z M628,316 L687,316 L640,281 L581,281 Z "),thickShape:new Bt("M581,640 L534,605 L487,640 L534,674 Z M581,640 L640,640 L657,695 L599,695 Z M581,640 L640,640 L657,584 L599,584 Z M563,584 L581,529 L534,495 L516,550 Z M563,695 L516,729 L534,784 L581,750 Z M581,529 L640,529 L657,584 L599,584 Z M628,495 L581,460 L534,495 L581,529 Z M687,495 L640,529 L657,584 L705,550 Z M687,495 L705,439 L657,405 L640,460 Z M687,495 L745,495 L763,550 L705,550 Z M734,460 L792,460 L810,405 L752,405 Z M705,439 L657,405 L705,371 L752,405 Z M745,495 L792,460 L810,516 L763,550 Z M839,495 L857,439 L810,405 L792,460 Z M810,405 L857,371 L839,316 L792,350 Z M792,350 L810,294 L763,260 L745,316 Z M857,371 L915,371 L933,316 L875,316 Z M857,439 L810,405 L857,371 L904,405 Z M857,439 L915,439 L933,495 L875,495 Z M752,405 L810,405 L792,350 L734,350 Z M687,316 L705,260 L657,226 L640,281 Z M687,316 L745,316 L763,260 L705,260 Z M657,405 L705,371 L687,316 L640,350 Z M599,405 L657,405 L640,350 L581,350 Z M581,350 L534,316 L581,281 L628,316 Z M581,460 L534,495 L516,439 L563,405 Z M581,460 L640,460 L657,405 L599,405 Z M563,405 L516,371 L469,405 L516,439 Z M563,405 L581,350 L534,316 L516,371 Z M469,405 L411,405 L429,350 L487,350 Z M534,316 L581,281 L563,226 L516,260 Z M534,316 L476,316 L458,260 L516,260 Z M516,260 L534,205 L487,171 L469,226 Z M581,281 L640,281 L657,226 L599,226 Z M476,316 L429,350 L411,294 L458,260 Z M458,260 L411,226 L364,260 L411,294 Z M411,405 L364,371 L317,405 L364,439 Z M411,405 L429,350 L382,316 L364,371 Z M429,460 L382,495 L364,439 L411,405 Z M364,371 L306,371 L288,316 L346,316 Z M346,316 L288,316 L306,260 L364,260 Z M306,371 L259,405 L241,350 L288,316 Z M259,405 L201,405 L183,350 L241,350 Z M241,350 L259,294 L212,260 L194,316 Z M201,405 L153,439 L135,384 L183,350 Z M183,350 L135,316 L88,350 L135,384 Z M135,495 L88,460 L41,495 L88,529 Z M135,495 L153,439 L106,405 L88,460 Z M194,495 L135,495 L153,439 L212,439 Z M212,550 L153,550 L135,495 L194,495 Z M288,495 L241,460 L194,495 L241,529 Z M288,495 L306,439 L259,405 L241,460 Z M306,550 L259,584 L241,529 L288,495 Z M346,495 L288,495 L306,439 L364,439 Z M364,550 L306,550 L288,495 L346,495 Z M299,640 L241,640 L259,695 L317,695 Z M299,640 L241,640 L259,584 L317,584 Z M393,640 L346,674 L364,729 L411,695 Z M393,640 L346,605 L299,640 L346,674 Z M393,640 L411,584 L364,550 L346,605 Z M364,729 L306,729 L288,784 L346,784 Z M346,784 L288,784 L306,840 L364,840 Z M306,729 L288,784 L241,750 L259,695 Z M288,784 L241,819 L259,874 L306,840 Z M288,784 L241,750 L194,784 L241,819 Z M194,784 L135,784 L153,840 L212,840 Z M212,729 L153,729 L135,784 L194,784 Z M135,784 L88,819 L106,874 L153,840 Z M135,784 L88,750 L41,784 L88,819 Z M135,674 L117,729 L70,695 L88,640 Z M183,640 L135,605 L88,640 L135,674 Z M88,640 L30,640 L12,584 L70,584 Z M88,640 L30,640 L12,695 L70,695 Z M194,674 L135,674 L153,729 L212,729 Z M241,640 L194,674 L212,729 L259,695 Z M241,640 L259,584 L212,550 L194,605 Z M194,605 L135,605 L153,550 L212,550 Z M135,605 L88,640 L70,584 L117,550 Z M70,584 L88,529 L41,495 L23,550 Z M70,695 L23,729 L41,784 L88,750 Z M183,929 L135,895 L88,929 L135,963 Z M194,963 L135,963 L153,1019 L212,1019 Z M241,929 L194,963 L212,1019 L259,985 Z M259,874 L201,874 L183,929 L241,929 Z M306,908 L288,963 L241,929 L259,874 Z M201,874 L183,929 L135,895 L153,840 Z M364,908 L306,908 L288,963 L346,963 Z M411,874 L364,908 L382,963 L429,929 Z M411,874 L364,840 L317,874 L364,908 Z M346,963 L288,963 L306,1019 L364,1019 Z M364,1019 L306,1019 L288,1074 L346,1074 Z M411,1053 L393,1108 L346,1074 L364,1019 Z M346,1074 L299,1108 L317,1164 L364,1129 Z M306,1019 L259,985 L212,1019 L259,1053 Z M259,1053 L241,1108 L194,1074 L212,1019 Z M411,1164 L364,1129 L317,1164 L364,1198 Z M516,1198 L458,1198 L476,1253 L534,1253 Z M487,1108 L469,1164 L516,1198 L534,1142 Z M487,1108 L429,1108 L411,1164 L469,1164 Z M469,1053 L411,1053 L429,1108 L487,1108 Z M534,1074 L581,1108 L534,1142 L487,1108 Z M581,1108 L640,1108 L657,1164 L599,1164 Z M599,1164 L657,1164 L640,1219 L581,1219 Z M563,1164 L516,1198 L534,1253 L581,1219 Z M599,1053 L657,1053 L640,1108 L581,1108 Z M657,1164 L640,1219 L687,1253 L705,1198 Z M687,1074 L734,1108 L687,1142 L640,1108 Z M705,1019 L687,1074 L734,1108 L752,1053 Z M687,963 L640,998 L657,1053 L705,1019 Z M687,963 L745,963 L763,1019 L705,1019 Z M752,1053 L810,1053 L792,1108 L734,1108 Z M810,985 L857,1019 L810,1053 L763,1019 Z M857,1019 L810,1053 L828,1108 L875,1074 Z M857,1019 L915,1019 L933,1074 L875,1074 Z M734,1108 L687,1142 L705,1198 L752,1164 Z M734,1108 L792,1108 L810,1164 L752,1164 Z M705,1198 L763,1198 L745,1253 L687,1253 Z M857,1129 L904,1164 L857,1198 L810,1164 Z M922,1108 L980,1108 L962,1164 L904,1164 Z M1085,963 L1132,929 L1150,985 L1103,1019 Z M1132,929 L1191,929 L1209,874 L1150,874 Z M1132,819 L1191,819 L1209,874 L1150,874 Z M1179,784 L1238,784 L1256,729 L1197,729 Z M1085,784 L1132,819 L1179,784 L1132,750 Z M1132,750 L1150,695 L1197,729 L1179,784 Z M1067,840 L1085,784 L1132,819 L1114,874 Z M1009,729 L1067,729 L1085,784 L1027,784 Z M1009,729 L1067,729 L1085,674 L1027,674 Z M1009,840 L1067,840 L1085,784 L1027,784 Z M962,874 L915,908 L933,963 L980,929 Z M962,874 L1020,874 L1038,929 L980,929 Z M980,929 L962,985 L1009,1019 L1027,963 Z M915,840 L933,784 L980,819 L962,874 Z M1020,874 L1067,840 L1085,895 L1038,929 Z M1038,929 L1085,963 L1132,929 L1085,895 Z M857,908 L915,908 L933,963 L875,963 Z M857,840 L904,874 L857,908 L810,874 Z M857,840 L915,840 L933,784 L875,784 Z M839,784 L792,819 L810,874 L857,840 Z M810,874 L792,929 L839,963 L857,908 Z M857,729 L915,729 L933,784 L875,784 Z M933,784 L980,819 L1027,784 L980,750 Z M915,729 L962,695 L980,750 L933,784 Z M962,695 L980,640 L1027,674 L1009,729 Z M904,695 L962,695 L980,640 L922,640 Z M904,584 L962,584 L980,640 L922,640 Z M857,550 L915,550 L933,495 L875,495 Z M828,640 L875,674 L922,640 L875,605 Z M810,584 L857,550 L875,605 L828,640 Z M810,584 L763,550 L810,516 L857,550 Z M810,695 L857,729 L810,763 L763,729 Z M810,695 L828,640 L875,674 L857,729 Z M734,640 L687,674 L705,729 L752,695 Z M734,640 L687,605 L640,640 L687,674 Z M734,640 L752,584 L705,550 L687,605 Z M734,640 L792,640 L810,695 L752,695 Z M734,640 L792,640 L810,584 L752,584 Z M687,784 L640,819 L657,874 L705,840 Z M687,784 L705,729 L657,695 L640,750 Z M687,784 L745,784 L763,729 L705,729 Z M705,840 L752,874 L705,908 L657,874 Z M734,819 L792,819 L810,874 L752,874 Z M628,784 L581,750 L534,784 L581,819 Z M745,784 L763,729 L810,763 L792,819 Z M581,819 L563,874 L516,840 L534,784 Z M581,819 L640,819 L657,874 L599,874 Z M581,750 L640,750 L657,695 L599,695 Z M516,729 L534,674 L487,640 L469,695 Z M516,729 L458,729 L476,784 L534,784 Z M487,819 L429,819 L411,874 L469,874 Z M458,729 L411,763 L429,819 L476,784 Z M458,729 L411,695 L364,729 L411,763 Z M429,819 L411,874 L364,840 L382,784 Z M469,874 L411,874 L429,929 L487,929 Z M563,874 L516,908 L534,963 L581,929 Z M563,874 L516,840 L469,874 L516,908 Z M581,929 L628,963 L581,998 L534,963 Z M534,963 L516,1019 L563,1053 L581,998 Z M534,963 L476,963 L458,1019 L516,1019 Z M581,998 L640,998 L657,1053 L599,1053 Z M516,1019 L469,1053 L487,1108 L534,1074 Z M476,963 L458,1019 L411,985 L429,929 Z M458,1019 L411,985 L364,1019 L411,1053 Z M599,874 L657,874 L640,929 L581,929 Z M657,874 L640,929 L687,963 L705,908 Z M752,874 L810,874 L792,929 L734,929 Z M792,929 L745,963 L763,1019 L810,985 Z M469,695 L411,695 L429,640 L487,640 Z M469,584 L411,584 L429,640 L487,640 Z M516,550 L469,584 L487,640 L534,605 Z M516,550 L458,550 L476,495 L534,495 Z M458,550 L411,516 L364,550 L411,584 Z M458,550 L476,495 L429,460 L411,516 Z M915,550 L933,495 L980,529 L962,584 Z M962,584 L1009,550 L1027,605 L980,640 Z M933,495 L980,529 L1027,495 L980,460 Z M915,439 L962,405 L980,460 L933,495 Z M1009,439 L1067,439 L1085,495 L1027,495 Z M1009,550 L1067,550 L1085,605 L1027,605 Z M1009,550 L1067,550 L1085,495 L1027,495 Z M1085,495 L1132,529 L1179,495 L1132,460 Z M1067,439 L1114,405 L1132,460 L1085,495 Z M1132,460 L1191,460 L1209,405 L1150,405 Z M1132,529 L1179,495 L1197,550 L1150,584 Z M1085,605 L1103,550 L1150,584 L1132,640 Z M1038,640 L1085,674 L1132,640 L1085,605 Z M1132,640 L1191,640 L1209,695 L1150,695 Z M1132,640 L1191,640 L1209,584 L1150,584 Z M1085,674 L1132,640 L1150,695 L1103,729 Z M1179,495 L1238,495 L1256,550 L1197,550 Z M1132,350 L1191,350 L1209,405 L1150,405 Z M1085,316 L1103,260 L1150,294 L1132,350 Z M1009,260 L1027,205 L980,171 L962,226 Z M1009,260 L1067,260 L1085,205 L1027,205 Z M1027,316 L1085,316 L1067,260 L1009,260 Z M962,294 L915,260 L962,226 L1009,260 Z M857,260 L875,205 L828,171 L810,226 Z M857,260 L915,260 L933,205 L875,205 Z M875,316 L933,316 L915,260 L857,260 Z M810,294 L763,260 L810,226 L857,260 Z M875,205 L922,171 L904,115 L857,150 Z M857,150 L810,115 L857,81 L904,115 Z M922,171 L980,171 L962,115 L904,115 Z M705,81 L763,81 L745,26 L687,26 Z M734,171 L752,115 L705,81 L687,137 Z M734,171 L792,171 L810,115 L752,115 Z M752,226 L810,226 L792,171 L734,171 Z M687,205 L639,171 L687,137 L734,171 Z M657,115 L705,81 L687,26 L639,60 Z M581,171 L639,171 L657,115 L599,115 Z M563,115 L581,60 L534,26 L516,81 Z M599,226 L657,226 L639,171 L581,171 Z M534,205 L487,171 L534,137 L581,171 Z M599,115 L657,115 L639,60 L581,60 Z M516,81 L458,81 L476,26 L534,26 Z M411,115 L364,81 L317,115 L364,150 Z M487,171 L534,137 L516,81 L469,115 Z M487,171 L429,171 L411,115 L469,115 Z M469,226 L411,226 L429,171 L487,171 Z M411,226 L364,260 L346,205 L393,171 Z M364,260 L306,260 L288,205 L346,205 Z M346,205 L364,150 L317,115 L299,171 Z M306,260 L259,226 L212,260 L259,294 Z M259,226 L212,260 L194,205 L241,171 Z M194,316 L135,316 L153,260 L212,260 Z M705,260 L752,226 L734,171 L687,205 Z M980,350 L1027,316 L1009,260 L962,294 Z M962,405 L980,350 L933,316 L915,371 Z M962,405 L1020,405 L1038,350 L980,350 Z M1020,405 L1038,350 L1085,384 L1067,439 Z M1038,350 L1085,384 L1132,350 L1085,316 Z M875,963 L933,963 L915,1019 L857,1019 Z M962,985 L1009,1019 L962,1053 L915,1019 Z M1009,1019 L962,1053 L980,1108 L1027,1074 Z M1009,1019 L1067,1019 L1085,1074 L1027,1074 Z M1027,963 L1085,963 L1067,1019 L1009,1019 Z M875,1074 L857,1129 L904,1164 L922,1108 Z M487,460 L429,460 L411,405 L469,405 Z ")},SL={name:"Penrose13",thinShape:new Bt("M679,611 L695,564 L655,593 L640,640 Z M679,668 L640,640 L655,686 L695,715 Z M575,593 L535,564 L550,611 L590,640 Z M575,593 L590,546 L605,593 L590,640 Z M575,686 L590,640 L605,686 L590,733 Z M575,686 L590,640 L550,668 L535,715 Z M630,517 L679,517 L640,546 L590,546 Z M630,517 L679,517 L640,488 L590,488 Z M550,517 L511,488 L495,441 L535,470 Z M550,517 L501,517 L461,488 L511,488 Z M679,517 L695,470 L734,441 L719,488 Z M679,517 L729,517 L768,488 L719,488 Z M808,517 L768,488 L784,535 L823,564 Z M808,517 L823,470 L839,517 L823,564 Z M768,394 L784,348 L823,319 L808,365 Z M823,412 L839,365 L823,319 L808,365 Z M823,470 L873,470 L912,441 L863,441 Z M734,441 L695,412 L679,365 L719,394 Z M719,394 L768,394 L729,365 L679,365 Z M590,394 L640,394 L679,365 L630,365 Z M590,488 L605,441 L590,394 L575,441 Z M535,412 L550,365 L511,394 L495,441 Z M550,365 L501,365 L461,394 L511,394 Z M535,319 L550,272 L590,243 L575,290 Z M535,319 L486,319 L446,290 L495,290 Z M590,336 L605,290 L590,243 L575,290 Z M461,394 L422,365 L406,319 L446,348 Z M406,470 L357,470 L317,441 L367,441 Z M406,412 L422,365 L406,319 L391,365 Z M406,412 L357,412 L317,441 L367,441 Z M342,365 L357,319 L317,348 L302,394 Z M317,441 L268,441 L228,470 L277,470 Z M302,394 L253,394 L213,365 L262,365 Z M302,488 L317,441 L277,470 L262,517 Z M228,470 L188,441 L173,394 L213,423 Z M173,488 L188,441 L173,394 L158,441 Z M173,488 L124,488 L84,517 L133,517 Z M198,564 L213,517 L173,546 L158,593 Z M317,593 L277,564 L262,517 L302,546 Z M406,564 L422,517 L406,470 L391,517 Z M406,564 L357,564 L317,593 L367,593 Z M446,535 L461,488 L422,517 L406,564 Z M391,611 L406,564 L367,593 L351,640 Z M431,640 L446,593 L461,640 L446,686 Z M391,668 L351,640 L367,686 L406,715 Z M406,715 L391,762 L406,809 L422,762 Z M406,715 L357,715 L317,686 L367,686 Z M446,744 L406,715 L422,762 L461,791 Z M317,686 L302,733 L262,762 L277,715 Z M302,791 L262,762 L277,809 L317,838 Z M198,715 L158,686 L173,733 L213,762 Z M228,809 L213,856 L173,885 L188,838 Z M173,791 L158,838 L173,885 L188,838 Z M173,791 L124,791 L84,762 L133,762 Z M213,668 L198,715 L213,762 L228,715 Z M302,640 L253,640 L213,668 L262,668 Z M302,640 L253,640 L213,611 L262,611 Z M213,611 L228,564 L213,517 L198,564 Z M158,593 L109,593 L69,564 L118,564 Z M158,686 L109,686 L69,715 L118,715 Z M124,640 L84,611 L69,564 L109,593 Z M124,640 L109,686 L69,715 L84,668 Z M44,640 L29,686 L14,640 L29,593 Z M173,394 L133,365 L118,319 L158,348 Z M173,394 L124,394 L84,365 L133,365 Z M213,365 L228,319 L213,272 L198,319 Z M158,290 L173,243 L133,272 L118,319 Z M302,243 L253,243 L213,272 L262,272 Z M302,243 L253,243 L213,214 L262,214 Z M391,272 L342,272 L302,243 L351,243 Z M406,167 L422,120 L406,73 L391,120 Z M406,167 L357,167 L317,196 L367,196 Z M446,196 L461,149 L501,120 L486,167 Z M431,243 L446,196 L406,225 L391,272 Z M495,196 L446,196 L486,167 L535,167 Z M535,73 L486,73 L446,44 L495,44 Z M590,149 L639,149 L679,120 L630,120 Z M501,120 L461,91 L446,44 L486,73 Z M630,120 L679,120 L639,91 L590,91 Z M695,73 L744,73 L784,44 L734,44 Z M729,120 L744,73 L784,44 L768,91 Z M912,196 L928,149 L968,120 L952,167 Z M823,167 L839,120 L823,73 L808,120 Z M784,196 L744,167 L729,120 L768,149 Z M863,196 L912,196 L873,167 L823,167 Z M839,272 L799,243 L784,196 L823,225 Z M839,272 L888,272 L928,243 L878,243 Z M928,243 L977,243 L1017,214 L968,214 Z M873,319 L888,272 L928,243 L912,290 Z M928,394 L888,365 L873,319 L912,348 Z M928,394 L977,394 L1017,365 L968,365 Z M968,272 L1017,272 L977,243 L928,243 Z M1017,365 L1032,319 L1017,272 L1002,319 Z M1057,243 L1106,243 L1146,272 L1096,272 Z M1072,290 L1112,319 L1096,272 L1057,243 Z M1146,365 L1185,394 L1201,441 L1161,412 Z M1057,394 L1072,348 L1112,319 L1096,365 Z M1057,394 L1106,394 L1146,365 L1096,365 Z M1041,441 L1057,394 L1072,441 L1057,488 Z M1146,517 L1161,470 L1201,441 L1185,488 Z M1057,488 L1106,488 L1146,517 L1096,517 Z M1017,517 L1057,546 L1072,593 L1032,564 Z M1072,593 L1121,593 L1161,564 L1112,564 Z M1106,640 L1146,668 L1161,715 L1121,686 Z M1106,640 L1121,593 L1161,564 L1146,611 Z M1185,640 L1201,593 L1216,640 L1201,686 Z M1185,488 L1201,441 L1216,488 L1201,535 Z M1185,394 L1201,348 L1216,394 L1201,441 Z M1185,791 L1201,744 L1216,791 L1201,838 Z M1146,762 L1185,791 L1201,838 L1161,809 Z M1057,791 L1106,791 L1146,762 L1096,762 Z M1072,686 L1121,686 L1161,715 L1112,715 Z M1017,762 L1032,715 L1072,686 L1057,733 Z M1002,715 L1017,668 L1032,715 L1017,762 Z M1002,809 L1041,838 L1057,885 L1017,856 Z M912,838 L928,791 L968,762 L952,809 Z M912,838 L962,838 L1002,809 L952,809 Z M928,885 L912,931 L873,960 L888,914 Z M928,885 L977,885 L1017,914 L968,914 Z M863,838 L912,838 L873,867 L823,867 Z M1017,914 L1002,960 L1017,1007 L1032,960 Z M1057,885 L1096,914 L1112,960 L1072,931 Z M1057,885 L1106,885 L1146,914 L1096,914 Z M968,1007 L1017,1007 L977,1036 L928,1036 Z M873,960 L912,989 L928,1036 L888,1007 Z M839,1007 L823,1054 L784,1083 L799,1036 Z M839,1007 L888,1007 L928,1036 L878,1036 Z M784,989 L768,1036 L784,1083 L799,1036 Z M823,867 L808,914 L823,960 L839,914 Z M823,809 L873,809 L912,838 L863,838 Z M768,885 L808,914 L823,960 L784,931 Z M734,838 L719,885 L679,914 L695,867 Z M719,885 L768,885 L729,914 L679,914 Z M695,960 L679,1007 L640,1036 L655,989 Z M695,960 L744,960 L784,989 L734,989 Z M630,914 L679,914 L640,943 L590,943 Z M590,943 L575,989 L590,1036 L605,989 Z M590,885 L640,885 L679,914 L630,914 Z M550,914 L501,914 L461,885 L511,885 Z M590,791 L575,838 L590,885 L605,838 Z M679,762 L719,791 L734,838 L695,809 Z M679,762 L729,762 L768,791 L719,791 Z M630,762 L679,762 L640,791 L590,791 Z M630,762 L679,762 L640,733 L590,733 Z M823,715 L839,668 L878,640 L863,686 Z M823,715 L873,715 L912,686 L863,686 Z M808,762 L823,715 L839,762 L823,809 Z M808,762 L823,715 L784,744 L768,791 Z M912,686 L952,715 L968,762 L928,733 Z M928,640 L977,640 L1017,611 L968,611 Z M928,640 L977,640 L1017,668 L968,668 Z M912,593 L928,546 L968,517 L952,564 Z M1002,564 L1017,517 L1032,564 L1017,611 Z M912,441 L952,470 L968,517 L928,488 Z M912,441 L962,441 L1002,470 L952,470 Z M823,564 L863,593 L878,640 L839,611 Z M823,564 L873,564 L912,593 L863,593 Z M768,640 L784,593 L799,640 L784,686 Z M734,593 L784,593 L744,564 L695,564 Z M734,686 L784,686 L744,715 L695,715 Z M863,441 L912,441 L873,412 L823,412 Z M1002,470 L1017,423 L1057,394 L1041,441 Z M550,762 L535,809 L495,838 L511,791 Z M550,762 L501,762 L461,791 L511,791 Z M535,715 L486,715 L446,686 L495,686 Z M461,885 L446,931 L406,960 L422,914 Z M406,867 L391,914 L406,960 L422,914 Z M406,867 L357,867 L317,838 L367,838 Z M406,809 L357,809 L317,838 L367,838 Z M535,867 L495,838 L511,885 L550,914 Z M317,838 L268,838 L228,809 L277,809 Z M302,885 L253,885 L213,914 L262,914 Z M213,914 L198,960 L213,1007 L228,960 Z M173,885 L158,931 L118,960 L133,914 Z M173,885 L124,885 L84,914 L133,914 Z M158,989 L118,960 L133,1007 L173,1036 Z M302,1036 L253,1036 L213,1065 L262,1065 Z M302,1036 L253,1036 L213,1007 L262,1007 Z M391,1007 L342,1007 L302,1036 L351,1036 Z M431,1036 L391,1007 L406,1054 L446,1083 Z M446,989 L431,1036 L446,1083 L461,1036 Z M357,960 L342,1007 L302,1036 L317,989 Z M342,914 L302,885 L317,931 L357,960 Z M535,960 L575,989 L590,1036 L550,1007 Z M535,960 L486,960 L446,989 L495,989 Z M590,1036 L575,1083 L590,1130 L605,1083 Z M590,1036 L575,1083 L535,1112 L550,1065 Z M640,1036 L679,1065 L695,1112 L655,1083 Z M734,1083 L784,1083 L744,1112 L695,1112 Z M784,1083 L768,1130 L729,1159 L744,1112 Z M823,1112 L808,1159 L823,1206 L839,1159 Z M729,1159 L768,1188 L784,1235 L744,1206 Z M695,1206 L744,1206 L784,1235 L734,1235 Z M630,1159 L679,1159 L640,1188 L590,1188 Z M535,1206 L486,1206 L446,1235 L495,1235 Z M501,1159 L486,1206 L446,1235 L461,1188 Z M446,1083 L486,1112 L501,1159 L461,1130 Z M406,1112 L391,1159 L406,1206 L422,1159 Z M406,1112 L357,1112 L317,1083 L367,1083 Z M495,1083 L446,1083 L486,1112 L535,1112 Z M590,1130 L640,1130 L679,1159 L630,1159 Z M912,1083 L952,1112 L968,1159 L928,1130 Z M1057,1036 L1106,1036 L1146,1007 L1096,1007 Z M928,1036 L977,1036 L1017,1065 L968,1065 Z M863,1083 L912,1083 L873,1112 L823,1112 Z M1072,989 L1057,1036 L1096,1007 L1112,960 Z M1146,914 L1161,867 L1201,838 L1185,885 Z M1185,885 L1201,838 L1216,885 L1201,931 Z M535,564 L486,564 L446,593 L495,593 Z M1041,838 L1057,791 L1072,838 L1057,885 Z M784,290 L799,243 L784,196 L768,243 Z M695,319 L655,290 L640,243 L679,272 Z M695,319 L744,319 L784,290 L734,290 Z M640,243 L655,196 L695,167 L679,214 Z M590,243 L550,214 L535,167 L575,196 Z M590,243 L605,196 L590,149 L575,196 Z M734,196 L784,196 L744,167 L695,167 Z M446,290 L461,243 L446,196 L431,243 Z M357,319 L317,290 L302,243 L342,272 Z M630,365 L679,365 L640,336 L590,336 Z "),thickShape:new Bt("M590,640 L550,611 L511,640 L550,668 Z M590,640 L640,640 L655,686 L605,686 Z M590,640 L640,640 L655,593 L605,593 Z M575,593 L590,546 L550,517 L535,564 Z M575,686 L535,715 L550,762 L590,733 Z M590,546 L640,546 L655,593 L605,593 Z M630,517 L590,488 L550,517 L590,546 Z M679,517 L640,546 L655,593 L695,564 Z M679,517 L695,470 L655,441 L640,488 Z M679,517 L729,517 L744,564 L695,564 Z M719,488 L768,488 L784,441 L734,441 Z M695,470 L655,441 L695,412 L734,441 Z M729,517 L768,488 L784,535 L744,564 Z M808,517 L823,470 L784,441 L768,488 Z M784,441 L823,412 L808,365 L768,394 Z M768,394 L784,348 L744,319 L729,365 Z M823,412 L873,412 L888,365 L839,365 Z M823,470 L784,441 L823,412 L863,441 Z M823,470 L873,470 L888,517 L839,517 Z M734,441 L784,441 L768,394 L719,394 Z M679,365 L695,319 L655,290 L640,336 Z M679,365 L729,365 L744,319 L695,319 Z M655,441 L695,412 L679,365 L640,394 Z M605,441 L655,441 L640,394 L590,394 Z M590,394 L550,365 L590,336 L630,365 Z M590,488 L550,517 L535,470 L575,441 Z M590,488 L640,488 L655,441 L605,441 Z M575,441 L535,412 L495,441 L535,470 Z M575,441 L590,394 L550,365 L535,412 Z M495,441 L446,441 L461,394 L511,394 Z M550,365 L590,336 L575,290 L535,319 Z M550,365 L501,365 L486,319 L535,319 Z M535,319 L550,272 L511,243 L495,290 Z M590,336 L640,336 L655,290 L605,290 Z M501,365 L461,394 L446,348 L486,319 Z M486,319 L446,290 L406,319 L446,348 Z M446,441 L406,412 L367,441 L406,470 Z M446,441 L461,394 L422,365 L406,412 Z M461,488 L422,517 L406,470 L446,441 Z M406,412 L357,412 L342,365 L391,365 Z M391,365 L342,365 L357,319 L406,319 Z M357,412 L317,441 L302,394 L342,365 Z M317,441 L268,441 L253,394 L302,394 Z M302,394 L317,348 L277,319 L262,365 Z M268,441 L228,470 L213,423 L253,394 Z M253,394 L213,365 L173,394 L213,423 Z M213,517 L173,488 L133,517 L173,546 Z M213,517 L228,470 L188,441 L173,488 Z M173,488 L124,488 L109,441 L158,441 Z M262,517 L213,517 L228,470 L277,470 Z M277,564 L228,564 L213,517 L262,517 Z M342,517 L302,488 L262,517 L302,546 Z M342,517 L357,470 L317,441 L302,488 Z M357,564 L317,593 L302,546 L342,517 Z M391,517 L342,517 L357,470 L406,470 Z M406,564 L357,564 L342,517 L391,517 Z M351,640 L302,640 L317,686 L367,686 Z M351,640 L302,640 L317,593 L367,593 Z M431,640 L391,668 L406,715 L446,686 Z M431,640 L391,611 L351,640 L391,668 Z M431,640 L446,593 L406,564 L391,611 Z M406,715 L357,715 L342,762 L391,762 Z M391,762 L342,762 L357,809 L406,809 Z M357,715 L342,762 L302,733 L317,686 Z M342,762 L302,791 L317,838 L357,809 Z M342,762 L302,733 L262,762 L302,791 Z M262,762 L213,762 L228,809 L277,809 Z M277,715 L228,715 L213,762 L262,762 Z M213,762 L173,791 L188,838 L228,809 Z M213,762 L173,733 L133,762 L173,791 Z M173,791 L124,791 L109,838 L158,838 Z M213,668 L198,715 L158,686 L173,640 Z M253,640 L213,611 L173,640 L213,668 Z M173,640 L124,640 L109,593 L158,593 Z M173,640 L124,640 L109,686 L158,686 Z M262,668 L213,668 L228,715 L277,715 Z M302,640 L262,668 L277,715 L317,686 Z M302,640 L317,593 L277,564 L262,611 Z M262,611 L213,611 L228,564 L277,564 Z M213,611 L173,640 L158,593 L198,564 Z M158,593 L173,546 L133,517 L118,564 Z M158,686 L118,715 L133,762 L173,733 Z M124,640 L84,611 L44,640 L84,668 Z M84,668 L69,715 L29,686 L44,640 Z M84,611 L44,640 L29,593 L69,564 Z M69,715 L29,744 L44,791 L84,762 Z M118,715 L69,715 L84,762 L133,762 Z M69,564 L84,517 L44,488 L29,535 Z M118,564 L69,564 L84,517 L133,517 Z M124,488 L84,517 L69,470 L109,441 Z M109,441 L124,394 L84,365 L69,412 Z M158,441 L109,441 L124,394 L173,394 Z M213,365 L173,394 L158,348 L198,319 Z M253,243 L213,214 L173,243 L213,272 Z M198,319 L158,290 L118,319 L158,348 Z M198,319 L213,272 L173,243 L158,290 Z M277,319 L228,319 L213,272 L262,272 Z M302,243 L317,196 L277,167 L262,214 Z M317,290 L277,319 L262,272 L302,243 Z M262,214 L213,214 L228,167 L277,167 Z M351,243 L302,243 L317,196 L367,196 Z M391,272 L406,225 L367,196 L351,243 Z M406,167 L357,167 L342,120 L391,120 Z M446,196 L406,167 L367,196 L406,225 Z M446,196 L461,149 L422,120 L406,167 Z M461,149 L422,120 L461,91 L501,120 Z M511,243 L550,214 L535,167 L495,196 Z M511,243 L461,243 L446,196 L495,196 Z M535,167 L486,167 L501,120 L550,120 Z M575,196 L590,149 L550,120 L535,167 Z M550,120 L590,91 L575,44 L535,73 Z M550,120 L501,120 L486,73 L535,73 Z M590,91 L639,91 L655,44 L605,44 Z M590,149 L550,120 L590,91 L630,120 Z M422,120 L461,91 L446,44 L406,73 Z M391,120 L342,120 L357,73 L406,73 Z M357,167 L317,196 L302,149 L342,120 Z M605,196 L655,196 L639,149 L590,149 Z M655,196 L695,167 L679,120 L639,149 Z M679,120 L695,73 L655,44 L639,91 Z M679,120 L729,120 L744,73 L695,73 Z M695,167 L744,167 L729,120 L679,120 Z M768,149 L729,120 L768,91 L808,120 Z M839,120 L888,120 L873,73 L823,73 Z M808,120 L823,73 L784,44 L768,91 Z M928,149 L888,120 L928,91 L968,120 Z M912,196 L928,149 L888,120 L873,167 Z M823,167 L873,167 L888,120 L839,120 Z M784,196 L823,167 L808,120 L768,149 Z M878,243 L928,243 L912,196 L863,196 Z M823,225 L784,196 L823,167 L863,196 Z M839,272 L878,243 L863,196 L823,225 Z M823,319 L839,272 L799,243 L784,290 Z M823,319 L873,319 L888,272 L839,272 Z M928,243 L968,214 L952,167 L912,196 Z M912,348 L873,319 L912,290 L952,319 Z M928,394 L968,365 L952,319 L912,348 Z M952,319 L968,272 L928,243 L912,290 Z M952,319 L1002,319 L1017,272 L968,272 Z M968,365 L1017,365 L1002,319 L952,319 Z M1017,365 L1032,319 L1072,348 L1057,394 Z M1017,272 L977,243 L1017,214 L1057,243 Z M1032,319 L1072,290 L1057,243 L1017,272 Z M1032,319 L1072,348 L1112,319 L1072,290 Z M1057,243 L1072,196 L1032,167 L1017,214 Z M968,214 L1017,214 L1002,167 L952,167 Z M1146,365 L1161,319 L1201,348 L1185,394 Z M1112,319 L1161,319 L1146,272 L1096,272 Z M1096,365 L1146,365 L1161,319 L1112,319 Z M1057,394 L1106,394 L1121,441 L1072,441 Z M1106,394 L1146,365 L1161,412 L1121,441 Z M1121,441 L1161,470 L1201,441 L1161,412 Z M1106,488 L1121,441 L1161,470 L1146,517 Z M1146,517 L1185,488 L1201,535 L1161,564 Z M1057,488 L1106,488 L1121,441 L1072,441 Z M1017,517 L1057,546 L1096,517 L1057,488 Z M1096,517 L1146,517 L1161,564 L1112,564 Z M1057,546 L1096,517 L1112,564 L1072,593 Z M1057,640 L1106,640 L1121,686 L1072,686 Z M1057,640 L1106,640 L1121,593 L1072,593 Z M1161,564 L1201,593 L1241,564 L1201,535 Z M1106,640 L1146,668 L1185,640 L1146,611 Z M1146,611 L1161,564 L1201,593 L1185,640 Z M1146,668 L1185,640 L1201,686 L1161,715 Z M1161,715 L1201,744 L1241,715 L1201,686 Z M1201,686 L1250,686 L1265,640 L1216,640 Z M1201,593 L1250,593 L1265,640 L1216,640 Z M1146,762 L1161,715 L1201,744 L1185,791 Z M1106,791 L1146,762 L1161,809 L1121,838 Z M1096,762 L1146,762 L1161,715 L1112,715 Z M1057,791 L1106,791 L1121,838 L1072,838 Z M1057,733 L1072,686 L1112,715 L1096,762 Z M1017,668 L1057,640 L1072,686 L1032,715 Z M1017,762 L1057,791 L1096,762 L1057,733 Z M1002,809 L1017,762 L1057,791 L1041,838 Z M952,715 L1002,715 L1017,762 L968,762 Z M952,715 L1002,715 L1017,668 L968,668 Z M952,809 L1002,809 L1017,762 L968,762 Z M912,838 L873,867 L888,914 L928,885 Z M912,838 L962,838 L977,885 L928,885 Z M928,885 L912,931 L952,960 L968,914 Z M873,809 L888,762 L928,791 L912,838 Z M962,838 L1002,809 L1017,856 L977,885 Z M977,885 L1017,914 L1057,885 L1017,856 Z M1017,914 L1057,885 L1072,931 L1032,960 Z M1032,960 L1072,989 L1112,960 L1072,931 Z M1032,960 L1017,1007 L1057,1036 L1072,989 Z M1057,885 L1106,885 L1121,838 L1072,838 Z M968,914 L1017,914 L1002,960 L952,960 Z M952,960 L912,989 L928,1036 L968,1007 Z M952,960 L1002,960 L1017,1007 L968,1007 Z M912,931 L952,960 L912,989 L873,960 Z M823,960 L784,989 L799,1036 L839,1007 Z M823,960 L873,960 L888,1007 L839,1007 Z M839,1007 L823,1054 L863,1083 L878,1036 Z M784,931 L823,960 L784,989 L744,960 Z M839,914 L888,914 L873,960 L823,960 Z M823,867 L873,867 L888,914 L839,914 Z M784,838 L768,885 L808,914 L823,867 Z M823,809 L863,838 L823,867 L784,838 Z M823,809 L873,809 L888,762 L839,762 Z M768,885 L729,914 L744,960 L784,931 Z M734,838 L784,838 L768,885 L719,885 Z M719,791 L768,791 L784,838 L734,838 Z M695,809 L734,838 L695,867 L655,838 Z M679,914 L640,943 L655,989 L695,960 Z M679,914 L729,914 L744,960 L695,960 Z M695,960 L679,1007 L719,1036 L734,989 Z M590,943 L640,943 L655,989 L605,989 Z M590,885 L630,914 L590,943 L550,914 Z M575,838 L535,867 L550,914 L590,885 Z M575,838 L535,809 L495,838 L535,867 Z M550,914 L535,960 L575,989 L590,943 Z M550,914 L501,914 L486,960 L535,960 Z M605,838 L655,838 L640,885 L590,885 Z M590,791 L575,838 L535,809 L550,762 Z M590,791 L640,791 L655,838 L605,838 Z M655,838 L640,885 L679,914 L695,867 Z M679,762 L640,791 L655,838 L695,809 Z M679,762 L695,715 L655,686 L640,733 Z M679,762 L729,762 L744,715 L695,715 Z M630,762 L590,733 L550,762 L590,791 Z M729,762 L744,715 L784,744 L768,791 Z M784,686 L823,715 L784,744 L744,715 Z M784,686 L799,640 L839,668 L823,715 Z M823,715 L873,715 L888,762 L839,762 Z M863,686 L912,686 L928,640 L878,640 Z M808,762 L768,791 L784,838 L823,809 Z M873,715 L912,686 L928,733 L888,762 Z M888,762 L928,791 L968,762 L928,733 Z M912,686 L928,640 L968,668 L952,715 Z M912,593 L952,564 L968,611 L928,640 Z M977,640 L1017,668 L1057,640 L1017,611 Z M1017,611 L1032,564 L1072,593 L1057,640 Z M952,564 L1002,564 L1017,611 L968,611 Z M952,564 L1002,564 L1017,517 L968,517 Z M952,470 L1002,470 L1017,517 L968,517 Z M912,441 L928,394 L888,365 L873,412 Z M912,441 L962,441 L977,394 L928,394 Z M888,517 L928,546 L968,517 L928,488 Z M873,470 L912,441 L928,488 L888,517 Z M873,564 L888,517 L928,546 L912,593 Z M823,564 L873,564 L888,517 L839,517 Z M784,593 L823,564 L839,611 L799,640 Z M784,593 L744,564 L784,535 L823,564 Z M863,593 L912,593 L928,640 L878,640 Z M799,640 L839,668 L878,640 L839,611 Z M719,640 L679,668 L695,715 L734,686 Z M719,640 L679,611 L640,640 L679,668 Z M719,640 L734,593 L695,564 L679,611 Z M719,640 L768,640 L784,686 L734,686 Z M719,640 L768,640 L784,593 L734,593 Z M962,441 L977,394 L1017,423 L1002,470 Z M1002,470 L1041,441 L1057,488 L1017,517 Z M977,394 L1017,423 L1057,394 L1017,365 Z M590,733 L640,733 L655,686 L605,686 Z M535,715 L550,668 L511,640 L495,686 Z M535,715 L486,715 L501,762 L550,762 Z M511,791 L461,791 L446,838 L495,838 Z M486,715 L446,744 L461,791 L501,762 Z M486,715 L446,686 L406,715 L446,744 Z M461,791 L446,838 L406,809 L422,762 Z M446,838 L406,867 L422,914 L461,885 Z M446,838 L406,809 L367,838 L406,867 Z M406,867 L357,867 L342,914 L391,914 Z M495,838 L446,838 L461,885 L511,885 Z M317,838 L268,838 L253,885 L302,885 Z M357,867 L342,914 L302,885 L317,838 Z M302,885 L262,914 L277,960 L317,931 Z M268,838 L253,885 L213,856 L228,809 Z M253,885 L213,856 L173,885 L213,914 Z M213,914 L198,960 L158,931 L173,885 Z M158,838 L109,838 L124,885 L173,885 Z M109,838 L69,867 L84,914 L124,885 Z M124,791 L109,838 L69,809 L84,762 Z M198,960 L158,989 L173,1036 L213,1007 Z M198,960 L158,931 L118,960 L158,989 Z M253,1036 L213,1007 L173,1036 L213,1065 Z M262,1065 L213,1065 L228,1112 L277,1112 Z M302,1036 L262,1065 L277,1112 L317,1083 Z M317,989 L302,1036 L262,1007 L277,960 Z M351,1036 L302,1036 L317,1083 L367,1083 Z M391,1007 L351,1036 L367,1083 L406,1054 Z M406,960 L357,960 L342,1007 L391,1007 Z M391,914 L342,914 L357,960 L406,960 Z M446,989 L431,1036 L391,1007 L406,960 Z M357,960 L317,931 L277,960 L317,989 Z M277,960 L228,960 L213,1007 L262,1007 Z M262,914 L213,914 L228,960 L277,960 Z M486,960 L446,931 L406,960 L446,989 Z M495,989 L446,989 L461,1036 L511,1036 Z M511,1036 L495,1083 L535,1112 L550,1065 Z M511,1036 L461,1036 L446,1083 L495,1083 Z M535,960 L495,989 L511,1036 L550,1007 Z M550,1007 L590,1036 L550,1065 L511,1036 Z M590,1036 L640,1036 L655,1083 L605,1083 Z M605,1083 L655,1083 L640,1130 L590,1130 Z M575,1083 L535,1112 L550,1159 L590,1130 Z M605,989 L655,989 L640,1036 L590,1036 Z M655,1083 L640,1130 L679,1159 L695,1112 Z M679,1007 L719,1036 L679,1065 L640,1036 Z M695,1112 L744,1112 L729,1159 L679,1159 Z M719,1036 L679,1065 L695,1112 L734,1083 Z M719,1036 L768,1036 L784,1083 L734,1083 Z M734,989 L784,989 L768,1036 L719,1036 Z M784,1083 L768,1130 L808,1159 L823,1112 Z M823,1054 L863,1083 L823,1112 L784,1083 Z M823,1112 L873,1112 L888,1159 L839,1159 Z M768,1130 L808,1159 L768,1188 L729,1159 Z M808,1159 L768,1188 L784,1235 L823,1206 Z M679,1159 L640,1188 L655,1235 L695,1206 Z M679,1159 L729,1159 L744,1206 L695,1206 Z M590,1188 L640,1188 L655,1235 L605,1235 Z M550,1159 L535,1206 L575,1235 L590,1188 Z M550,1159 L501,1159 L486,1206 L535,1206 Z M461,1130 L501,1159 L461,1188 L422,1159 Z M446,1083 L406,1112 L422,1159 L461,1130 Z M446,1083 L406,1054 L367,1083 L406,1112 Z M422,1159 L406,1206 L446,1235 L461,1188 Z M406,1112 L357,1112 L342,1159 L391,1159 Z M391,1159 L342,1159 L357,1206 L406,1206 Z M357,1112 L342,1159 L302,1130 L317,1083 Z M535,1112 L486,1112 L501,1159 L550,1159 Z M590,1130 L630,1159 L590,1188 L550,1159 Z M839,1159 L888,1159 L873,1206 L823,1206 Z M928,1130 L968,1159 L928,1188 L888,1159 Z M912,1083 L873,1112 L888,1159 L928,1130 Z M968,1065 L1017,1065 L1002,1112 L952,1112 Z M1057,1036 L1017,1065 L1032,1112 L1072,1083 Z M1017,1007 L1057,1036 L1017,1065 L977,1036 Z M928,1036 L912,1083 L952,1112 L968,1065 Z M878,1036 L928,1036 L912,1083 L863,1083 Z M1146,914 L1185,885 L1201,931 L1161,960 Z M1112,960 L1161,960 L1146,1007 L1096,1007 Z M1096,914 L1146,914 L1161,960 L1112,960 Z M1106,885 L1121,838 L1161,867 L1146,914 Z M1121,838 L1161,867 L1201,838 L1161,809 Z M501,914 L486,960 L446,931 L461,885 Z M495,686 L446,686 L461,640 L511,640 Z M495,593 L446,593 L461,640 L511,640 Z M535,564 L495,593 L511,640 L550,611 Z M535,564 L486,564 L501,517 L550,517 Z M486,564 L446,535 L406,564 L446,593 Z M486,564 L501,517 L461,488 L446,535 Z M839,365 L888,365 L873,319 L823,319 Z M784,348 L744,319 L784,290 L823,319 Z M734,290 L784,290 L768,243 L719,243 Z M719,243 L734,196 L695,167 L679,214 Z M719,243 L768,243 L784,196 L734,196 Z M695,319 L734,290 L719,243 L679,272 Z M679,272 L640,243 L679,214 L719,243 Z M605,290 L655,290 L640,243 L590,243 Z M590,243 L640,243 L655,196 L605,196 Z M550,272 L511,243 L550,214 L590,243 Z M495,290 L446,290 L461,243 L511,243 Z M446,290 L406,319 L391,272 L431,243 Z M406,319 L357,319 L342,272 L391,272 Z M357,319 L317,290 L277,319 L317,348 Z M262,365 L213,365 L228,319 L277,319 Z M511,488 L461,488 L446,441 L495,441 Z ")},TL={name:"Penrose14",thinShape:new Bt("M676,613 L691,569 L654,596 L640,640 Z M676,666 L640,640 L654,683 L691,710 Z M580,596 L543,569 L557,613 L594,640 Z M580,596 L594,553 L608,596 L594,640 Z M580,683 L594,640 L608,683 L594,726 Z M580,683 L594,640 L557,666 L543,710 Z M631,526 L676,526 L640,553 L594,553 Z M631,526 L676,526 L640,499 L594,499 Z M557,526 L520,499 L506,455 L543,482 Z M557,526 L511,526 L474,499 L520,499 Z M676,526 L691,482 L728,455 L713,499 Z M676,526 L722,526 L759,499 L713,499 Z M796,526 L759,499 L773,542 L810,569 Z M796,526 L810,482 L824,526 L810,569 Z M759,412 L773,368 L810,342 L796,385 Z M810,428 L824,385 L810,342 L796,385 Z M810,482 L856,482 L893,455 L847,455 Z M728,455 L691,428 L676,385 L713,412 Z M713,412 L759,412 L722,385 L676,385 Z M594,412 L640,412 L676,385 L631,385 Z M594,499 L608,455 L594,412 L580,455 Z M543,428 L557,385 L520,412 L506,455 Z M557,385 L511,385 L474,412 L520,412 Z M543,342 L557,298 L594,271 L580,315 Z M543,342 L497,342 L460,315 L506,315 Z M594,358 L608,315 L594,271 L580,315 Z M474,412 L437,385 L423,342 L460,368 Z M423,482 L377,482 L340,455 L386,455 Z M423,428 L437,385 L423,342 L409,385 Z M423,428 L377,428 L340,455 L386,455 Z M363,385 L377,342 L340,368 L326,412 Z M340,455 L295,455 L258,482 L303,482 Z M326,412 L280,412 L243,385 L289,385 Z M326,499 L340,455 L303,482 L289,526 Z M258,482 L221,455 L206,412 L243,439 Z M206,499 L221,455 L206,412 L192,455 Z M206,499 L161,499 L124,526 L170,526 Z M229,569 L243,526 L206,553 L192,596 Z M340,596 L303,569 L289,526 L326,553 Z M423,569 L437,526 L423,482 L409,526 Z M423,569 L377,569 L340,596 L386,596 Z M460,542 L474,499 L437,526 L423,569 Z M409,613 L423,569 L386,596 L372,640 Z M446,640 L460,596 L474,640 L460,683 Z M409,666 L372,640 L386,683 L423,710 Z M423,710 L409,753 L423,797 L437,753 Z M423,710 L377,710 L340,683 L386,683 Z M460,737 L423,710 L437,753 L474,780 Z M340,683 L326,726 L289,753 L303,710 Z M326,780 L289,753 L303,797 L340,824 Z M229,710 L192,683 L206,726 L243,753 Z M258,797 L243,840 L206,867 L221,824 Z M206,780 L192,824 L206,867 L221,824 Z M206,780 L161,780 L124,753 L170,753 Z M243,666 L229,710 L243,753 L258,710 Z M326,640 L280,640 L243,666 L289,666 Z M326,640 L280,640 L243,613 L289,613 Z M243,613 L258,569 L243,526 L229,569 Z M192,596 L147,596 L110,569 L155,569 Z M192,683 L147,683 L110,710 L155,710 Z M161,640 L124,613 L110,569 L147,596 Z M161,640 L147,683 L110,710 L124,666 Z M124,753 L110,797 L73,824 L87,780 Z M73,737 L59,780 L73,824 L87,780 Z M87,640 L73,683 L59,640 L73,596 Z M73,542 L87,499 L73,455 L59,499 Z M73,455 L87,412 L73,368 L59,412 Z M124,526 L87,499 L73,455 L110,482 Z M110,428 L124,385 L87,412 L73,455 Z M206,412 L170,385 L155,342 L192,368 Z M206,412 L161,412 L124,385 L170,385 Z M243,385 L258,342 L243,298 L229,342 Z M206,271 L161,271 L124,298 L170,298 Z M243,244 L258,201 L243,157 L229,201 Z M192,315 L206,271 L170,298 L155,342 Z M326,271 L280,271 L243,298 L289,298 Z M326,271 L280,271 L243,244 L289,244 Z M340,228 L303,201 L289,157 L326,184 Z M409,298 L363,298 L326,271 L372,271 Z M423,201 L437,157 L423,114 L409,157 Z M423,201 L377,201 L340,228 L386,228 Z M460,228 L474,184 L511,157 L497,201 Z M446,271 L460,228 L423,255 L409,298 Z M506,228 L460,228 L497,201 L543,201 Z M543,114 L557,70 L594,44 L580,87 Z M543,114 L497,114 L460,87 L506,87 Z M594,130 L608,87 L594,44 L580,87 Z M594,184 L639,184 L676,157 L631,157 Z M511,157 L474,130 L460,87 L497,114 Z M423,114 L377,114 L340,87 L386,87 Z M326,130 L340,87 L303,114 L289,157 Z M229,201 L243,157 L206,184 L192,228 Z M691,114 L654,87 L639,44 L676,70 Z M691,114 L736,114 L773,87 L728,87 Z M810,114 L856,114 L893,87 L847,87 Z M722,157 L736,114 L773,87 L759,130 Z M810,201 L824,157 L810,114 L796,157 Z M773,228 L736,201 L722,157 L759,184 Z M728,228 L773,228 L736,201 L691,201 Z M640,271 L654,228 L691,201 L676,244 Z M594,271 L557,244 L543,201 L580,228 Z M594,271 L608,228 L594,184 L580,228 Z M631,157 L676,157 L639,130 L594,130 Z M691,342 L654,315 L640,271 L676,298 Z M691,342 L736,342 L773,315 L728,315 Z M773,315 L787,271 L773,228 L759,271 Z M824,298 L787,271 L773,228 L810,255 Z M824,298 L870,298 L907,271 L861,271 Z M856,342 L870,298 L907,271 L893,315 Z M907,271 L953,271 L990,244 L944,244 Z M893,228 L907,184 L944,157 L930,201 Z M944,298 L990,298 L953,271 L907,271 Z M990,244 L1004,201 L990,157 L976,201 Z M1027,271 L1073,271 L1109,298 L1064,298 Z M990,385 L1004,342 L990,298 L976,342 Z M907,412 L870,385 L856,342 L893,368 Z M907,412 L953,412 L990,385 L944,385 Z M893,455 L930,482 L944,526 L907,499 Z M893,455 L939,455 L976,482 L930,482 Z M976,482 L990,439 L1027,412 L1013,455 Z M990,526 L1027,553 L1041,596 L1004,569 Z M1013,455 L1027,412 L1041,455 L1027,499 Z M893,596 L907,553 L944,526 L930,569 Z M976,569 L990,526 L1004,569 L990,613 Z M1041,596 L1087,596 L1124,569 L1078,569 Z M1073,640 L1109,666 L1124,710 L1087,683 Z M1073,640 L1087,596 L1124,569 L1109,613 Z M1146,640 L1161,596 L1175,640 L1161,683 Z M1161,683 L1206,683 L1243,710 L1198,710 Z M1161,596 L1206,596 L1243,569 L1198,569 Z M1206,455 L1243,482 L1257,526 L1220,499 Z M1161,542 L1206,542 L1243,569 L1198,569 Z M1146,499 L1161,455 L1175,499 L1161,542 Z M1109,526 L1124,482 L1161,455 L1146,499 Z M1027,499 L1073,499 L1109,526 L1064,526 Z M1027,412 L1041,368 L1078,342 L1064,385 Z M1027,412 L1073,412 L1109,385 L1064,385 Z M1109,385 L1146,412 L1161,455 L1124,428 Z M1146,412 L1161,368 L1175,412 L1161,455 Z M1041,315 L1078,342 L1064,298 L1027,271 Z M1041,228 L1004,201 L990,157 L1027,184 Z M944,157 L907,130 L893,87 L930,114 Z M1161,737 L1206,737 L1243,710 L1198,710 Z M1146,780 L1161,737 L1175,780 L1161,824 Z M1109,753 L1146,780 L1161,824 L1124,797 Z M1027,780 L1073,780 L1109,753 L1064,753 Z M1041,683 L1087,683 L1124,710 L1078,710 Z M990,753 L1004,710 L1041,683 L1027,726 Z M976,710 L990,666 L1004,710 L990,753 Z M976,797 L1013,824 L1027,867 L990,840 Z M893,824 L907,780 L944,753 L930,797 Z M893,824 L939,824 L976,797 L930,797 Z M907,867 L893,911 L856,937 L870,894 Z M907,867 L953,867 L990,894 L944,894 Z M847,824 L893,824 L856,851 L810,851 Z M990,894 L976,937 L990,981 L1004,937 Z M1027,867 L1064,894 L1078,937 L1041,911 Z M1027,867 L1073,867 L1109,894 L1064,894 Z M944,981 L990,981 L953,1008 L907,1008 Z M856,937 L893,964 L907,1008 L870,981 Z M824,981 L810,1024 L773,1051 L787,1008 Z M824,981 L870,981 L907,1008 L861,1008 Z M773,964 L759,1008 L773,1051 L787,1008 Z M810,851 L796,894 L810,937 L824,894 Z M810,797 L856,797 L893,824 L847,824 Z M759,867 L796,894 L810,937 L773,911 Z M728,824 L713,867 L676,894 L691,851 Z M713,867 L759,867 L722,894 L676,894 Z M691,937 L676,981 L640,1008 L654,964 Z M691,937 L736,937 L773,964 L728,964 Z M631,894 L676,894 L640,921 L594,921 Z M594,921 L580,964 L594,1008 L608,964 Z M594,867 L640,867 L676,894 L631,894 Z M557,894 L511,894 L474,867 L520,867 Z M594,780 L580,824 L594,867 L608,824 Z M676,753 L713,780 L728,824 L691,797 Z M676,753 L722,753 L759,780 L713,780 Z M631,753 L676,753 L640,780 L594,780 Z M631,753 L676,753 L640,726 L594,726 Z M810,710 L824,666 L861,640 L847,683 Z M810,710 L856,710 L893,683 L847,683 Z M796,753 L810,710 L824,753 L810,797 Z M796,753 L810,710 L773,737 L759,780 Z M893,683 L930,710 L944,753 L907,726 Z M907,640 L953,640 L990,613 L944,613 Z M907,640 L953,640 L990,666 L944,666 Z M810,569 L847,596 L861,640 L824,613 Z M810,569 L856,569 L893,596 L847,596 Z M759,640 L773,596 L787,640 L773,683 Z M728,596 L773,596 L736,569 L691,569 Z M728,683 L773,683 L736,710 L691,710 Z M557,753 L543,797 L506,824 L520,780 Z M557,753 L511,753 L474,780 L520,780 Z M543,710 L497,710 L460,683 L506,683 Z M474,867 L460,911 L423,937 L437,894 Z M423,851 L409,894 L423,937 L437,894 Z M423,851 L377,851 L340,824 L386,824 Z M423,797 L377,797 L340,824 L386,824 Z M543,851 L506,824 L520,867 L557,894 Z M340,824 L295,824 L258,797 L303,797 Z M326,867 L280,867 L243,894 L289,894 Z M243,894 L229,937 L243,981 L258,937 Z M206,867 L192,911 L155,937 L170,894 Z M206,867 L161,867 L124,894 L170,894 Z M110,851 L73,824 L87,867 L124,894 Z M192,964 L155,937 L170,981 L206,1008 Z M206,1008 L161,1008 L124,981 L170,981 Z M326,1008 L280,1008 L243,1035 L289,1035 Z M326,1008 L280,1008 L243,981 L289,981 Z M377,937 L363,981 L326,1008 L340,964 Z M363,894 L326,867 L340,911 L377,937 Z M460,964 L446,1008 L460,1051 L474,1008 Z M409,981 L363,981 L326,1008 L372,1008 Z M446,1008 L409,981 L423,1024 L460,1051 Z M460,1051 L497,1078 L511,1122 L474,1095 Z M423,1078 L409,1122 L423,1165 L437,1122 Z M423,1078 L377,1078 L340,1051 L386,1051 Z M506,1051 L460,1051 L497,1078 L543,1078 Z M594,1008 L580,1051 L594,1095 L608,1051 Z M594,1008 L580,1051 L543,1078 L557,1035 Z M640,1008 L676,1035 L691,1078 L654,1051 Z M728,1051 L773,1051 L736,1078 L691,1078 Z M773,1051 L759,1095 L722,1122 L736,1078 Z M810,1078 L796,1122 L810,1165 L824,1122 Z M722,1122 L759,1149 L773,1192 L736,1165 Z M810,1165 L856,1165 L893,1192 L847,1192 Z M691,1165 L676,1209 L640,1235 L654,1192 Z M691,1165 L736,1165 L773,1192 L728,1192 Z M594,1149 L580,1192 L594,1235 L608,1192 Z M631,1122 L676,1122 L640,1149 L594,1149 Z M594,1095 L640,1095 L676,1122 L631,1122 Z M543,1165 L580,1192 L594,1235 L557,1209 Z M543,1165 L497,1165 L460,1192 L506,1192 Z M511,1122 L497,1165 L460,1192 L474,1149 Z M423,1165 L377,1165 L340,1192 L386,1192 Z M326,1149 L289,1122 L303,1165 L340,1192 Z M229,1078 L192,1051 L206,1095 L243,1122 Z M243,1035 L229,1078 L243,1122 L258,1078 Z M340,1051 L326,1095 L289,1122 L303,1078 Z M944,1122 L930,1165 L893,1192 L907,1149 Z M893,1051 L930,1078 L944,1122 L907,1095 Z M907,1008 L953,1008 L990,1035 L944,1035 Z M847,1051 L893,1051 L856,1078 L810,1078 Z M990,1035 L976,1078 L990,1122 L1004,1078 Z M1027,1008 L1073,1008 L1109,981 L1064,981 Z M1041,1051 L1027,1095 L990,1122 L1004,1078 Z M1041,964 L1027,1008 L1064,981 L1078,937 Z M1109,894 L1124,851 L1161,824 L1146,867 Z M1146,867 L1161,824 L1175,867 L1161,911 Z M1206,824 L1220,780 L1257,753 L1243,797 Z M543,937 L580,964 L594,1008 L557,981 Z M543,937 L497,937 L460,964 L506,964 Z M73,824 L59,867 L73,911 L87,867 Z M543,569 L497,569 L460,596 L506,596 Z M1013,824 L1027,780 L1041,824 L1027,867 Z M847,455 L893,455 L856,428 L810,428 Z M847,228 L893,228 L856,201 L810,201 Z M460,315 L474,271 L460,228 L446,271 Z M377,342 L340,315 L326,271 L363,298 Z M631,385 L676,385 L640,358 L594,358 Z "),thickShape:new Bt("M594,640 L557,613 L520,640 L557,666 Z M594,640 L640,640 L654,683 L608,683 Z M594,640 L640,640 L654,596 L608,596 Z M580,596 L594,553 L557,526 L543,569 Z M580,683 L543,710 L557,753 L594,726 Z M594,553 L640,553 L654,596 L608,596 Z M631,526 L594,499 L557,526 L594,553 Z M676,526 L640,553 L654,596 L691,569 Z M676,526 L691,482 L654,455 L640,499 Z M676,526 L722,526 L736,569 L691,569 Z M713,499 L759,499 L773,455 L728,455 Z M691,482 L654,455 L691,428 L728,455 Z M722,526 L759,499 L773,542 L736,569 Z M796,526 L810,482 L773,455 L759,499 Z M773,455 L810,428 L796,385 L759,412 Z M759,412 L773,368 L736,342 L722,385 Z M810,428 L856,428 L870,385 L824,385 Z M810,482 L773,455 L810,428 L847,455 Z M810,482 L856,482 L870,526 L824,526 Z M728,455 L773,455 L759,412 L713,412 Z M676,385 L691,342 L654,315 L640,358 Z M676,385 L722,385 L736,342 L691,342 Z M654,455 L691,428 L676,385 L640,412 Z M608,455 L654,455 L640,412 L594,412 Z M594,412 L557,385 L594,358 L631,385 Z M594,499 L557,526 L543,482 L580,455 Z M594,499 L640,499 L654,455 L608,455 Z M580,455 L543,428 L506,455 L543,482 Z M580,455 L594,412 L557,385 L543,428 Z M506,455 L460,455 L474,412 L520,412 Z M557,385 L594,358 L580,315 L543,342 Z M557,385 L511,385 L497,342 L543,342 Z M543,342 L557,298 L520,271 L506,315 Z M594,358 L640,358 L654,315 L608,315 Z M511,385 L474,412 L460,368 L497,342 Z M497,342 L460,315 L423,342 L460,368 Z M460,455 L423,428 L386,455 L423,482 Z M460,455 L474,412 L437,385 L423,428 Z M474,499 L437,526 L423,482 L460,455 Z M423,428 L377,428 L363,385 L409,385 Z M409,385 L363,385 L377,342 L423,342 Z M377,428 L340,455 L326,412 L363,385 Z M340,455 L295,455 L280,412 L326,412 Z M326,412 L340,368 L303,342 L289,385 Z M295,455 L258,482 L243,439 L280,412 Z M280,412 L243,385 L206,412 L243,439 Z M243,526 L206,499 L170,526 L206,553 Z M243,526 L258,482 L221,455 L206,499 Z M206,499 L161,499 L147,455 L192,455 Z M289,526 L243,526 L258,482 L303,482 Z M303,569 L258,569 L243,526 L289,526 Z M363,526 L326,499 L289,526 L326,553 Z M363,526 L377,482 L340,455 L326,499 Z M377,569 L340,596 L326,553 L363,526 Z M409,526 L363,526 L377,482 L423,482 Z M423,569 L377,569 L363,526 L409,526 Z M372,640 L326,640 L340,683 L386,683 Z M372,640 L326,640 L340,596 L386,596 Z M446,640 L409,666 L423,710 L460,683 Z M446,640 L409,613 L372,640 L409,666 Z M446,640 L460,596 L423,569 L409,613 Z M423,710 L377,710 L363,753 L409,753 Z M409,753 L363,753 L377,797 L423,797 Z M377,710 L363,753 L326,726 L340,683 Z M363,753 L326,780 L340,824 L377,797 Z M363,753 L326,726 L289,753 L326,780 Z M289,753 L243,753 L258,797 L303,797 Z M303,710 L258,710 L243,753 L289,753 Z M243,753 L206,780 L221,824 L258,797 Z M243,753 L206,726 L170,753 L206,780 Z M206,780 L161,780 L147,824 L192,824 Z M243,666 L229,710 L192,683 L206,640 Z M280,640 L243,613 L206,640 L243,666 Z M206,640 L161,640 L147,596 L192,596 Z M206,640 L161,640 L147,683 L192,683 Z M289,666 L243,666 L258,710 L303,710 Z M326,640 L289,666 L303,710 L340,683 Z M326,640 L340,596 L303,569 L289,613 Z M289,613 L243,613 L258,569 L303,569 Z M243,613 L206,640 L192,596 L229,569 Z M192,596 L206,553 L170,526 L155,569 Z M192,683 L155,710 L170,753 L206,726 Z M161,640 L124,613 L87,640 L124,666 Z M124,666 L110,710 L73,683 L87,640 Z M124,613 L87,640 L73,596 L110,569 Z M110,710 L73,737 L87,780 L124,753 Z M110,710 L73,683 L36,710 L73,737 Z M73,683 L27,683 L13,640 L59,640 Z M155,710 L110,710 L124,753 L170,753 Z M73,596 L27,596 L13,640 L59,640 Z M110,569 L73,542 L36,569 L73,596 Z M110,569 L124,526 L87,499 L73,542 Z M161,499 L124,526 L110,482 L147,455 Z M155,569 L110,569 L124,526 L170,526 Z M147,455 L110,428 L73,455 L110,482 Z M147,455 L161,412 L124,385 L110,428 Z M192,455 L147,455 L161,412 L206,412 Z M243,385 L206,412 L192,368 L229,342 Z M170,385 L124,385 L110,342 L155,342 Z M155,342 L110,342 L124,298 L170,298 Z M124,385 L87,412 L73,368 L110,342 Z M243,244 L206,271 L192,228 L229,201 Z M229,342 L192,315 L155,342 L192,368 Z M229,342 L243,298 L206,271 L192,315 Z M280,271 L243,244 L206,271 L243,298 Z M303,342 L258,342 L243,298 L289,298 Z M326,271 L340,228 L303,201 L289,244 Z M340,315 L303,342 L289,298 L326,271 Z M289,244 L243,244 L258,201 L303,201 Z M372,271 L326,271 L340,228 L386,228 Z M409,298 L423,255 L386,228 L372,271 Z M423,201 L377,201 L363,157 L409,157 Z M460,228 L423,201 L386,228 L423,255 Z M460,228 L474,184 L437,157 L423,201 Z M474,184 L437,157 L474,130 L511,157 Z M520,271 L557,244 L543,201 L506,228 Z M520,271 L474,271 L460,228 L506,228 Z M543,201 L497,201 L511,157 L557,157 Z M580,228 L594,184 L557,157 L543,201 Z M557,157 L594,130 L580,87 L543,114 Z M557,157 L511,157 L497,114 L543,114 Z M543,114 L557,70 L520,44 L506,87 Z M594,130 L639,130 L654,87 L608,87 Z M594,184 L557,157 L594,130 L631,157 Z M437,157 L474,130 L460,87 L423,114 Z M423,114 L386,87 L423,60 L460,87 Z M409,157 L363,157 L377,114 L423,114 Z M363,157 L326,130 L289,157 L326,184 Z M363,157 L377,114 L340,87 L326,130 Z M377,201 L340,228 L326,184 L363,157 Z M303,201 L258,201 L243,157 L289,157 Z M506,87 L460,87 L474,44 L520,44 Z M557,70 L520,44 L557,17 L594,44 Z M608,87 L654,87 L639,44 L594,44 Z M676,70 L639,44 L676,17 L713,44 Z M691,114 L728,87 L713,44 L676,70 Z M728,87 L773,87 L759,44 L713,44 Z M810,114 L773,87 L810,60 L847,87 Z M796,157 L810,114 L773,87 L759,130 Z M810,201 L856,201 L870,157 L824,157 Z M759,184 L722,157 L759,130 L796,157 Z M773,228 L810,201 L796,157 L759,184 Z M810,255 L773,228 L810,201 L847,228 Z M691,201 L736,201 L722,157 L676,157 Z M713,271 L728,228 L691,201 L676,244 Z M713,271 L759,271 L773,228 L728,228 Z M728,315 L773,315 L759,271 L713,271 Z M676,298 L640,271 L676,244 L713,271 Z M654,228 L691,201 L676,157 L639,184 Z M594,271 L640,271 L654,228 L608,228 Z M608,315 L654,315 L640,271 L594,271 Z M557,298 L520,271 L557,244 L594,271 Z M608,228 L654,228 L639,184 L594,184 Z M676,157 L691,114 L654,87 L639,130 Z M676,157 L722,157 L736,114 L691,114 Z M691,342 L728,315 L713,271 L676,298 Z M773,368 L736,342 L773,315 L810,342 Z M810,342 L824,298 L787,271 L773,315 Z M810,342 L856,342 L870,298 L824,298 Z M824,385 L870,385 L856,342 L810,342 Z M824,298 L861,271 L847,228 L810,255 Z M893,368 L856,342 L893,315 L930,342 Z M907,271 L944,244 L930,201 L893,228 Z M893,228 L907,184 L870,157 L856,201 Z M944,244 L990,244 L976,201 L930,201 Z M861,271 L907,271 L893,228 L847,228 Z M990,298 L953,271 L990,244 L1027,271 Z M1004,342 L1041,315 L1027,271 L990,298 Z M1004,342 L1041,368 L1078,342 L1041,315 Z M1027,271 L1041,228 L1004,201 L990,244 Z M1027,271 L1073,271 L1087,228 L1041,228 Z M990,385 L1004,342 L1041,368 L1027,412 Z M930,342 L944,298 L907,271 L893,315 Z M930,342 L976,342 L990,298 L944,298 Z M944,385 L990,385 L976,342 L930,342 Z M907,412 L944,385 L930,342 L893,368 Z M893,455 L907,412 L870,385 L856,428 Z M893,455 L939,455 L953,412 L907,412 Z M953,412 L990,439 L1027,412 L990,385 Z M939,455 L953,412 L990,439 L976,482 Z M976,482 L1013,455 L1027,499 L990,526 Z M990,526 L1027,553 L1064,526 L1027,499 Z M930,482 L976,482 L990,526 L944,526 Z M930,569 L976,569 L990,613 L944,613 Z M930,569 L976,569 L990,526 L944,526 Z M893,596 L930,569 L944,613 L907,640 Z M990,613 L1004,569 L1041,596 L1027,640 Z M953,640 L990,666 L1027,640 L990,613 Z M1027,640 L1073,640 L1087,683 L1041,683 Z M1027,640 L1073,640 L1087,596 L1041,596 Z M1027,553 L1064,526 L1078,569 L1041,596 Z M1124,569 L1161,596 L1198,569 L1161,542 Z M1073,640 L1109,666 L1146,640 L1109,613 Z M1109,613 L1124,569 L1161,596 L1146,640 Z M1109,666 L1146,640 L1161,683 L1124,710 Z M1124,710 L1161,737 L1198,710 L1161,683 Z M1161,683 L1206,683 L1220,640 L1175,640 Z M1161,596 L1206,596 L1220,640 L1175,640 Z M1206,596 L1243,569 L1257,613 L1220,640 Z M1206,542 L1220,499 L1257,526 L1243,569 Z M1161,455 L1206,455 L1220,499 L1175,499 Z M1161,455 L1206,455 L1220,412 L1175,412 Z M1161,542 L1206,542 L1220,499 L1175,499 Z M1109,526 L1146,499 L1161,542 L1124,569 Z M1073,499 L1087,455 L1124,482 L1109,526 Z M1064,526 L1109,526 L1124,569 L1078,569 Z M1027,499 L1073,499 L1087,455 L1041,455 Z M1027,412 L1073,412 L1087,455 L1041,455 Z M1087,455 L1124,482 L1161,455 L1124,428 Z M1073,412 L1109,385 L1124,428 L1087,455 Z M1109,385 L1124,342 L1161,368 L1146,412 Z M1124,342 L1161,315 L1146,271 L1109,298 Z M1124,342 L1161,368 L1198,342 L1161,315 Z M1064,385 L1109,385 L1124,342 L1078,342 Z M1078,342 L1124,342 L1109,298 L1064,298 Z M1073,271 L1087,228 L1124,255 L1109,298 Z M944,157 L990,157 L976,114 L930,114 Z M907,184 L870,157 L907,130 L944,157 Z M930,201 L976,201 L990,157 L944,157 Z M870,157 L907,130 L893,87 L856,114 Z M824,157 L870,157 L856,114 L810,114 Z M1161,368 L1206,368 L1220,412 L1175,412 Z M1206,683 L1220,640 L1257,666 L1243,710 Z M1206,737 L1243,710 L1257,753 L1220,780 Z M1161,737 L1206,737 L1220,780 L1175,780 Z M1161,824 L1206,824 L1220,867 L1175,867 Z M1161,824 L1206,824 L1220,780 L1175,780 Z M1109,753 L1124,710 L1161,737 L1146,780 Z M1073,780 L1109,753 L1124,797 L1087,824 Z M1064,753 L1109,753 L1124,710 L1078,710 Z M1027,780 L1073,780 L1087,824 L1041,824 Z M1027,726 L1041,683 L1078,710 L1064,753 Z M990,666 L1027,640 L1041,683 L1004,710 Z M990,753 L1027,780 L1064,753 L1027,726 Z M976,797 L990,753 L1027,780 L1013,824 Z M930,710 L976,710 L990,753 L944,753 Z M930,710 L976,710 L990,666 L944,666 Z M930,797 L976,797 L990,753 L944,753 Z M893,824 L856,851 L870,894 L907,867 Z M893,824 L939,824 L953,867 L907,867 Z M907,867 L893,911 L930,937 L944,894 Z M856,797 L870,753 L907,780 L893,824 Z M939,824 L976,797 L990,840 L953,867 Z M953,867 L990,894 L1027,867 L990,840 Z M990,894 L1027,867 L1041,911 L1004,937 Z M1004,937 L1041,964 L1078,937 L1041,911 Z M1004,937 L990,981 L1027,1008 L1041,964 Z M1027,867 L1073,867 L1087,824 L1041,824 Z M944,894 L990,894 L976,937 L930,937 Z M930,937 L893,964 L907,1008 L944,981 Z M930,937 L976,937 L990,981 L944,981 Z M893,911 L930,937 L893,964 L856,937 Z M810,937 L773,964 L787,1008 L824,981 Z M810,937 L856,937 L870,981 L824,981 Z M824,981 L810,1024 L847,1051 L861,1008 Z M773,911 L810,937 L773,964 L736,937 Z M824,894 L870,894 L856,937 L810,937 Z M810,851 L856,851 L870,894 L824,894 Z M773,824 L759,867 L796,894 L810,851 Z M810,797 L847,824 L810,851 L773,824 Z M810,797 L856,797 L870,753 L824,753 Z M759,867 L722,894 L736,937 L773,911 Z M728,824 L773,824 L759,867 L713,867 Z M713,780 L759,780 L773,824 L728,824 Z M691,797 L728,824 L691,851 L654,824 Z M676,894 L640,921 L654,964 L691,937 Z M676,894 L722,894 L736,937 L691,937 Z M691,937 L676,981 L713,1008 L728,964 Z M594,921 L640,921 L654,964 L608,964 Z M594,867 L631,894 L594,921 L557,894 Z M580,824 L543,851 L557,894 L594,867 Z M580,824 L543,797 L506,824 L543,851 Z M557,894 L543,937 L580,964 L594,921 Z M557,894 L511,894 L497,937 L543,937 Z M608,824 L654,824 L640,867 L594,867 Z M594,780 L580,824 L543,797 L557,753 Z M594,780 L640,780 L654,824 L608,824 Z M654,824 L640,867 L676,894 L691,851 Z M676,753 L640,780 L654,824 L691,797 Z M676,753 L691,710 L654,683 L640,726 Z M676,753 L722,753 L736,710 L691,710 Z M631,753 L594,726 L557,753 L594,780 Z M722,753 L736,710 L773,737 L759,780 Z M773,683 L810,710 L773,737 L736,710 Z M773,683 L787,640 L824,666 L810,710 Z M810,710 L856,710 L870,753 L824,753 Z M847,683 L893,683 L907,640 L861,640 Z M796,753 L759,780 L773,824 L810,797 Z M856,710 L893,683 L907,726 L870,753 Z M870,753 L907,780 L944,753 L907,726 Z M893,683 L907,640 L944,666 L930,710 Z M847,596 L893,596 L907,640 L861,640 Z M810,569 L856,569 L870,526 L824,526 Z M787,640 L824,666 L861,640 L824,613 Z M773,596 L810,569 L824,613 L787,640 Z M773,596 L736,569 L773,542 L810,569 Z M713,640 L676,666 L691,710 L728,683 Z M713,640 L676,613 L640,640 L676,666 Z M713,640 L728,596 L691,569 L676,613 Z M713,640 L759,640 L773,683 L728,683 Z M713,640 L759,640 L773,596 L728,596 Z M856,569 L870,526 L907,553 L893,596 Z M870,526 L907,553 L944,526 L907,499 Z M856,482 L893,455 L907,499 L870,526 Z M594,726 L640,726 L654,683 L608,683 Z M543,710 L557,666 L520,640 L506,683 Z M543,710 L497,710 L511,753 L557,753 Z M520,780 L474,780 L460,824 L506,824 Z M497,710 L460,737 L474,780 L511,753 Z M497,710 L460,683 L423,710 L460,737 Z M474,780 L460,824 L423,797 L437,753 Z M460,824 L423,851 L437,894 L474,867 Z M460,824 L423,797 L386,824 L423,851 Z M423,851 L377,851 L363,894 L409,894 Z M506,824 L460,824 L474,867 L520,867 Z M340,824 L295,824 L280,867 L326,867 Z M377,851 L363,894 L326,867 L340,824 Z M326,867 L289,894 L303,937 L340,911 Z M295,824 L280,867 L243,840 L258,797 Z M280,867 L243,840 L206,867 L243,894 Z M243,894 L229,937 L192,911 L206,867 Z M192,824 L147,824 L161,867 L206,867 Z M170,894 L124,894 L110,937 L155,937 Z M147,824 L110,851 L124,894 L161,867 Z M147,824 L110,797 L73,824 L110,851 Z M124,894 L110,937 L73,911 L87,867 Z M155,937 L110,937 L124,981 L170,981 Z M229,937 L192,964 L206,1008 L243,981 Z M229,937 L192,911 L155,937 L192,964 Z M280,1008 L243,981 L206,1008 L243,1035 Z M326,1008 L289,1035 L303,1078 L340,1051 Z M303,937 L258,937 L243,981 L289,981 Z M289,894 L243,894 L258,937 L303,937 Z M340,964 L326,1008 L289,981 L303,937 Z M377,937 L340,911 L303,937 L340,964 Z M423,937 L377,937 L363,981 L409,981 Z M409,894 L363,894 L377,937 L423,937 Z M460,964 L446,1008 L409,981 L423,937 Z M409,981 L372,1008 L386,1051 L423,1024 Z M372,1008 L326,1008 L340,1051 L386,1051 Z M460,1051 L423,1078 L437,1122 L474,1095 Z M460,1051 L423,1024 L386,1051 L423,1078 Z M474,1095 L511,1122 L474,1149 L437,1122 Z M423,1078 L377,1078 L363,1122 L409,1122 Z M543,1078 L497,1078 L511,1122 L557,1122 Z M520,1008 L506,1051 L543,1078 L557,1035 Z M520,1008 L474,1008 L460,1051 L506,1051 Z M506,964 L460,964 L474,1008 L520,1008 Z M557,981 L594,1008 L557,1035 L520,1008 Z M594,1008 L640,1008 L654,1051 L608,1051 Z M608,1051 L654,1051 L640,1095 L594,1095 Z M580,1051 L543,1078 L557,1122 L594,1095 Z M608,964 L654,964 L640,1008 L594,1008 Z M654,1051 L640,1095 L676,1122 L691,1078 Z M676,981 L713,1008 L676,1035 L640,1008 Z M691,1078 L736,1078 L722,1122 L676,1122 Z M713,1008 L676,1035 L691,1078 L728,1051 Z M713,1008 L759,1008 L773,1051 L728,1051 Z M728,964 L773,964 L759,1008 L713,1008 Z M773,1051 L759,1095 L796,1122 L810,1078 Z M810,1024 L847,1051 L810,1078 L773,1051 Z M810,1078 L856,1078 L870,1122 L824,1122 Z M759,1095 L796,1122 L759,1149 L722,1122 Z M796,1122 L759,1149 L773,1192 L810,1165 Z M810,1165 L847,1192 L810,1219 L773,1192 Z M728,1192 L773,1192 L759,1235 L713,1235 Z M691,1165 L676,1209 L713,1235 L728,1192 Z M676,1209 L713,1235 L676,1262 L640,1235 Z M557,1209 L594,1235 L557,1262 L520,1235 Z M608,1192 L654,1192 L640,1235 L594,1235 Z M594,1149 L640,1149 L654,1192 L608,1192 Z M557,1122 L543,1165 L580,1192 L594,1149 Z M557,1122 L511,1122 L497,1165 L543,1165 Z M676,1122 L640,1149 L654,1192 L691,1165 Z M676,1122 L722,1122 L736,1165 L691,1165 Z M594,1095 L631,1122 L594,1149 L557,1122 Z M543,1165 L506,1192 L520,1235 L557,1209 Z M423,1165 L460,1192 L423,1219 L386,1192 Z M506,1192 L460,1192 L474,1235 L520,1235 Z M409,1122 L363,1122 L377,1165 L423,1165 Z M437,1122 L423,1165 L460,1192 L474,1149 Z M363,1122 L326,1149 L340,1192 L377,1165 Z M363,1122 L326,1095 L289,1122 L326,1149 Z M303,1078 L258,1078 L243,1122 L289,1122 Z M243,1035 L229,1078 L192,1051 L206,1008 Z M289,1035 L243,1035 L258,1078 L303,1078 Z M377,1078 L363,1122 L326,1095 L340,1051 Z M944,1122 L990,1122 L976,1165 L930,1165 Z M870,1122 L856,1165 L893,1192 L907,1149 Z M907,1095 L944,1122 L907,1149 L870,1122 Z M824,1122 L870,1122 L856,1165 L810,1165 Z M893,1051 L856,1078 L870,1122 L907,1095 Z M930,1078 L976,1078 L990,1122 L944,1122 Z M907,1008 L893,1051 L930,1078 L944,1035 Z M861,1008 L907,1008 L893,1051 L847,1051 Z M944,1035 L990,1035 L976,1078 L930,1078 Z M990,981 L1027,1008 L990,1035 L953,1008 Z M1027,1008 L990,1035 L1004,1078 L1041,1051 Z M1027,1008 L1073,1008 L1087,1051 L1041,1051 Z M1073,1008 L1109,981 L1124,1024 L1087,1051 Z M1124,937 L1161,964 L1198,937 L1161,911 Z M1124,937 L1109,981 L1146,1008 L1161,964 Z M1078,937 L1124,937 L1109,981 L1064,981 Z M1064,894 L1109,894 L1124,937 L1078,937 Z M1109,894 L1146,867 L1161,911 L1124,937 Z M1073,867 L1087,824 L1124,851 L1109,894 Z M1087,824 L1124,851 L1161,824 L1124,797 Z M1161,911 L1206,911 L1220,867 L1175,867 Z M543,937 L506,964 L520,1008 L557,981 Z M497,937 L460,911 L423,937 L460,964 Z M511,894 L497,937 L460,911 L474,867 Z M161,780 L147,824 L110,797 L124,753 Z M506,683 L460,683 L474,640 L520,640 Z M506,596 L460,596 L474,640 L520,640 Z M543,569 L506,596 L520,640 L557,613 Z M543,569 L497,569 L511,526 L557,526 Z M497,569 L460,542 L423,569 L460,596 Z M497,569 L511,526 L474,499 L460,542 Z M506,315 L460,315 L474,271 L520,271 Z M460,315 L423,342 L409,298 L446,271 Z M423,342 L377,342 L363,298 L409,298 Z M377,342 L340,315 L303,342 L340,368 Z M289,385 L243,385 L258,342 L303,342 Z M520,499 L474,499 L460,455 L506,455 Z ")},CL={name:"Penrose20",thinShape:new Bt("M665,621 L675,590 L649,609 L640,640 Z M665,658 L640,640 L649,670 L675,689 Z M598,609 L572,590 L582,621 L608,640 Z M598,609 L608,579 L617,609 L608,640 Z M598,670 L608,640 L617,670 L608,700 Z M598,670 L608,640 L582,658 L572,689 Z M633,560 L665,560 L640,579 L608,579 Z M633,560 L665,560 L640,541 L608,541 Z M582,560 L556,541 L546,511 L572,529 Z M582,560 L550,560 L524,541 L556,541 Z M665,560 L675,529 L701,511 L691,541 Z M665,560 L697,560 L723,541 L691,541 Z M749,560 L723,541 L733,571 L759,590 Z M749,560 L759,529 L769,560 L759,590 Z M723,480 L733,450 L759,431 L749,461 Z M759,492 L769,461 L759,431 L749,461 Z M759,529 L791,529 L817,511 L785,511 Z M701,511 L675,492 L665,461 L691,480 Z M691,480 L723,480 L697,461 L665,461 Z M608,480 L640,480 L665,461 L633,461 Z M608,541 L617,511 L608,480 L598,511 Z M572,492 L582,461 L556,480 L546,511 Z M582,461 L550,461 L524,480 L556,480 Z M572,431 L582,400 L608,382 L598,412 Z M572,431 L540,431 L514,412 L546,412 Z M608,443 L617,412 L608,382 L598,412 Z M524,480 L498,461 L488,431 L514,450 Z M488,529 L456,529 L430,511 L462,511 Z M488,492 L498,461 L488,431 L478,461 Z M488,492 L456,492 L430,511 L462,511 Z M446,461 L456,431 L430,450 L420,480 Z M430,511 L398,511 L372,529 L404,529 Z M420,480 L388,480 L362,461 L394,461 Z M420,541 L430,511 L404,529 L394,560 Z M372,529 L346,511 L336,480 L362,499 Z M336,541 L346,511 L336,480 L327,511 Z M336,541 L304,541 L279,560 L311,560 Z M352,590 L362,560 L336,579 L327,609 Z M430,609 L404,590 L394,560 L420,579 Z M488,590 L498,560 L488,529 L478,560 Z M488,590 L456,590 L430,609 L462,609 Z M514,571 L524,541 L498,560 L488,590 Z M478,621 L488,590 L462,609 L452,640 Z M504,640 L514,609 L524,640 L514,670 Z M478,658 L452,640 L462,670 L488,689 Z M488,689 L478,719 L488,750 L498,719 Z M488,689 L456,689 L430,670 L462,670 Z M514,708 L488,689 L498,719 L524,738 Z M430,670 L420,700 L394,719 L404,689 Z M420,738 L394,719 L404,750 L430,768 Z M352,689 L327,670 L336,700 L362,719 Z M372,750 L362,780 L336,799 L346,768 Z M336,738 L327,768 L336,799 L346,768 Z M336,738 L304,738 L279,719 L311,719 Z M362,658 L352,689 L362,719 L372,689 Z M420,640 L388,640 L362,658 L394,658 Z M420,640 L388,640 L362,621 L394,621 Z M362,621 L372,590 L362,560 L352,590 Z M327,609 L295,609 L269,590 L301,590 Z M327,670 L295,670 L269,689 L301,689 Z M304,640 L279,621 L269,590 L295,609 Z M304,640 L295,670 L269,689 L279,658 Z M279,719 L269,750 L243,768 L253,738 Z M243,708 L233,738 L243,768 L253,738 Z M243,708 L211,708 L185,689 L217,689 Z M243,670 L211,670 L185,689 L217,689 Z M253,640 L243,670 L233,640 L243,609 Z M185,689 L159,670 L149,640 L175,658 Z M185,689 L153,689 L127,670 L159,670 Z M175,719 L143,719 L117,738 L149,738 Z M127,670 L117,700 L91,719 L101,689 Z M117,738 L107,768 L117,799 L127,768 Z M81,750 L49,750 L23,768 L55,768 Z M101,689 L91,719 L81,689 L91,658 Z M59,719 L33,700 L23,670 L49,689 Z M59,719 L49,750 L23,768 L33,738 Z M91,818 L81,848 L91,879 L101,848 Z M91,818 L59,818 L33,799 L65,799 Z M117,897 L107,928 L117,958 L127,928 Z M117,897 L107,928 L81,947 L91,916 Z M175,879 L143,879 L117,897 L149,897 Z M201,897 L175,879 L185,909 L211,928 Z M175,818 L143,818 L117,799 L149,799 Z M153,848 L143,879 L117,897 L127,867 Z M243,829 L211,829 L185,848 L217,848 Z M243,867 L233,897 L243,928 L253,897 Z M243,867 L211,867 L185,848 L217,848 Z M269,947 L259,977 L269,1007 L279,977 Z M233,958 L201,958 L175,977 L207,977 Z M211,928 L201,958 L175,977 L185,947 Z M175,977 L143,977 L117,996 L149,996 Z M175,977 L143,977 L117,958 L149,958 Z M243,1026 L233,1057 L243,1087 L253,1057 Z M243,1026 L211,1026 L185,1007 L217,1007 Z M327,1087 L295,1087 L269,1106 L301,1106 Z M352,1106 L327,1087 L336,1118 L362,1136 Z M327,1026 L295,1026 L269,1007 L301,1007 Z M362,1076 L352,1106 L362,1136 L372,1106 Z M304,1057 L295,1087 L269,1106 L279,1076 Z M295,1026 L269,1007 L279,1038 L304,1057 Z M420,1057 L446,1076 L456,1106 L430,1087 Z M420,1057 L388,1057 L362,1076 L394,1076 Z M420,1057 L388,1057 L362,1038 L394,1038 Z M452,1057 L420,1057 L446,1076 L478,1076 Z M488,1007 L456,1007 L430,1026 L462,1026 Z M514,1026 L504,1057 L514,1087 L524,1057 Z M514,1026 L504,1057 L478,1076 L488,1045 Z M572,1007 L598,1026 L608,1057 L582,1038 Z M572,1007 L540,1007 L514,1026 L546,1026 Z M608,958 L640,958 L665,977 L633,977 Z M608,996 L598,1026 L608,1057 L617,1026 Z M550,977 L540,1007 L514,1026 L524,996 Z M514,928 L540,947 L550,977 L524,958 Z M488,947 L478,977 L488,1007 L498,977 Z M488,947 L456,947 L430,928 L462,928 Z M430,928 L420,958 L394,977 L404,947 Z M420,996 L394,977 L404,1007 L430,1026 Z M362,977 L352,1007 L362,1038 L372,1007 Z M362,977 L352,1007 L327,1026 L336,996 Z M352,947 L327,928 L336,958 L362,977 Z M362,916 L352,947 L362,977 L372,947 Z M336,897 L304,897 L279,879 L311,879 Z M420,897 L388,897 L362,916 L394,916 Z M420,897 L388,897 L362,879 L394,879 Z M478,879 L446,879 L420,897 L452,897 Z M504,897 L478,879 L488,909 L514,928 Z M514,867 L504,897 L514,928 L524,897 Z M456,848 L446,879 L420,897 L430,867 Z M446,818 L420,799 L430,829 L456,848 Z M420,799 L388,799 L362,818 L394,818 Z M362,818 L352,848 L362,879 L372,848 Z M327,867 L301,848 L311,879 L336,897 Z M336,799 L327,829 L301,848 L311,818 Z M336,799 L304,799 L279,818 L311,818 Z M269,787 L243,768 L253,799 L279,818 Z M243,768 L233,799 L243,829 L253,799 Z M211,768 L201,799 L175,818 L185,787 Z M201,738 L175,719 L185,750 L211,768 Z M430,768 L398,768 L372,750 L404,750 Z M488,750 L456,750 L430,768 L462,768 Z M488,787 L478,818 L488,848 L498,818 Z M488,787 L456,787 L430,768 L462,768 Z M524,799 L514,829 L488,848 L498,818 Z M572,787 L546,768 L556,799 L582,818 Z M582,719 L572,750 L546,768 L556,738 Z M582,719 L550,719 L524,738 L556,738 Z M572,689 L540,689 L514,670 L546,670 Z M608,738 L598,768 L608,799 L617,768 Z M633,719 L665,719 L640,738 L608,738 Z M633,719 L665,719 L640,700 L608,700 Z M665,719 L691,738 L701,768 L675,750 Z M665,719 L697,719 L723,738 L691,738 Z M759,689 L769,658 L795,640 L785,670 Z M759,689 L791,689 L817,670 L785,670 Z M749,719 L759,689 L769,719 L759,750 Z M749,719 L759,689 L733,708 L723,738 Z M817,670 L843,689 L853,719 L827,700 Z M827,640 L859,640 L885,621 L853,621 Z M827,640 L859,640 L885,658 L853,658 Z M817,609 L827,579 L853,560 L843,590 Z M875,689 L885,658 L895,689 L885,719 Z M885,719 L895,689 L920,670 L911,700 Z M911,738 L943,738 L968,719 L936,719 Z M875,750 L901,768 L911,799 L885,780 Z M817,768 L827,738 L853,719 L843,750 Z M817,768 L849,768 L875,750 L843,750 Z M827,799 L817,829 L791,848 L801,818 Z M827,799 L859,799 L885,818 L853,818 Z M785,768 L817,768 L791,787 L759,787 Z M885,818 L875,848 L885,879 L895,848 Z M911,799 L936,818 L946,848 L920,829 Z M911,799 L943,799 L968,818 L936,818 Z M853,879 L885,879 L859,897 L827,897 Z M791,848 L817,867 L827,897 L801,879 Z M769,879 L759,909 L733,928 L743,897 Z M769,879 L801,879 L827,897 L795,897 Z M733,867 L723,897 L733,928 L743,897 Z M759,787 L749,818 L759,848 L769,818 Z M759,750 L791,750 L817,768 L785,768 Z M723,799 L749,818 L759,848 L733,829 Z M701,768 L691,799 L665,818 L675,787 Z M691,799 L723,799 L697,818 L665,818 Z M675,848 L665,879 L640,897 L649,867 Z M675,848 L707,848 L733,867 L701,867 Z M633,818 L665,818 L640,836 L608,836 Z M608,836 L598,867 L608,897 L617,867 Z M608,799 L640,799 L665,818 L633,818 Z M582,818 L550,818 L524,799 L556,799 Z M572,848 L598,867 L608,897 L582,879 Z M572,848 L540,848 L514,867 L546,867 Z M608,897 L598,928 L608,958 L617,928 Z M608,897 L598,928 L572,947 L582,916 Z M640,897 L665,916 L675,947 L649,928 Z M701,928 L733,928 L707,947 L675,947 Z M733,928 L723,958 L697,977 L707,947 Z M759,947 L749,977 L759,1007 L769,977 Z M697,977 L723,996 L733,1026 L707,1007 Z M759,1007 L791,1007 L817,1026 L785,1026 Z M733,1026 L759,1045 L769,1076 L743,1057 Z M733,1026 L723,1057 L733,1087 L743,1057 Z M675,1007 L665,1038 L640,1057 L649,1026 Z M675,1007 L707,1007 L733,1026 L701,1026 Z M701,1087 L733,1087 L707,1106 L675,1106 Z M640,1057 L665,1076 L675,1106 L649,1087 Z M608,1057 L598,1087 L608,1118 L617,1087 Z M608,1057 L598,1087 L572,1106 L582,1076 Z M608,1118 L640,1118 L665,1136 L633,1136 Z M582,1136 L572,1167 L546,1186 L556,1155 Z M582,1136 L550,1136 L524,1155 L556,1155 Z M546,1087 L514,1087 L540,1106 L572,1106 Z M488,1106 L514,1125 L524,1155 L498,1136 Z M488,1106 L478,1136 L488,1167 L498,1136 Z M456,1106 L446,1136 L420,1155 L430,1125 Z M394,1136 L362,1136 L388,1155 L420,1155 Z M362,1136 L388,1155 L398,1186 L372,1167 Z M336,1155 L304,1155 L279,1136 L311,1136 Z M462,1186 L430,1186 L456,1204 L488,1204 Z M488,1167 L456,1167 L430,1186 L462,1186 Z M546,1186 L572,1204 L582,1235 L556,1216 Z M556,1216 L524,1216 L550,1235 L582,1235 Z M608,1216 L640,1216 L665,1235 L633,1235 Z M608,1155 L598,1186 L608,1216 L617,1186 Z M633,1136 L665,1136 L640,1155 L608,1155 Z M665,1136 L691,1155 L701,1186 L675,1167 Z M665,1136 L697,1136 L723,1155 L691,1155 Z M759,1106 L749,1136 L759,1167 L769,1136 Z M759,1106 L749,1136 L723,1155 L733,1125 Z M791,1106 L817,1125 L827,1155 L801,1136 Z M827,1057 L817,1087 L791,1106 L801,1076 Z M827,1057 L859,1057 L885,1076 L853,1076 Z M853,1038 L885,1038 L859,1057 L827,1057 Z M795,1057 L827,1057 L801,1076 L769,1076 Z M885,1076 L875,1106 L885,1136 L895,1106 Z M885,1136 L875,1167 L849,1186 L859,1155 Z M853,1136 L885,1136 L859,1155 L827,1155 Z M911,1155 L901,1186 L911,1216 L920,1186 Z M936,1136 L968,1136 L943,1155 L911,1155 Z M1004,1087 L1036,1087 L1062,1106 L1030,1106 Z M920,1087 L911,1118 L885,1136 L895,1106 Z M920,1087 L952,1087 L978,1106 L946,1106 Z M943,1057 L968,1076 L978,1106 L952,1087 Z M978,1007 L968,1038 L943,1057 L952,1026 Z M946,1007 L978,1007 L952,1026 L920,1026 Z M885,977 L911,996 L920,1026 L895,1007 Z M885,977 L875,1007 L885,1038 L895,1007 Z M853,977 L843,1007 L817,1026 L827,996 Z M817,928 L843,947 L853,977 L827,958 Z M827,897 L859,897 L885,916 L853,916 Z M785,928 L817,928 L791,947 L759,947 Z M885,916 L875,947 L885,977 L895,947 Z M911,897 L943,897 L968,879 L936,879 Z M920,928 L911,958 L885,977 L895,947 Z M920,928 L952,928 L978,947 L946,947 Z M920,867 L911,897 L936,879 L946,848 Z M968,879 L994,897 L1004,928 L978,909 Z M968,818 L978,787 L1004,768 L994,799 Z M1004,829 L1036,829 L1062,848 L1030,848 Z M1004,867 L994,897 L1004,928 L1014,897 Z M1004,867 L1036,867 L1062,848 L1030,848 Z M1046,897 L1036,928 L1062,909 L1072,879 Z M1072,879 L1104,879 L1130,897 L1098,897 Z M1072,818 L1104,818 L1130,799 L1098,799 Z M1094,848 L1120,867 L1130,897 L1104,879 Z M1094,848 L1104,818 L1130,799 L1120,829 Z M1130,799 L1140,768 L1166,750 L1156,780 Z M1120,768 L1130,738 L1140,768 L1130,799 Z M1156,818 L1188,818 L1214,799 L1182,799 Z M1072,719 L1104,719 L1130,738 L1098,738 Z M1120,670 L1146,689 L1156,719 L1130,700 Z M1146,689 L1156,658 L1166,689 L1156,719 Z M1062,689 L1072,658 L1098,640 L1088,670 Z M1062,689 L1094,689 L1120,670 L1088,670 Z M1062,590 L1088,609 L1098,640 L1072,621 Z M1062,590 L1094,590 L1120,609 L1088,609 Z M1004,609 L1036,609 L1062,590 L1030,590 Z M1004,670 L1036,670 L1062,689 L1030,689 Z M994,640 L1004,609 L1014,640 L1004,670 Z M1004,708 L1036,708 L1062,689 L1030,689 Z M994,738 L1004,708 L1014,738 L1004,768 Z M1036,768 L1062,787 L1072,818 L1046,799 Z M1036,768 L1046,738 L1072,719 L1062,750 Z M994,799 L1004,768 L1014,799 L1004,829 Z M968,719 L994,738 L1004,768 L978,750 Z M920,670 L952,670 L978,689 L946,689 Z M943,640 L968,658 L978,689 L952,670 Z M943,640 L952,609 L978,590 L968,621 Z M920,609 L952,609 L978,590 L946,590 Z M885,560 L911,579 L920,609 L895,590 Z M875,529 L885,499 L911,480 L901,511 Z M911,541 L943,541 L968,560 L936,560 Z M875,590 L885,560 L895,590 L885,621 Z M817,511 L843,529 L853,560 L827,541 Z M817,511 L849,511 L875,529 L843,529 Z M759,590 L785,609 L795,640 L769,621 Z M759,590 L791,590 L817,609 L785,609 Z M723,640 L733,609 L743,640 L733,670 Z M701,609 L733,609 L707,590 L675,590 Z M701,670 L733,670 L707,689 L675,689 Z M827,480 L801,461 L791,431 L817,450 Z M827,480 L859,480 L885,461 L853,461 Z M785,511 L817,511 L791,492 L759,492 Z M885,461 L895,431 L885,400 L875,431 Z M911,480 L920,450 L946,431 L936,461 Z M911,480 L943,480 L968,461 L936,461 Z M901,511 L911,480 L920,511 L911,541 Z M968,461 L994,480 L1004,511 L978,492 Z M994,480 L1004,450 L1014,480 L1004,511 Z M968,400 L978,370 L1004,351 L994,382 Z M1004,412 L1014,382 L1004,351 L994,382 Z M1004,412 L1036,412 L1062,431 L1030,431 Z M1004,450 L1036,450 L1062,431 L1030,431 Z M920,412 L946,431 L936,400 L911,382 Z M911,382 L943,382 L968,400 L936,400 Z M853,400 L885,400 L859,382 L827,382 Z M827,382 L859,382 L885,363 L853,363 Z M791,431 L801,400 L827,382 L817,412 Z M733,412 L743,382 L733,351 L723,382 Z M769,400 L743,382 L733,351 L759,370 Z M769,400 L801,400 L827,382 L795,382 Z M733,351 L707,332 L697,302 L723,321 Z M759,332 L769,302 L759,272 L749,302 Z M701,351 L733,351 L707,332 L675,332 Z M640,382 L649,351 L675,332 L665,363 Z M608,382 L582,363 L572,332 L598,351 Z M608,382 L617,351 L608,321 L598,351 Z M608,321 L640,321 L665,302 L633,302 Z M633,302 L665,302 L640,283 L608,283 Z M675,272 L649,253 L639,222 L665,241 Z M675,272 L707,272 L733,253 L701,253 Z M697,302 L707,272 L733,253 L723,283 Z M733,253 L743,222 L733,192 L723,222 Z M733,253 L743,222 L769,203 L759,234 Z M759,272 L791,272 L817,253 L785,253 Z M701,192 L733,192 L707,173 L675,173 Z M759,173 L733,154 L723,124 L749,143 Z M759,173 L769,143 L759,112 L749,143 Z M665,143 L675,112 L701,93 L691,124 Z M665,143 L697,143 L723,124 L691,124 Z M701,93 L675,75 L665,44 L691,63 Z M691,63 L723,63 L697,44 L665,44 Z M607,63 L639,63 L665,44 L633,44 Z M607,124 L617,93 L607,63 L598,93 Z M582,143 L556,124 L546,93 L572,112 Z M582,143 L550,143 L524,124 L556,124 Z M633,143 L665,143 L639,124 L607,124 Z M607,161 L639,161 L665,143 L633,143 Z M639,222 L649,192 L675,173 L665,203 Z M607,222 L582,203 L572,173 L598,192 Z M607,222 L617,192 L607,161 L598,192 Z M608,283 L617,253 L607,222 L598,253 Z M572,272 L582,241 L607,222 L598,253 Z M572,272 L540,272 L514,253 L546,253 Z M550,302 L524,283 L514,253 L540,272 Z M514,253 L488,234 L478,203 L504,222 Z M514,253 L524,222 L514,192 L504,222 Z M488,272 L456,272 L430,253 L462,253 Z M546,192 L514,192 L540,173 L572,173 Z M546,93 L556,63 L582,44 L572,75 Z M556,63 L524,63 L550,44 L582,44 Z M462,93 L430,93 L456,75 L488,75 Z M362,143 L372,112 L398,93 L388,124 Z M336,124 L304,124 L279,143 L311,143 Z M352,173 L362,143 L336,161 L327,192 Z M394,143 L362,143 L388,124 L420,124 Z M420,222 L430,192 L456,173 L446,203 Z M420,222 L388,222 L362,241 L394,241 Z M420,222 L388,222 L362,203 L394,203 Z M362,203 L372,173 L362,143 L352,173 Z M420,283 L430,253 L404,272 L394,302 Z M362,302 L336,283 L327,253 L352,272 Z M362,302 L372,272 L362,241 L352,272 Z M352,332 L362,302 L336,321 L327,351 Z M362,363 L372,332 L362,302 L352,332 Z M327,351 L295,351 L269,332 L301,332 Z M336,382 L304,382 L279,400 L311,400 Z M269,332 L279,302 L269,272 L259,302 Z M259,302 L269,272 L243,290 L233,321 Z M327,253 L295,253 L269,272 L301,272 Z M295,253 L304,222 L279,241 L269,272 Z M304,222 L279,203 L269,173 L295,192 Z M243,253 L253,222 L243,192 L233,222 Z M243,253 L211,253 L185,272 L217,272 Z M175,302 L143,302 L117,321 L149,321 Z M175,302 L143,302 L117,283 L149,283 Z M233,321 L201,321 L175,302 L207,302 Z M117,382 L91,363 L81,332 L107,351 Z M117,382 L127,351 L117,321 L107,351 Z M91,461 L101,431 L91,400 L81,431 Z M91,461 L59,461 L33,480 L65,480 Z M143,461 L153,431 L127,450 L117,480 Z M107,511 L117,480 L91,499 L81,529 Z M175,461 L143,461 L117,480 L149,480 Z M175,400 L143,400 L117,382 L149,382 Z M153,431 L127,412 L117,382 L143,400 Z M243,412 L253,382 L243,351 L233,382 Z M243,412 L211,412 L185,431 L217,431 Z M243,450 L211,450 L185,431 L217,431 Z M243,511 L253,480 L243,450 L233,480 Z M269,492 L279,461 L253,480 L243,511 Z M211,511 L185,492 L175,461 L201,480 Z M201,541 L211,511 L185,529 L175,560 Z M175,560 L143,560 L117,541 L149,541 Z M185,590 L175,621 L149,640 L159,609 Z M185,590 L153,590 L127,609 L159,609 Z M117,541 L127,511 L117,480 L107,511 Z M81,529 L49,529 L23,511 L55,511 Z M101,590 L91,621 L81,590 L91,560 Z M59,560 L33,541 L23,511 L49,529 Z M59,560 L49,590 L23,609 L33,579 Z M91,621 L59,621 L33,640 L65,640 Z M91,658 L59,658 L33,640 L65,640 Z M127,609 L101,590 L91,560 L117,579 Z M243,571 L253,541 L243,511 L233,541 Z M243,571 L211,571 L185,590 L217,590 Z M243,609 L211,609 L185,590 L217,590 Z M279,560 L253,541 L243,511 L269,529 Z M336,480 L311,461 L301,431 L327,450 Z M336,480 L304,480 L279,461 L311,461 Z M362,461 L372,431 L362,400 L352,431 Z M327,412 L336,382 L311,400 L301,431 Z M279,400 L253,382 L243,351 L269,370 Z M420,382 L388,382 L362,400 L394,400 Z M420,382 L388,382 L362,363 L394,363 Z M430,351 L404,332 L394,302 L420,321 Z M478,400 L446,400 L420,382 L452,382 Z M488,332 L498,302 L488,272 L478,302 Z M488,332 L456,332 L430,351 L462,351 Z M514,351 L524,321 L550,302 L540,332 Z M504,382 L514,351 L488,370 L478,400 Z M546,351 L514,351 L540,332 L572,332 Z M514,412 L524,382 L514,351 L504,382 Z M456,431 L430,412 L420,382 L446,400 Z M201,382 L211,351 L185,370 L175,400 Z M211,351 L185,332 L175,302 L201,321 Z M327,192 L295,192 L269,173 L301,173 Z M452,222 L420,222 L446,203 L478,203 Z M488,173 L498,143 L488,112 L478,143 Z M488,173 L498,143 L524,124 L514,154 Z M456,173 L430,154 L420,124 L446,143 Z M488,112 L456,112 L430,93 L462,93 Z M633,44 L665,44 L639,25 L607,25 Z M723,63 L733,33 L759,14 L749,44 Z M759,75 L769,44 L759,14 L749,44 Z M785,93 L817,93 L791,75 L759,75 Z M885,143 L859,124 L849,93 L875,112 Z M911,124 L920,93 L911,63 L901,93 Z M936,143 L968,143 L943,124 L911,124 Z M920,192 L895,173 L885,143 L911,161 Z M920,192 L952,192 L978,173 L946,173 Z M943,222 L952,192 L978,173 L968,203 Z M978,272 L952,253 L943,222 L968,241 Z M1004,253 L1014,222 L1004,192 L994,222 Z M1004,253 L1036,253 L1062,272 L1030,272 Z M1004,192 L1036,192 L1062,173 L1030,173 Z M1030,173 L1062,173 L1036,154 L1004,154 Z M1072,203 L1098,222 L1088,192 L1062,173 Z M1062,272 L1072,241 L1098,222 L1088,253 Z M1072,302 L1104,302 L1130,283 L1098,283 Z M1072,302 L1104,302 L1130,321 L1098,321 Z M1036,351 L1046,321 L1072,302 L1062,332 Z M1046,382 L1072,400 L1062,370 L1036,351 Z M978,332 L988,302 L978,272 L968,302 Z M1014,321 L1046,321 L1072,302 L1040,302 Z M988,302 L1014,321 L1004,290 L978,272 Z M920,351 L895,332 L885,302 L911,321 Z M920,351 L952,351 L978,332 L946,332 Z M885,302 L895,272 L885,241 L875,272 Z M885,302 L895,272 L920,253 L911,283 Z M885,363 L895,332 L885,302 L875,332 Z M817,351 L827,321 L853,302 L843,332 Z M853,302 L827,283 L817,253 L843,272 Z M827,222 L801,203 L791,173 L817,192 Z M827,222 L859,222 L885,203 L853,203 Z M795,222 L827,222 L801,203 L769,203 Z M791,173 L801,143 L827,124 L817,154 Z M759,112 L791,112 L817,93 L785,93 Z M853,143 L885,143 L859,124 L827,124 Z M885,203 L895,173 L885,143 L875,173 Z M853,241 L885,241 L859,222 L827,222 Z M946,272 L978,272 L952,253 L920,253 Z M785,351 L817,351 L791,332 L759,332 Z M1072,400 L1104,400 L1130,382 L1098,382 Z M1072,461 L1104,461 L1130,480 L1098,480 Z M1094,431 L1120,450 L1130,480 L1104,461 Z M1094,431 L1104,400 L1130,382 L1120,412 Z M1130,382 L1140,351 L1130,321 L1120,351 Z M1130,382 L1140,351 L1166,332 L1156,363 Z M1156,400 L1188,400 L1214,382 L1182,382 Z M1146,431 L1156,400 L1166,431 L1156,461 Z M1156,461 L1188,461 L1214,480 L1182,480 Z M1130,480 L1156,499 L1166,529 L1140,511 Z M1166,529 L1198,529 L1224,511 L1192,511 Z M1188,560 L1214,579 L1224,609 L1198,590 Z M1188,560 L1198,529 L1224,511 L1214,541 Z M1188,719 L1214,738 L1224,768 L1198,750 Z M1188,719 L1198,689 L1224,670 L1214,700 Z M1166,750 L1198,750 L1224,768 L1192,768 Z M1156,879 L1188,879 L1214,897 L1182,897 Z M1146,848 L1156,818 L1166,848 L1156,879 Z M1130,897 L1156,916 L1166,947 L1140,928 Z M1130,897 L1120,928 L1130,958 L1140,928 Z M1072,977 L1104,977 L1130,958 L1098,958 Z M1072,977 L1104,977 L1130,996 L1098,996 Z M1062,1007 L1088,1026 L1098,1057 L1072,1038 Z M1014,958 L1046,958 L1072,977 L1040,977 Z M1004,1026 L994,1057 L1004,1087 L1014,1057 Z M1004,1026 L1036,1026 L1062,1007 L1030,1007 Z M1072,1076 L1062,1106 L1088,1087 L1098,1057 Z M1030,1106 L1062,1106 L1036,1125 L1004,1125 Z M988,977 L978,1007 L1004,989 L1014,958 Z M978,947 L968,977 L978,1007 L988,977 Z M1036,928 L1062,947 L1072,977 L1046,958 Z M1156,658 L1188,658 L1214,640 L1182,640 Z M1156,621 L1188,621 L1214,640 L1182,640 Z M1146,590 L1156,560 L1166,590 L1156,621 Z M1120,609 L1130,579 L1156,560 L1146,590 Z M1072,560 L1104,560 L1130,541 L1098,541 Z M1036,511 L1062,529 L1072,560 L1046,541 Z M1036,511 L1046,480 L1072,461 L1062,492 Z M1004,571 L1036,571 L1062,590 L1030,590 Z M994,541 L1004,511 L1014,541 L1004,571 Z M968,560 L978,529 L1004,511 L994,541 Z M1120,511 L1130,480 L1140,511 L1130,541 Z M675,431 L649,412 L640,382 L665,400 Z M675,431 L707,431 L733,412 L701,412 Z M759,1204 L749,1235 L759,1265 L769,1235 Z M723,1216 L749,1235 L759,1265 L733,1246 Z M691,1216 L723,1216 L697,1235 L665,1235 Z M633,1235 L665,1235 L640,1254 L608,1254 Z M701,1186 L691,1216 L665,1235 L675,1204 Z M759,1167 L791,1167 L817,1186 L785,1186 Z M785,1186 L817,1186 L791,1204 L759,1204 Z M633,977 L665,977 L640,996 L608,996 Z M546,928 L514,928 L540,947 L572,947 Z M901,768 L911,738 L920,768 L911,799 Z M572,590 L540,590 L514,609 L546,609 Z M279,879 L269,909 L243,928 L253,897 Z M327,928 L295,928 L269,947 L301,947 Z M259,977 L233,958 L243,989 L269,1007 Z M143,818 L117,799 L127,829 L153,848 Z M107,768 L81,750 L91,780 L117,799 Z M633,461 L665,461 L640,443 L608,443 Z "),thickShape:new Bt("M608,640 L582,621 L556,640 L582,658 Z M608,640 L640,640 L649,670 L617,670 Z M608,640 L640,640 L649,609 L617,609 Z M598,609 L608,579 L582,560 L572,590 Z M598,670 L572,689 L582,719 L608,700 Z M608,579 L640,579 L649,609 L617,609 Z M633,560 L608,541 L582,560 L608,579 Z M665,560 L640,579 L649,609 L675,590 Z M665,560 L675,529 L649,511 L640,541 Z M665,560 L697,560 L707,590 L675,590 Z M691,541 L723,541 L733,511 L701,511 Z M675,529 L649,511 L675,492 L701,511 Z M697,560 L723,541 L733,571 L707,590 Z M749,560 L759,529 L733,511 L723,541 Z M733,511 L759,492 L749,461 L723,480 Z M723,480 L733,450 L707,431 L697,461 Z M759,492 L791,492 L801,461 L769,461 Z M759,529 L733,511 L759,492 L785,511 Z M759,529 L791,529 L801,560 L769,560 Z M701,511 L733,511 L723,480 L691,480 Z M665,461 L675,431 L649,412 L640,443 Z M665,461 L697,461 L707,431 L675,431 Z M649,511 L675,492 L665,461 L640,480 Z M617,511 L649,511 L640,480 L608,480 Z M608,480 L582,461 L608,443 L633,461 Z M608,541 L582,560 L572,529 L598,511 Z M608,541 L640,541 L649,511 L617,511 Z M598,511 L572,492 L546,511 L572,529 Z M598,511 L608,480 L582,461 L572,492 Z M546,511 L514,511 L524,480 L556,480 Z M582,461 L608,443 L598,412 L572,431 Z M582,461 L550,461 L540,431 L572,431 Z M572,431 L582,400 L556,382 L546,412 Z M608,443 L640,443 L649,412 L617,412 Z M550,461 L524,480 L514,450 L540,431 Z M540,431 L514,412 L488,431 L514,450 Z M514,511 L488,492 L462,511 L488,529 Z M514,511 L524,480 L498,461 L488,492 Z M524,541 L498,560 L488,529 L514,511 Z M488,492 L456,492 L446,461 L478,461 Z M478,461 L446,461 L456,431 L488,431 Z M456,492 L430,511 L420,480 L446,461 Z M430,511 L398,511 L388,480 L420,480 Z M420,480 L430,450 L404,431 L394,461 Z M398,511 L372,529 L362,499 L388,480 Z M388,480 L362,461 L336,480 L362,499 Z M362,560 L336,541 L311,560 L336,579 Z M362,560 L372,529 L346,511 L336,541 Z M336,541 L304,541 L295,511 L327,511 Z M394,560 L362,560 L372,529 L404,529 Z M404,590 L372,590 L362,560 L394,560 Z M446,560 L420,541 L394,560 L420,579 Z M446,560 L456,529 L430,511 L420,541 Z M456,590 L430,609 L420,579 L446,560 Z M478,560 L446,560 L456,529 L488,529 Z M488,590 L456,590 L446,560 L478,560 Z M452,640 L420,640 L430,670 L462,670 Z M452,640 L420,640 L430,609 L462,609 Z M504,640 L478,658 L488,689 L514,670 Z M504,640 L478,621 L452,640 L478,658 Z M504,640 L514,609 L488,590 L478,621 Z M488,689 L456,689 L446,719 L478,719 Z M478,719 L446,719 L456,750 L488,750 Z M456,689 L446,719 L420,700 L430,670 Z M446,719 L420,738 L430,768 L456,750 Z M446,719 L420,700 L394,719 L420,738 Z M394,719 L362,719 L372,750 L404,750 Z M404,689 L372,689 L362,719 L394,719 Z M362,719 L336,738 L346,768 L372,750 Z M362,719 L336,700 L311,719 L336,738 Z M336,738 L304,738 L295,768 L327,768 Z M362,658 L352,689 L327,670 L336,640 Z M388,640 L362,621 L336,640 L362,658 Z M336,640 L304,640 L295,609 L327,609 Z M336,640 L304,640 L295,670 L327,670 Z M394,658 L362,658 L372,689 L404,689 Z M420,640 L394,658 L404,689 L430,670 Z M420,640 L430,609 L404,590 L394,621 Z M394,621 L362,621 L372,590 L404,590 Z M362,621 L336,640 L327,609 L352,590 Z M327,609 L336,579 L311,560 L301,590 Z M327,670 L301,689 L311,719 L336,700 Z M304,640 L279,621 L253,640 L279,658 Z M279,658 L269,689 L243,670 L253,640 Z M279,621 L253,640 L243,609 L269,590 Z M269,689 L243,708 L253,738 L279,719 Z M269,689 L243,670 L217,689 L243,708 Z M243,708 L211,708 L201,738 L233,738 Z M243,670 L211,670 L201,640 L233,640 Z M301,689 L269,689 L279,719 L311,719 Z M211,670 L185,689 L175,658 L201,640 Z M201,640 L175,621 L149,640 L175,658 Z M185,689 L153,689 L143,719 L175,719 Z M211,708 L201,738 L175,719 L185,689 Z M159,670 L127,670 L117,640 L149,640 Z M175,719 L149,738 L159,768 L185,750 Z M153,689 L143,719 L117,700 L127,670 Z M127,670 L101,689 L91,658 L117,640 Z M143,719 L117,700 L91,719 L117,738 Z M117,738 L107,768 L81,750 L91,719 Z M91,719 L59,719 L49,689 L81,689 Z M91,719 L59,719 L49,750 L81,750 Z M81,750 L55,768 L65,799 L91,780 Z M59,719 L33,700 L7,719 L33,738 Z M55,768 L23,768 L33,799 L65,799 Z M91,818 L59,818 L49,848 L81,848 Z M117,799 L91,818 L101,848 L127,829 Z M117,799 L91,780 L65,799 L91,818 Z M81,848 L49,848 L59,879 L91,879 Z M117,897 L91,879 L65,897 L91,916 Z M127,867 L117,897 L91,879 L101,848 Z M149,897 L117,897 L127,928 L159,928 Z M159,928 L127,928 L117,958 L149,958 Z M175,879 L149,897 L159,928 L185,909 Z M185,848 L153,848 L143,879 L175,879 Z M175,818 L143,818 L153,848 L185,848 Z M211,867 L201,897 L175,879 L185,848 Z M153,848 L127,829 L101,848 L127,867 Z M243,867 L211,867 L201,897 L233,897 Z M269,848 L243,867 L253,897 L279,879 Z M269,848 L243,829 L217,848 L243,867 Z M233,897 L201,897 L211,928 L243,928 Z M243,928 L211,928 L201,958 L233,958 Z M269,947 L259,977 L233,958 L243,928 Z M233,958 L207,977 L217,1007 L243,989 Z M211,928 L185,909 L159,928 L185,947 Z M185,947 L175,977 L149,958 L159,928 Z M175,977 L149,996 L159,1026 L185,1007 Z M207,977 L175,977 L185,1007 L217,1007 Z M243,1026 L211,1026 L201,1057 L233,1057 Z M269,1007 L243,1026 L253,1057 L279,1038 Z M269,1007 L243,989 L217,1007 L243,1026 Z M233,1057 L201,1057 L211,1087 L243,1087 Z M211,1026 L201,1057 L175,1038 L185,1007 Z M269,1106 L243,1087 L217,1106 L243,1125 Z M279,1076 L269,1106 L243,1087 L253,1057 Z M301,1106 L269,1106 L279,1136 L311,1136 Z M327,1087 L301,1106 L311,1136 L336,1118 Z M336,1057 L304,1057 L295,1087 L327,1087 Z M327,1026 L295,1026 L304,1057 L336,1057 Z M362,1076 L352,1106 L327,1087 L336,1057 Z M304,1057 L279,1038 L253,1057 L279,1076 Z M388,1057 L362,1038 L336,1057 L362,1076 Z M394,1076 L362,1076 L372,1106 L404,1106 Z M404,1106 L394,1136 L420,1155 L430,1125 Z M404,1106 L372,1106 L362,1136 L394,1136 Z M420,1057 L394,1076 L404,1106 L430,1087 Z M430,1087 L456,1106 L430,1125 L404,1106 Z M430,1026 L420,1057 L394,1038 L404,1007 Z M478,1076 L446,1076 L456,1106 L488,1106 Z M462,1026 L452,1057 L478,1076 L488,1045 Z M462,1026 L430,1026 L420,1057 L452,1057 Z M488,1007 L514,1026 L488,1045 L462,1026 Z M504,1057 L478,1076 L488,1106 L514,1087 Z M546,1026 L514,1026 L524,1057 L556,1057 Z M556,1057 L546,1087 L572,1106 L582,1076 Z M556,1057 L524,1057 L514,1087 L546,1087 Z M572,1007 L546,1026 L556,1057 L582,1038 Z M582,1038 L608,1057 L582,1076 L556,1057 Z M582,977 L572,1007 L598,1026 L608,996 Z M582,977 L550,977 L540,1007 L572,1007 Z M572,947 L540,947 L550,977 L582,977 Z M608,958 L633,977 L608,996 L582,977 Z M608,996 L640,996 L649,1026 L617,1026 Z M524,958 L550,977 L524,996 L498,977 Z M514,928 L488,947 L498,977 L524,958 Z M514,928 L488,909 L462,928 L488,947 Z M498,977 L488,1007 L514,1026 L524,996 Z M488,947 L456,947 L446,977 L478,977 Z M478,977 L446,977 L456,1007 L488,1007 Z M456,947 L446,977 L420,958 L430,928 Z M446,977 L420,996 L430,1026 L456,1007 Z M446,977 L420,958 L394,977 L420,996 Z M394,977 L362,977 L372,1007 L404,1007 Z M404,1007 L372,1007 L362,1038 L394,1038 Z M404,947 L372,947 L362,977 L394,977 Z M362,977 L336,958 L311,977 L336,996 Z M336,996 L327,1026 L301,1007 L311,977 Z M352,1007 L327,1026 L336,1057 L362,1038 Z M362,916 L352,947 L327,928 L336,897 Z M388,897 L362,879 L336,897 L362,916 Z M336,897 L304,897 L295,928 L327,928 Z M394,916 L362,916 L372,947 L404,947 Z M420,897 L394,916 L404,947 L430,928 Z M430,867 L420,897 L394,879 L404,848 Z M452,897 L420,897 L430,928 L462,928 Z M478,879 L452,897 L462,928 L488,909 Z M488,848 L456,848 L446,879 L478,879 Z M478,818 L446,818 L456,848 L488,848 Z M514,867 L504,897 L478,879 L488,848 Z M456,848 L430,829 L404,848 L430,867 Z M420,799 L394,818 L404,848 L430,829 Z M404,848 L372,848 L362,879 L394,879 Z M394,818 L362,818 L372,848 L404,848 Z M362,818 L352,848 L327,829 L336,799 Z M352,848 L327,867 L336,897 L362,879 Z M352,848 L327,829 L301,848 L327,867 Z M301,848 L269,848 L279,879 L311,879 Z M327,768 L295,768 L304,799 L336,799 Z M311,818 L279,818 L269,848 L301,848 Z M295,768 L269,787 L279,818 L304,799 Z M295,768 L269,750 L243,768 L269,787 Z M279,818 L269,848 L243,829 L253,799 Z M243,768 L211,768 L201,799 L233,799 Z M233,738 L201,738 L211,768 L243,768 Z M233,799 L201,799 L211,829 L243,829 Z M211,768 L185,750 L159,768 L185,787 Z M185,787 L175,818 L149,799 L159,768 Z M201,799 L175,818 L185,848 L211,829 Z M159,768 L127,768 L117,799 L149,799 Z M149,738 L117,738 L127,768 L159,768 Z M304,738 L295,768 L269,750 L279,719 Z M388,799 L362,780 L336,799 L362,818 Z M398,768 L388,799 L362,780 L372,750 Z M430,768 L398,768 L388,799 L420,799 Z M456,787 L446,818 L420,799 L430,768 Z M488,787 L456,787 L446,818 L478,818 Z M514,768 L488,787 L498,818 L524,799 Z M514,768 L488,750 L462,768 L488,787 Z M524,738 L514,768 L488,750 L498,719 Z M546,768 L514,768 L524,799 L556,799 Z M556,738 L524,738 L514,768 L546,768 Z M572,689 L582,658 L556,640 L546,670 Z M572,689 L540,689 L550,719 L582,719 Z M608,700 L640,700 L649,670 L617,670 Z M608,738 L598,768 L572,750 L582,719 Z M608,738 L640,738 L649,768 L617,768 Z M540,689 L514,708 L524,738 L550,719 Z M540,689 L514,670 L488,689 L514,708 Z M617,768 L649,768 L640,799 L608,799 Z M633,719 L608,700 L582,719 L608,738 Z M598,768 L572,787 L582,818 L608,799 Z M598,768 L572,750 L546,768 L572,787 Z M649,768 L640,799 L665,818 L675,787 Z M665,719 L640,738 L649,768 L675,750 Z M665,719 L675,689 L649,670 L640,700 Z M665,719 L697,719 L707,689 L675,689 Z M675,750 L701,768 L675,787 L649,768 Z M691,738 L723,738 L733,768 L701,768 Z M697,719 L707,689 L733,708 L723,738 Z M733,670 L759,689 L733,708 L707,689 Z M733,670 L743,640 L769,658 L759,689 Z M759,689 L791,689 L801,719 L769,719 Z M785,670 L817,670 L827,640 L795,640 Z M749,719 L723,738 L733,768 L759,750 Z M791,689 L817,670 L827,700 L801,719 Z M801,719 L827,738 L853,719 L827,700 Z M817,670 L827,640 L853,658 L843,689 Z M843,689 L875,689 L885,719 L853,719 Z M843,689 L875,689 L885,658 L853,658 Z M817,609 L843,590 L853,621 L827,640 Z M859,640 L885,658 L911,640 L885,621 Z M885,621 L895,590 L920,609 L911,640 Z M885,658 L911,640 L920,670 L895,689 Z M911,640 L943,640 L952,670 L920,670 Z M911,640 L943,640 L952,609 L920,609 Z M885,719 L911,738 L936,719 L911,700 Z M911,700 L920,670 L946,689 L936,719 Z M911,738 L943,738 L952,768 L920,768 Z M875,750 L885,719 L911,738 L901,768 Z M843,750 L875,750 L885,719 L853,719 Z M817,768 L791,787 L801,818 L827,799 Z M817,768 L849,768 L859,799 L827,799 Z M827,799 L817,829 L843,848 L853,818 Z M791,750 L801,719 L827,738 L817,768 Z M849,768 L875,750 L885,780 L859,799 Z M859,799 L885,818 L911,799 L885,780 Z M885,818 L911,799 L920,829 L895,848 Z M895,848 L920,867 L946,848 L920,829 Z M895,848 L885,879 L911,897 L920,867 Z M911,799 L943,799 L952,768 L920,768 Z M853,818 L885,818 L875,848 L843,848 Z M843,848 L817,867 L827,897 L853,879 Z M843,848 L875,848 L885,879 L853,879 Z M817,829 L843,848 L817,867 L791,848 Z M759,848 L733,867 L743,897 L769,879 Z M759,848 L791,848 L801,879 L769,879 Z M769,879 L759,909 L785,928 L795,897 Z M733,829 L759,848 L733,867 L707,848 Z M769,818 L801,818 L791,848 L759,848 Z M759,787 L791,787 L801,818 L769,818 Z M733,768 L723,799 L749,818 L759,787 Z M759,750 L785,768 L759,787 L733,768 Z M759,750 L791,750 L801,719 L769,719 Z M723,799 L697,818 L707,848 L733,829 Z M701,768 L733,768 L723,799 L691,799 Z M665,818 L640,836 L649,867 L675,848 Z M665,818 L697,818 L707,848 L675,848 Z M675,848 L665,879 L691,897 L701,867 Z M608,836 L640,836 L649,867 L617,867 Z M608,799 L633,818 L608,836 L582,818 Z M582,818 L572,848 L598,867 L608,836 Z M582,818 L550,818 L540,848 L572,848 Z M572,848 L546,867 L556,897 L582,879 Z M550,818 L540,848 L514,829 L524,799 Z M540,848 L514,829 L488,848 L514,867 Z M582,879 L608,897 L582,916 L556,897 Z M546,867 L514,867 L524,897 L556,897 Z M608,897 L640,897 L649,928 L617,928 Z M617,928 L649,928 L640,958 L608,958 Z M598,928 L572,947 L582,977 L608,958 Z M617,867 L649,867 L640,897 L608,897 Z M649,928 L640,958 L665,977 L675,947 Z M665,879 L691,897 L665,916 L640,897 Z M675,947 L707,947 L697,977 L665,977 Z M691,897 L665,916 L675,947 L701,928 Z M691,897 L723,897 L733,928 L701,928 Z M701,867 L733,867 L723,897 L691,897 Z M733,928 L723,958 L749,977 L759,947 Z M759,909 L785,928 L759,947 L733,928 Z M759,947 L791,947 L801,977 L769,977 Z M723,958 L749,977 L723,996 L697,977 Z M749,977 L723,996 L733,1026 L759,1007 Z M759,1007 L785,1026 L759,1045 L733,1026 Z M743,1057 L733,1087 L759,1106 L769,1076 Z M701,1026 L733,1026 L723,1057 L691,1057 Z M675,1007 L665,1038 L691,1057 L701,1026 Z M691,1057 L665,1076 L675,1106 L701,1087 Z M691,1057 L723,1057 L733,1087 L701,1087 Z M665,1038 L691,1057 L665,1076 L640,1057 Z M649,1087 L640,1118 L665,1136 L675,1106 Z M608,1057 L640,1057 L649,1087 L617,1087 Z M617,1087 L649,1087 L640,1118 L608,1118 Z M598,1087 L572,1106 L582,1136 L608,1118 Z M617,1026 L649,1026 L640,1057 L608,1057 Z M608,1118 L633,1136 L608,1155 L582,1136 Z M572,1106 L540,1106 L550,1136 L582,1136 Z M582,1136 L572,1167 L598,1186 L608,1155 Z M540,1106 L514,1125 L524,1155 L550,1136 Z M514,1087 L540,1106 L514,1125 L488,1106 Z M488,1106 L456,1106 L446,1136 L478,1136 Z M498,1136 L488,1167 L514,1186 L524,1155 Z M478,1136 L446,1136 L456,1167 L488,1167 Z M446,1136 L420,1155 L430,1186 L456,1167 Z M420,1155 L388,1155 L398,1186 L430,1186 Z M430,1186 L420,1216 L446,1235 L456,1204 Z M430,1186 L398,1186 L388,1216 L420,1216 Z M362,1136 L336,1155 L346,1186 L372,1167 Z M362,1136 L336,1118 L311,1136 L336,1155 Z M372,1167 L398,1186 L372,1204 L346,1186 Z M488,1204 L456,1204 L446,1235 L478,1235 Z M514,1186 L488,1204 L498,1235 L524,1216 Z M488,1167 L514,1186 L488,1204 L462,1186 Z M524,1216 L514,1246 L540,1265 L550,1235 Z M546,1186 L514,1186 L524,1216 L556,1216 Z M572,1167 L598,1186 L572,1204 L546,1186 Z M556,1155 L524,1155 L514,1186 L546,1186 Z M582,1235 L550,1235 L540,1265 L572,1265 Z M598,1186 L572,1204 L582,1235 L608,1216 Z M608,1216 L633,1235 L608,1254 L582,1235 Z M608,1155 L640,1155 L649,1186 L617,1186 Z M617,1186 L649,1186 L640,1216 L608,1216 Z M649,1186 L640,1216 L665,1235 L675,1204 Z M665,1136 L640,1155 L649,1186 L675,1167 Z M675,1167 L701,1186 L675,1204 L649,1186 Z M691,1155 L723,1155 L733,1186 L701,1186 Z M675,1106 L707,1106 L697,1136 L665,1136 Z M707,1106 L697,1136 L723,1155 L733,1125 Z M733,1087 L759,1106 L733,1125 L707,1106 Z M759,1106 L791,1106 L801,1136 L769,1136 Z M769,1136 L801,1136 L791,1167 L759,1167 Z M749,1136 L723,1155 L733,1186 L759,1167 Z M769,1076 L801,1076 L791,1106 L759,1106 Z M801,1136 L791,1167 L817,1186 L827,1155 Z M817,1087 L843,1106 L817,1125 L791,1106 Z M827,1057 L817,1087 L843,1106 L853,1076 Z M853,1076 L885,1076 L875,1106 L843,1106 Z M885,1038 L911,1057 L885,1076 L859,1057 Z M911,1057 L885,1076 L895,1106 L920,1087 Z M911,1057 L943,1057 L952,1087 L920,1087 Z M885,1136 L875,1167 L901,1186 L911,1155 Z M843,1106 L817,1125 L827,1155 L853,1136 Z M843,1106 L875,1106 L885,1136 L853,1136 Z M827,1155 L859,1155 L849,1186 L817,1186 Z M817,1186 L791,1204 L801,1235 L827,1216 Z M817,1186 L849,1186 L859,1216 L827,1216 Z M875,1167 L901,1186 L875,1204 L849,1186 Z M911,1155 L943,1155 L952,1186 L920,1186 Z M968,1136 L943,1155 L952,1186 L978,1167 Z M978,1106 L968,1136 L994,1155 L1004,1125 Z M1004,1087 L1030,1106 L1004,1125 L978,1106 Z M946,1106 L978,1106 L968,1136 L936,1136 Z M920,1087 L911,1118 L936,1136 L946,1106 Z M911,1118 L936,1136 L911,1155 L885,1136 Z M968,1038 L994,1057 L968,1076 L943,1057 Z M978,1007 L1004,1026 L1030,1007 L1004,989 Z M978,1007 L968,1038 L994,1057 L1004,1026 Z M920,1026 L952,1026 L943,1057 L911,1057 Z M895,1007 L885,1038 L911,1057 L920,1026 Z M911,958 L936,977 L911,996 L885,977 Z M853,977 L885,977 L875,1007 L843,1007 Z M843,947 L875,947 L885,977 L853,977 Z M827,958 L853,977 L827,996 L801,977 Z M843,1007 L817,1026 L827,1057 L853,1038 Z M843,1007 L875,1007 L885,1038 L853,1038 Z M817,928 L791,947 L801,977 L827,958 Z M801,977 L791,1007 L817,1026 L827,996 Z M769,977 L801,977 L791,1007 L759,1007 Z M827,897 L817,928 L843,947 L853,916 Z M795,897 L827,897 L817,928 L785,928 Z M853,916 L885,916 L875,947 L843,947 Z M885,879 L911,897 L885,916 L859,897 Z M911,897 L885,916 L895,947 L920,928 Z M911,897 L943,897 L952,928 L920,928 Z M920,928 L911,958 L936,977 L946,947 Z M943,897 L968,879 L978,909 L952,928 Z M952,928 L978,947 L1004,928 L978,909 Z M978,848 L1004,867 L1030,848 L1004,829 Z M978,848 L968,879 L994,897 L1004,867 Z M968,818 L994,799 L1004,829 L978,848 Z M1004,829 L1036,829 L1046,799 L1014,799 Z M1004,867 L1036,867 L1046,897 L1014,897 Z M946,848 L978,848 L968,879 L936,879 Z M936,818 L968,818 L978,848 L946,848 Z M1014,897 L1046,897 L1036,928 L1004,928 Z M1036,867 L1062,848 L1072,879 L1046,897 Z M1062,848 L1094,848 L1104,879 L1072,879 Z M1062,848 L1094,848 L1104,818 L1072,818 Z M1072,879 L1062,909 L1088,928 L1098,897 Z M1036,829 L1046,799 L1072,818 L1062,848 Z M1094,848 L1120,867 L1146,848 L1120,829 Z M1120,829 L1130,799 L1156,818 L1146,848 Z M1120,867 L1146,848 L1156,879 L1130,897 Z M1130,799 L1156,818 L1182,799 L1156,780 Z M1156,780 L1166,750 L1192,768 L1182,799 Z M1156,818 L1188,818 L1198,848 L1166,848 Z M1088,768 L1120,768 L1130,799 L1098,799 Z M1088,768 L1120,768 L1130,738 L1098,738 Z M1062,787 L1088,768 L1098,799 L1072,818 Z M1062,750 L1072,719 L1098,738 L1088,768 Z M1130,738 L1156,719 L1166,750 L1140,768 Z M1156,719 L1188,719 L1198,750 L1166,750 Z M1156,719 L1188,719 L1198,689 L1166,689 Z M1104,719 L1130,738 L1156,719 L1130,700 Z M1094,689 L1120,670 L1130,700 L1104,719 Z M1120,670 L1130,640 L1156,658 L1146,689 Z M1130,640 L1156,658 L1182,640 L1156,621 Z M1088,670 L1120,670 L1130,640 L1098,640 Z M1062,689 L1094,689 L1104,719 L1072,719 Z M1088,609 L1120,609 L1130,640 L1098,640 Z M1062,590 L1094,590 L1104,560 L1072,560 Z M1046,640 L1072,658 L1098,640 L1072,621 Z M1036,609 L1062,590 L1072,621 L1046,640 Z M1036,670 L1046,640 L1072,658 L1062,689 Z M1004,609 L1036,609 L1046,640 L1014,640 Z M1004,670 L1036,670 L1046,640 L1014,640 Z M978,689 L1004,708 L1030,689 L1004,670 Z M1004,708 L1036,708 L1046,738 L1014,738 Z M1036,708 L1062,689 L1072,719 L1046,738 Z M1036,768 L1062,787 L1088,768 L1062,750 Z M1004,768 L1036,768 L1046,799 L1014,799 Z M1004,768 L1036,768 L1046,738 L1014,738 Z M968,719 L978,689 L1004,708 L994,738 Z M952,768 L978,787 L1004,768 L978,750 Z M943,738 L968,719 L978,750 L952,768 Z M943,799 L952,768 L978,787 L968,818 Z M936,719 L968,719 L978,689 L946,689 Z M943,640 L968,658 L994,640 L968,621 Z M968,621 L978,590 L1004,609 L994,640 Z M968,658 L994,640 L1004,670 L978,689 Z M978,590 L1004,609 L1030,590 L1004,571 Z M911,579 L936,560 L946,590 L920,609 Z M885,560 L911,579 L936,560 L911,541 Z M875,529 L901,511 L911,541 L885,560 Z M911,541 L943,541 L952,511 L920,511 Z M843,529 L875,529 L885,560 L853,560 Z M843,590 L875,590 L885,621 L853,621 Z M843,590 L875,590 L885,560 L853,560 Z M817,511 L827,480 L801,461 L791,492 Z M817,511 L849,511 L859,480 L827,480 Z M801,560 L827,579 L853,560 L827,541 Z M791,529 L817,511 L827,541 L801,560 Z M791,590 L801,560 L827,579 L817,609 Z M759,590 L791,590 L801,560 L769,560 Z M733,609 L759,590 L769,621 L743,640 Z M733,609 L707,590 L733,571 L759,590 Z M785,609 L817,609 L827,640 L795,640 Z M743,640 L769,658 L795,640 L769,621 Z M691,640 L665,658 L675,689 L701,670 Z M691,640 L665,621 L640,640 L665,658 Z M691,640 L701,609 L675,590 L665,621 Z M691,640 L723,640 L733,670 L701,670 Z M691,640 L723,640 L733,609 L701,609 Z M827,480 L853,461 L843,431 L817,450 Z M849,511 L859,480 L885,499 L875,529 Z M859,480 L885,499 L911,480 L885,461 Z M885,461 L895,431 L920,450 L911,480 Z M911,480 L943,480 L952,511 L920,511 Z M936,461 L968,461 L978,431 L946,431 Z M943,480 L968,461 L978,492 L952,511 Z M952,511 L978,529 L1004,511 L978,492 Z M968,461 L978,431 L1004,450 L994,480 Z M978,431 L1004,412 L994,382 L968,400 Z M978,431 L1004,450 L1030,431 L1004,412 Z M1004,412 L1036,412 L1046,382 L1014,382 Z M1004,450 L1036,450 L1046,480 L1014,480 Z M946,431 L978,431 L968,400 L936,400 Z M911,382 L920,351 L895,332 L885,363 Z M911,382 L943,382 L952,351 L920,351 Z M895,431 L920,412 L911,382 L885,400 Z M895,431 L920,450 L946,431 L920,412 Z M885,400 L859,382 L885,363 L911,382 Z M827,382 L853,363 L843,332 L817,351 Z M843,431 L853,400 L827,382 L817,412 Z M843,431 L875,431 L885,400 L853,400 Z M853,461 L885,461 L875,431 L843,431 Z M817,450 L791,431 L817,412 L843,431 Z M759,431 L769,400 L743,382 L733,412 Z M759,431 L791,431 L801,400 L769,400 Z M769,461 L801,461 L791,431 L759,431 Z M733,450 L707,431 L733,412 L759,431 Z M769,400 L795,382 L785,351 L759,370 Z M759,370 L733,351 L759,332 L785,351 Z M795,382 L827,382 L817,351 L785,351 Z M733,351 L759,332 L749,302 L723,321 Z M723,321 L697,302 L723,283 L749,302 Z M759,332 L791,332 L801,302 L769,302 Z M675,332 L707,332 L697,302 L665,302 Z M691,382 L701,351 L675,332 L665,363 Z M691,382 L723,382 L733,351 L701,351 Z M701,412 L733,412 L723,382 L691,382 Z M665,400 L640,382 L665,363 L691,382 Z M649,351 L675,332 L665,302 L640,321 Z M608,382 L640,382 L649,351 L617,351 Z M598,351 L608,321 L582,302 L572,332 Z M617,412 L649,412 L640,382 L608,382 Z M582,400 L556,382 L582,363 L608,382 Z M617,351 L649,351 L640,321 L608,321 Z M608,321 L582,302 L608,283 L633,302 Z M582,302 L608,283 L598,253 L572,272 Z M582,302 L550,302 L540,272 L572,272 Z M665,302 L675,272 L649,253 L640,283 Z M665,302 L697,302 L707,272 L675,272 Z M675,272 L701,253 L691,222 L665,241 Z M759,272 L733,253 L759,234 L785,253 Z M743,222 L769,203 L759,173 L733,192 Z M701,253 L733,253 L723,222 L691,222 Z M691,222 L701,192 L675,173 L665,203 Z M691,222 L723,222 L733,192 L701,192 Z M665,241 L639,222 L665,203 L691,222 Z M675,173 L707,173 L697,143 L665,143 Z M733,192 L707,173 L733,154 L759,173 Z M759,173 L791,173 L801,143 L769,143 Z M707,173 L733,154 L723,124 L697,143 Z M749,143 L759,112 L733,93 L723,124 Z M733,93 L759,75 L749,44 L723,63 Z M691,124 L723,124 L733,93 L701,93 Z M665,143 L675,112 L649,93 L639,124 Z M701,93 L733,93 L723,63 L691,63 Z M675,112 L649,93 L675,75 L701,93 Z M665,44 L697,44 L707,14 L675,14 Z M649,93 L675,75 L665,44 L639,63 Z M617,93 L649,93 L639,63 L607,63 Z M607,63 L582,44 L607,25 L633,44 Z M607,124 L639,124 L649,93 L617,93 Z M598,93 L607,63 L582,44 L572,75 Z M582,143 L607,124 L598,93 L572,112 Z M607,161 L582,143 L607,124 L633,143 Z M617,192 L649,192 L639,161 L607,161 Z M598,192 L607,161 L582,143 L572,173 Z M649,192 L675,173 L665,143 L639,161 Z M607,222 L639,222 L649,192 L617,192 Z M617,253 L649,253 L639,222 L607,222 Z M582,241 L556,222 L582,203 L607,222 Z M608,283 L640,283 L649,253 L617,253 Z M572,272 L582,241 L556,222 L546,253 Z M546,253 L514,253 L524,222 L556,222 Z M504,222 L514,192 L488,173 L478,203 Z M488,272 L462,253 L488,234 L514,253 Z M514,192 L488,173 L514,154 L540,173 Z M556,222 L582,203 L572,173 L546,192 Z M556,222 L524,222 L514,192 L546,192 Z M572,173 L540,173 L550,143 L582,143 Z M540,173 L550,143 L524,124 L514,154 Z M514,93 L524,63 L498,44 L488,75 Z M498,143 L524,124 L514,93 L488,112 Z M556,124 L524,124 L514,93 L546,93 Z M546,93 L514,93 L524,63 L556,63 Z M572,112 L546,93 L572,75 L598,93 Z M582,44 L550,44 L540,14 L572,14 Z M524,63 L550,44 L540,14 L514,33 Z M488,75 L456,75 L446,44 L478,44 Z M430,93 L456,75 L446,44 L420,63 Z M430,93 L398,93 L388,63 L420,63 Z M420,124 L388,124 L398,93 L430,93 Z M372,112 L346,93 L372,75 L398,93 Z M362,143 L336,124 L311,143 L336,161 Z M362,143 L372,112 L346,93 L336,124 Z M404,173 L430,154 L420,124 L394,143 Z M404,173 L372,173 L362,143 L394,143 Z M430,192 L404,173 L430,154 L456,173 Z M394,203 L362,203 L372,173 L404,173 Z M420,222 L430,192 L404,173 L394,203 Z M362,203 L336,222 L327,192 L352,173 Z M336,222 L304,222 L295,192 L327,192 Z M388,222 L362,203 L336,222 L362,241 Z M352,272 L362,241 L336,222 L327,253 Z M404,272 L372,272 L362,241 L394,241 Z M430,253 L404,272 L394,241 L420,222 Z M394,302 L362,302 L372,272 L404,272 Z M404,332 L372,332 L362,302 L394,302 Z M362,302 L336,283 L311,302 L336,321 Z M336,283 L311,302 L301,272 L327,253 Z M362,363 L336,382 L327,351 L352,332 Z M327,351 L336,321 L311,302 L301,332 Z M336,382 L304,382 L295,351 L327,351 Z M301,332 L269,332 L279,302 L311,302 Z M295,351 L269,332 L243,351 L269,370 Z M304,382 L279,400 L269,370 L295,351 Z M269,332 L243,351 L233,321 L259,302 Z M243,351 L211,351 L201,321 L233,321 Z M269,272 L243,253 L217,272 L243,290 Z M269,272 L279,241 L253,222 L243,253 Z M311,302 L279,302 L269,272 L301,272 Z M327,253 L295,253 L304,222 L336,222 Z M304,222 L279,203 L253,222 L279,241 Z M279,203 L253,222 L243,192 L269,173 Z M269,173 L243,154 L217,173 L243,192 Z M243,253 L211,253 L201,222 L233,222 Z M233,222 L201,222 L211,192 L243,192 Z M211,253 L185,272 L175,241 L201,222 Z M175,302 L185,272 L159,253 L149,283 Z M185,332 L159,351 L149,321 L175,302 Z M207,302 L175,302 L185,272 L217,272 Z M233,321 L243,290 L217,272 L207,302 Z M117,382 L91,363 L65,382 L91,400 Z M81,431 L49,431 L59,400 L91,400 Z M91,461 L59,461 L49,431 L81,431 Z M117,480 L91,461 L65,480 L91,499 Z M117,480 L127,450 L101,431 L91,461 Z M159,511 L127,511 L117,480 L149,480 Z M175,461 L143,461 L153,431 L185,431 Z M185,492 L159,511 L149,480 L175,461 Z M201,480 L211,450 L185,431 L175,461 Z M185,431 L153,431 L143,400 L175,400 Z M175,400 L185,370 L159,351 L149,382 Z M211,412 L185,431 L175,400 L201,382 Z M153,431 L127,412 L101,431 L127,450 Z M243,412 L211,412 L201,382 L233,382 Z M269,431 L243,412 L217,431 L243,450 Z M269,431 L279,400 L253,382 L243,412 Z M233,480 L201,480 L211,450 L243,450 Z M243,511 L211,511 L201,480 L233,480 Z M233,541 L201,541 L211,511 L243,511 Z M211,511 L185,492 L159,511 L185,529 Z M211,571 L185,590 L175,560 L201,541 Z M175,560 L185,529 L159,511 L149,541 Z M185,590 L153,590 L143,560 L175,560 Z M149,541 L117,541 L127,511 L159,511 Z M143,560 L117,541 L91,560 L117,579 Z M153,590 L127,609 L117,579 L143,560 Z M117,541 L91,560 L81,529 L107,511 Z M91,560 L59,560 L49,529 L81,529 Z M91,560 L59,560 L49,590 L81,590 Z M81,529 L91,499 L65,480 L55,511 Z M59,560 L33,541 L7,560 L33,579 Z M59,621 L33,640 L23,609 L49,590 Z M59,658 L49,689 L23,670 L33,640 Z M91,621 L59,621 L49,590 L81,590 Z M91,658 L59,658 L49,689 L81,689 Z M117,640 L91,621 L65,640 L91,658 Z M127,609 L117,640 L91,621 L101,590 Z M159,609 L127,609 L117,640 L149,640 Z M55,511 L23,511 L33,480 L65,480 Z M211,609 L201,640 L175,621 L185,590 Z M243,571 L211,571 L201,541 L233,541 Z M243,609 L211,609 L201,640 L233,640 Z M269,590 L243,571 L217,590 L243,609 Z M269,590 L279,560 L253,541 L243,571 Z M301,590 L269,590 L279,560 L311,560 Z M304,541 L279,560 L269,529 L295,511 Z M295,511 L269,492 L243,511 L269,529 Z M295,511 L304,480 L279,461 L269,492 Z M327,511 L295,511 L304,480 L336,480 Z M362,461 L336,480 L327,450 L352,431 Z M311,461 L279,461 L269,431 L301,431 Z M301,431 L269,431 L279,400 L311,400 Z M279,461 L253,480 L243,450 L269,431 Z M352,431 L327,412 L301,431 L327,450 Z M352,431 L362,400 L336,382 L327,412 Z M388,382 L362,363 L336,382 L362,400 Z M404,431 L372,431 L362,400 L394,400 Z M420,382 L430,351 L404,332 L394,363 Z M430,412 L404,431 L394,400 L420,382 Z M394,363 L362,363 L372,332 L404,332 Z M452,382 L420,382 L430,351 L462,351 Z M478,400 L488,370 L462,351 L452,382 Z M488,332 L456,332 L446,302 L478,302 Z M514,351 L488,332 L462,351 L488,370 Z M514,351 L524,321 L498,302 L488,332 Z M524,321 L498,302 L524,283 L550,302 Z M556,382 L582,363 L572,332 L546,351 Z M556,382 L524,382 L514,351 L546,351 Z M572,332 L540,332 L550,302 L582,302 Z M546,412 L514,412 L524,382 L556,382 Z M514,412 L488,431 L478,400 L504,382 Z M488,431 L456,431 L446,400 L478,400 Z M456,431 L430,412 L404,431 L430,450 Z M498,302 L524,283 L514,253 L488,272 Z M478,302 L446,302 L456,272 L488,272 Z M456,332 L430,351 L420,321 L446,302 Z M446,302 L420,283 L394,302 L420,321 Z M446,302 L456,272 L430,253 L420,283 Z M394,461 L362,461 L372,431 L404,431 Z M233,382 L201,382 L211,351 L243,351 Z M211,351 L185,332 L159,351 L185,370 Z M159,351 L127,351 L117,321 L149,321 Z M149,382 L117,382 L127,351 L159,351 Z M127,412 L101,431 L91,400 L117,382 Z M301,173 L269,173 L279,143 L311,143 Z M327,192 L336,161 L311,143 L301,173 Z M462,253 L488,234 L478,203 L452,222 Z M462,253 L430,253 L420,222 L452,222 Z M478,203 L446,203 L456,173 L488,173 Z M488,173 L456,173 L446,143 L478,143 Z M446,143 L456,112 L430,93 L420,124 Z M478,143 L446,143 L456,112 L488,112 Z M488,112 L462,93 L488,75 L514,93 Z M723,63 L733,33 L707,14 L697,44 Z M759,75 L791,75 L801,44 L769,44 Z M817,93 L827,63 L801,44 L791,75 Z M817,93 L849,93 L859,63 L827,63 Z M875,112 L849,93 L875,75 L901,93 Z M885,143 L911,124 L901,93 L875,112 Z M911,124 L943,124 L952,93 L920,93 Z M968,143 L978,112 L952,93 L943,124 Z M978,173 L1004,154 L994,124 L968,143 Z M946,173 L978,173 L968,143 L936,143 Z M911,161 L885,143 L911,124 L936,143 Z M920,192 L946,173 L936,143 L911,161 Z M911,222 L920,192 L895,173 L885,203 Z M911,222 L943,222 L952,192 L920,192 Z M968,241 L943,222 L968,203 L994,222 Z M978,272 L1004,253 L994,222 L968,241 Z M978,272 L1004,290 L1030,272 L1004,253 Z M994,222 L1004,192 L978,173 L968,203 Z M1004,253 L1036,253 L1046,222 L1014,222 Z M1004,192 L978,173 L1004,154 L1030,173 Z M1014,222 L1046,222 L1036,192 L1004,192 Z M1046,222 L1072,203 L1062,173 L1036,192 Z M1046,222 L1072,241 L1098,222 L1072,203 Z M1098,283 L1130,283 L1120,253 L1088,253 Z M1104,302 L1130,321 L1156,302 L1130,283 Z M1140,351 L1166,332 L1156,302 L1130,321 Z M1072,302 L1098,283 L1088,253 L1062,272 Z M1088,351 L1120,351 L1130,321 L1098,321 Z M1098,382 L1130,382 L1120,351 L1088,351 Z M1062,332 L1072,302 L1098,321 L1088,351 Z M1036,351 L1062,370 L1088,351 L1062,332 Z M1004,351 L1036,351 L1046,321 L1014,321 Z M1014,382 L1046,382 L1036,351 L1004,351 Z M978,332 L988,302 L1014,321 L1004,351 Z M1014,321 L1040,302 L1030,272 L1004,290 Z M1040,302 L1072,302 L1062,272 L1030,272 Z M952,351 L978,370 L1004,351 L978,332 Z M946,332 L978,332 L968,302 L936,302 Z M936,302 L946,272 L920,253 L911,283 Z M936,302 L968,302 L978,272 L946,272 Z M920,351 L946,332 L936,302 L911,321 Z M911,321 L885,302 L911,283 L936,302 Z M853,363 L885,363 L875,332 L843,332 Z M843,332 L875,332 L885,302 L853,302 Z M817,351 L827,321 L801,302 L791,332 Z M853,302 L885,302 L875,272 L843,272 Z M843,272 L853,241 L827,222 L817,253 Z M843,272 L875,272 L885,241 L853,241 Z M827,321 L801,302 L827,283 L853,302 Z M801,302 L827,283 L817,253 L791,272 Z M769,302 L801,302 L791,272 L759,272 Z M827,222 L853,203 L843,173 L817,192 Z M785,253 L795,222 L769,203 L759,234 Z M785,253 L817,253 L827,222 L795,222 Z M769,203 L801,203 L791,173 L759,173 Z M817,192 L791,173 L817,154 L843,173 Z M801,143 L827,124 L817,93 L791,112 Z M827,124 L859,124 L849,93 L817,93 Z M769,143 L801,143 L791,112 L759,112 Z M759,112 L733,93 L759,75 L785,93 Z M843,173 L853,143 L827,124 L817,154 Z M843,173 L875,173 L885,143 L853,143 Z M853,203 L885,203 L875,173 L843,173 Z M885,241 L859,222 L885,203 L911,222 Z M895,272 L920,253 L911,222 L885,241 Z M920,253 L952,253 L943,222 L911,222 Z M943,382 L952,351 L978,370 L968,400 Z M1072,400 L1098,382 L1088,351 L1062,370 Z M1036,412 L1046,382 L1072,400 L1062,431 Z M1062,431 L1094,431 L1104,461 L1072,461 Z M1062,431 L1094,431 L1104,400 L1072,400 Z M1036,450 L1062,431 L1072,461 L1046,480 Z M1094,431 L1120,450 L1146,431 L1120,412 Z M1120,412 L1130,382 L1156,400 L1146,431 Z M1120,450 L1146,431 L1156,461 L1130,480 Z M1130,382 L1156,400 L1182,382 L1156,363 Z M1156,363 L1166,332 L1192,351 L1182,382 Z M1156,400 L1188,400 L1198,431 L1166,431 Z M1188,400 L1214,382 L1224,412 L1198,431 Z M1188,461 L1198,431 L1224,450 L1214,480 Z M1214,480 L1240,461 L1249,492 L1224,511 Z M1156,461 L1188,461 L1198,431 L1166,431 Z M1130,480 L1156,499 L1182,480 L1156,461 Z M1182,480 L1214,480 L1224,511 L1192,511 Z M1156,499 L1182,480 L1192,511 L1166,529 Z M1156,560 L1188,560 L1198,590 L1166,590 Z M1156,560 L1188,560 L1198,529 L1166,529 Z M1188,560 L1214,579 L1240,560 L1214,541 Z M1214,541 L1224,511 L1249,529 L1240,560 Z M1214,579 L1240,560 L1249,590 L1224,609 Z M1214,640 L1246,640 L1256,670 L1224,670 Z M1214,640 L1246,640 L1256,609 L1224,609 Z M1214,700 L1224,670 L1249,689 L1240,719 Z M1188,719 L1214,738 L1240,719 L1214,700 Z M1214,738 L1240,719 L1249,750 L1224,768 Z M1214,799 L1224,768 L1249,787 L1240,818 Z M1182,799 L1214,799 L1224,768 L1192,768 Z M1188,818 L1214,799 L1224,829 L1198,848 Z M1188,879 L1198,848 L1224,867 L1214,897 Z M1156,879 L1188,879 L1198,848 L1166,848 Z M1130,897 L1156,916 L1182,897 L1156,879 Z M1156,916 L1182,897 L1192,928 L1166,947 Z M1140,928 L1130,958 L1156,977 L1166,947 Z M1104,977 L1130,996 L1156,977 L1130,958 Z M1088,928 L1120,928 L1130,958 L1098,958 Z M1072,977 L1062,1007 L1088,1026 L1098,996 Z M1062,947 L1088,928 L1098,958 L1072,977 Z M1098,996 L1130,996 L1120,1026 L1088,1026 Z M1040,977 L1072,977 L1062,1007 L1030,1007 Z M1014,958 L1004,989 L1030,1007 L1040,977 Z M1004,1026 L1036,1026 L1046,1057 L1014,1057 Z M1014,1057 L1046,1057 L1036,1087 L1004,1087 Z M994,1057 L968,1076 L978,1106 L1004,1087 Z M1036,1026 L1062,1007 L1072,1038 L1046,1057 Z M1046,1057 L1072,1076 L1098,1057 L1072,1038 Z M1046,1057 L1036,1087 L1062,1106 L1072,1076 Z M1004,928 L1036,928 L1046,958 L1014,958 Z M978,947 L1004,928 L1014,958 L988,977 Z M946,947 L978,947 L968,977 L936,977 Z M936,977 L911,996 L920,1026 L946,1007 Z M936,977 L968,977 L978,1007 L946,1007 Z M1036,928 L1062,947 L1088,928 L1062,909 Z M1098,897 L1130,897 L1120,928 L1088,928 Z M1188,658 L1214,640 L1224,670 L1198,689 Z M1156,658 L1188,658 L1198,689 L1166,689 Z M1156,621 L1188,621 L1198,590 L1166,590 Z M1188,621 L1198,590 L1224,609 L1214,640 Z M1120,609 L1146,590 L1156,621 L1130,640 Z M1094,590 L1104,560 L1130,579 L1120,609 Z M1104,560 L1130,579 L1156,560 L1130,541 Z M1130,541 L1140,511 L1166,529 L1156,560 Z M1062,529 L1088,511 L1098,541 L1072,560 Z M1036,511 L1062,529 L1088,511 L1062,492 Z M1036,571 L1046,541 L1072,560 L1062,590 Z M1004,511 L1036,511 L1046,541 L1014,541 Z M1004,511 L1036,511 L1046,480 L1014,480 Z M1004,571 L1036,571 L1046,541 L1014,541 Z M968,560 L994,541 L1004,571 L978,590 Z M943,541 L952,511 L978,529 L968,560 Z M936,560 L968,560 L978,590 L946,590 Z M1062,492 L1072,461 L1098,480 L1088,511 Z M1088,511 L1120,511 L1130,541 L1098,541 Z M1088,511 L1120,511 L1130,480 L1098,480 Z M1036,253 L1046,222 L1072,241 L1062,272 Z M749,302 L759,272 L733,253 L723,283 Z M675,431 L701,412 L691,382 L665,400 Z M759,1204 L791,1204 L801,1235 L769,1235 Z M723,1216 L697,1235 L707,1265 L733,1246 Z M665,1235 L697,1235 L707,1265 L675,1265 Z M701,1186 L733,1186 L723,1216 L691,1216 Z M733,1186 L723,1216 L749,1235 L759,1204 Z M759,1167 L785,1186 L759,1204 L733,1186 Z M785,1026 L759,1045 L769,1076 L795,1057 Z M785,1026 L817,1026 L827,1057 L795,1057 Z M665,977 L640,996 L649,1026 L675,1007 Z M665,977 L697,977 L707,1007 L675,1007 Z M556,897 L546,928 L572,947 L582,916 Z M556,897 L524,897 L514,928 L546,928 Z M546,670 L514,670 L524,640 L556,640 Z M546,609 L514,609 L524,640 L556,640 Z M572,590 L546,609 L556,640 L582,621 Z M572,590 L540,590 L550,560 L582,560 Z M540,590 L514,571 L488,590 L514,609 Z M540,590 L550,560 L524,541 L514,571 Z M304,897 L295,928 L269,909 L279,879 Z M295,928 L269,909 L243,928 L269,947 Z M327,928 L301,947 L311,977 L336,958 Z M301,947 L269,947 L279,977 L311,977 Z M311,977 L279,977 L269,1007 L301,1007 Z M556,541 L524,541 L514,511 L546,511 Z ")};class vt extends xt{constructor(e,s){const n=new Set,i=new Set;s.forEach(m=>{m.vertices.forEach(A=>{n.add(A)}),m.edges.forEach(A=>{i.add(A)})});const r=Array.from(i),a=[],l=[];for(const m of n)m.faces.every(A=>s.includes(A))?l.push(m):a.push(m);const h=[...l,...a];super({numNonExitVertices:l.length,numExitVertices:a.length,type:"faces",vertexLists:s.map(m=>m.vertices.map(A=>h.indexOf(A)))});k(this,"patternBoard");k(this,"planarPatternMap");this.originalBoard=e,this.originalBoardFaces=s;const M=new Map(h.map((m,A)=>[this.vertices[A],m.viewCoordinates])),Z=new Map;this.edges.forEach(m=>{if(!m.isExit){const A=h[m.vertices[0].index],x=h[m.vertices[1].index];Z.set(m,[A.viewCoordinates,x.viewCoordinates])}});const g=new Map;this.sectors.forEach(m=>{P()&&E(m.edges.length===2);const A=h[m.edges[0].vertices[0].index],x=h[m.edges[0].vertices[1].index],b=h[m.edges[1].vertices[0].index],w=h[m.edges[1].vertices[1].index],q=r.find(R=>R.vertices.includes(A)&&R.vertices.includes(x)),S=r.find(R=>R.vertices.includes(b)&&R.vertices.includes(w));P()&&E(q&&S);const T=on(q,S);P()&&E(T);const F=T.start.viewCoordinates,V=T.end.viewCoordinates,O=T.next.end.viewCoordinates;g.set(m,[F,V,O])});const p=new Map;this.faces.forEach(m=>{if(!m.isExit){const A=m.vertices.map(w=>h[w.index]),x=s.find(w=>w.vertices.every(q=>A.includes(q)));P()&&E(x);const b=x.vertices.map(w=>w.viewCoordinates);p.set(m,b)}}),this.faces.forEach(m=>{if(m.isExit){P()&&E(m.edges.length===1);const A=m.edges[0],x=h[A.vertices[0].index],b=h[A.vertices[1].index];P()&&E(x&&b);const w=r.find(T=>T.vertices.includes(x)&&T.vertices.includes(b));P()&&E(w);const q=s.includes(w.faces[0])?w.faces[1]:w.faces[0];P()&&E(q,"Did we hit null as in --- edge of board? can we expand the search pattern?");const S=[x.viewCoordinates,b.viewCoordinates,x.viewCoordinates.average(b.viewCoordinates).average(q.viewCoordinates)];p.set(m,S)}}),this.patternBoard=this,this.planarPatternMap={vertexMap:M,edgeMap:Z,sectorMap:g,faceMap:p}}static getSemiAdjacentFaces(e,s){const n=new Set;return s.vertices.forEach(i=>{i.faces.forEach(r=>{r!==s&&n.add(r)})}),n}static getFirstGeneration(e){const s=it.uniq(e.faces.map(i=>i.vertices.length)),n=e.vertices.map(i=>i.viewCoordinates).reduce((i,r)=>i.plus(r)).timesScalar(1/e.vertices.length);return s.map(i=>{const r=it.minBy(e.faces.filter(a=>a.vertices.length===i),a=>a.viewCoordinates.distanceSquared(n));return P()&&E(r),new vt(e,[r])})}static getNextGeneration(e){const s=[];return e.forEach(n=>{const i=new Set;n.originalBoardFaces.forEach(r=>{vt.getSemiAdjacentFaces(n.originalBoard,r).forEach(a=>{n.originalBoardFaces.includes(a)||i.add(a)})}),i.forEach(r=>{const a=[...n.originalBoardFaces,r],l=new vt(n.originalBoard,a);s.some(h=>x1(h,l))||s.push(l)})}),s}static getFirstNGenerations(e,s){const i=[vt.getFirstGeneration(e)];for(let r=0;r<s-1;r++)i.push(vt.getNextGeneration(i[i.length-1]));return i}static getUniformTilingGenerations(e,s){const n=e.generate({width:15,height:15}),i=new A1(n,e.scale??1);return vt.getFirstNGenerations(i,s)}}const b1=c=>{P()&&(c.edges.forEach(t=>{const e=t.forwardHalf,s=t.reversedHalf;E(e.edge===t),E(s.edge===t),E(!e.isReversed),E(s.isReversed),E(e.reversed===s),E(s.reversed===e),E(e.start===t.start),E(e.end===t.end),E(s.start===t.end),E(s.end===t.start),E(e.next.previous===e),E(e.previous.next===e),E(s.next.previous===s),E(s.previous.next===s),E(e.next!==e),E(e.previous!==e),E(s.next!==s),E(s.previous!==s),E(e.next.face===e.face),E(e.previous.face===e.face),E(s.next.face===s.face),E(s.previous.face===s.face),E(e.face===t.forwardFace),E(s.face===t.reversedFace)}),c.vertices.forEach(t=>{t.incomingHalfEdges.forEach(n=>{E(n.end===t)}),t.outgoingHalfEdges.forEach(n=>{E(n.start===t)});const e=n=>t.incomingHalfEdges[(n+t.incomingHalfEdges.length)%t.incomingHalfEdges.length],s=n=>t.outgoingHalfEdges[(n+t.outgoingHalfEdges.length)%t.outgoingHalfEdges.length];it.range(0,t.incomingHalfEdges.length).forEach(n=>{const i=e(n),r=s(n);E(i.reversed===r),E(i.next===s(n-1)),E(r.previous===e(n+1))}),t.edges.forEach(n=>{E(n.start===t||n.end===t),E(t.incomingHalfEdges.includes(n.forwardHalf)||t.outgoingHalfEdges.includes(n.forwardHalf)),E(t.incomingHalfEdges.includes(n.reversedHalf)||t.outgoingHalfEdges.includes(n.reversedHalf)),n.forwardFace&&(E(n.forwardFace.vertices.includes(t)),E(t.faces.includes(n.forwardFace))),n.reversedFace&&(E(n.reversedFace.vertices.includes(t)),E(t.faces.includes(n.reversedFace)))}),t.faces.forEach(n=>{E(n.vertices.includes(t))})}))};class wn extends Qe{constructor(e,s,n,i=0){let r,a;n?(r=new o(Math.sqrt(3),0).timesScalar(s),a=new o(Math.sqrt(3)/2,3/2).timesScalar(s)):(r=new o(3/2,Math.sqrt(3)/2).timesScalar(s),a=new o(0,Math.sqrt(3)).timesScalar(s));const l=[new o(1,0),new o(1,-1),new o(0,-1),new o(-1,0),new o(-1,1),new o(0,1)],h=it.range(0,6).map(x=>l[x].plus(l[(x+1)%6])),M=x=>h.map(b=>b.plus(x.timesScalar(3))),Z=(x,b)=>(Math.abs(x.x-b.x)+Math.abs(x.x+x.y-b.x-b.y)+Math.abs(x.y-b.y))/2,g=[];for(let x=-e;x<=e;x++)for(let b=Math.max(-e,-x-e);b<=Math.min(e,-x+e);b++){const w=new o(x,b);Z(w,new o(0,0))>=i&&g.push(w)}const m=it.uniqWith(g.flatMap(M),(x,b)=>x.equals(b)).map(x=>({logicalCoordinates:x,viewCoordinates:r.timesScalar(x.x).plus(a.timesScalar(x.y)).timesScalar(1/3)})),A=g.map(x=>({logicalCoordinates:x,vertices:M(x).map(b=>{const w=m.find(q=>q.logicalCoordinates.equals(b));return P()&&E(w),w})}));super(We(Js({vertices:m,faces:A},s)));k(this,"isHexagonal",!0);this.radius=e,this.scale=s,this.isPointyTop=n,this.holeRadius=i,P()&&b1(this)}static enumeratePointyFaceCoordinates(e){const s=[];for(let n=-e;n<=e;n++)for(let i=Math.max(-e,-n-e);i<=Math.min(e,-n+e);i++)s.push(new o(i,n));return s}}class _n extends Qe{constructor(e,s){const n=[],i=new Map,r=(l,h)=>{const M=`${l},${h}`;if(!i.has(M)){const Z={logicalCoordinates:new o(l,h),viewCoordinates:new o(l,h)};n.push(Z),i.set(M,Z)}return i.get(M)},a=it.range(0,s).flatMap(l=>it.range(0,e).map(h=>({logicalCoordinates:new o(h,l),vertices:[r(h,l),r(h+1,l),r(h+1,l+1),r(h,l+1)]})));super(We({vertices:n,faces:a}));k(this,"isSquare",!0);this.width=e,this.height=s,P()&&b1(this)}}const Ht=(c,t)=>({name:c.name,parameters:{width:{label:"Width",type:"integer",range:new t1(2,50)},height:{label:"Height",type:"integer",range:new t1(2,50)},squareRegion:{label:"Square",type:"boolean"}},defaultParameterValues:{width:(t==null?void 0:t.width)??10,height:(t==null?void 0:t.height)??10,squareRegion:(t==null?void 0:t.squareRegion)??!1},scale:c.scale,generate:e=>{const s=c.polygons,n=c.basisA,i=c.basisB,r=[],a=new dt(-e.width/2,-e.height/2,e.width/2,e.height/2),l=dt.NOTHING.copy();s.forEach(m=>{m.forEach(A=>{l.addPoint(A)})});const h=Math.max(Math.abs(a.minX),Math.abs(a.maxX),Math.abs(a.minY),Math.abs(a.maxY))*20,M=dt.NOTHING.copy(),Z=new o(0,0),g=new o(0,0),p=new o(0,0);return it.range(-h,h).forEach(m=>{Z.set(n).multiplyScalar(m),it.range(-h,h).forEach(A=>{g.set(i).multiplyScalar(A),p.set(Z).add(g),M.set(l).shift(p),a.intersectsBounds(M)&&s.forEach(x=>{const b=x.map(T=>T.plus(p)),w=m1(b),q=w.x*2/e.width,S=w.y*2/e.height;if(e.squareRegion){if(Math.abs(q)>=1||Math.abs(S)>=1-1e-6)return}else if(Math.sqrt(q*q+S*S)>=1-1e-6)return;r.push(b)})})}),r}}),De=new xt({numNonExitVertices:0,numExitVertices:0,type:"edge"},"single-edge"),vn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:2,spans:[]},"vertex-2-exit-none"),xn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:2,spans:[1]},"vertex-2-exit-one"),An=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:3,spans:[2]},"vertex-3-exit-two-adjacent"),bn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:4,spans:[1,1]},"vertex-4-exit-two-opposite"),En=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:4,spans:[3]},"vertex-4-exit-three-adjacent"),qn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:5,spans:[2,1]},"vertex-5-exit-two-one"),yn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:5,spans:[4]},"vertex-5-exit-four"),Pn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:6,spans:[1,1,1]},"vertex-6-exit-triple"),Sn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:6,spans:[2,2]},"vertex-6-exit-two-two"),Tn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:6,spans:[3,1]},"vertex-6-exit-three-one"),Cn=new xt({numNonExitVertices:0,numExitVertices:1,type:"exit-vertex",edgeCount:6,spans:[5]},"vertex-6-exit-five"),In=new xt({numNonExitVertices:1,numExitVertices:0,type:"non-exit-vertex",edgeCount:2},"vertex-2"),Fn=new xt({numNonExitVertices:1,numExitVertices:0,type:"non-exit-vertex",edgeCount:3},"vertex-3"),Vn=new xt({numNonExitVertices:1,numExitVertices:0,type:"non-exit-vertex",edgeCount:4},"vertex-4"),Bn=new xt({numNonExitVertices:1,numExitVertices:0,type:"non-exit-vertex",edgeCount:5},"vertex-5"),Rn=new xt({numNonExitVertices:1,numExitVertices:0,type:"non-exit-vertex",edgeCount:6},"vertex-6"),E1=[vn,xn,An,bn,En,qn,yn,Pn,Sn,Tn,Cn],q1=[In,Fn,Vn,Bn,Rn],IL=[De,...E1,...q1],Dt=c=>{const t=c.generate({width:20,height:20});return new A1(t,c.scale??1)},Se=[],Nn=c=>Se.find(t=>it.isEqual(t.descriptor,c))??null,$n=c=>{const t=Nn(c.descriptor);return t||(Se.find(e=>x1(c,e))??null)},FL=c=>Se.find(t=>t.name===c)??null,Te=(c,t)=>{const e=$n(c);return e||(Se.push(c),Ln.set(c,t),c)},Rt=(c,t)=>t.map((e,s)=>e.map((n,i)=>(n.name=`${c}-${s}-${i}`,Te(n,n.planarPatternMap))));Te(De,rn(De));E1.forEach(c=>Te(c,v1(c)));q1.forEach(c=>Te(c,v1(c)));const kn=Dt(Ht(ln)),On=new _n(20,20),Hn=Dt(Ht(gn)),Dn=new wn(10,1,!0),zn=Dt(Ht(dn)),Xn=Dt(Ht(Mn)),Yn=Dt(Ht(hn)),Gn=Dt(Ht(pn)),Wn=Dt(Ht(Zn)),Qn=Dt(Ht(mn)),Un=Dt(Ht(cn)),Jn=Dt(Ht(fn)),jn=Dt(Ht(un)),Kn=c=>vt.getFirstNGenerations(kn,c),tL=c=>vt.getFirstNGenerations(On,c),eL=c=>vt.getFirstNGenerations(Hn,c),sL=c=>vt.getFirstNGenerations(Dn,c),nL=c=>vt.getFirstNGenerations(zn,c),LL=c=>vt.getFirstNGenerations(Xn,c),iL=c=>vt.getFirstNGenerations(Yn,c),rL=c=>vt.getFirstNGenerations(Gn,c),aL=c=>vt.getFirstNGenerations(Wn,c),oL=c=>vt.getFirstNGenerations(Qn,c),lL=c=>vt.getFirstNGenerations(Un,c),hL=c=>vt.getFirstNGenerations(Jn,c),cL=c=>vt.getFirstNGenerations(jn,c),VL=Rt("square",tL(5)),BL=Rt("hexagonal",sL(4)),RL=Rt("triangular",Kn(4)),NL=Rt("cairo",eL(4)),$L=Rt("rhombille",nL(4)),kL=Rt("snub-square",LL(3)),OL=Rt("trihexagonal",iL(3)),HL=Rt("floret-pentagonal",rL(3)),DL=Rt("deltoidal-trihexagonal",aL(3)),zL=Rt("portugal",oL(3)),XL=Rt("rhombitrihexagonal",lL(3)),YL=Rt("prismatic-pentagonal",hL(3)),GL=Rt("elongated-triangular",cL(3));export{bL as $,Qn as A,Qs as B,Un as C,Jn as D,jn as E,M1 as F,qL as G,wn as H,yL as I,PL as J,SL as K,ye as L,TL as M,CL as N,Ht as O,A1 as P,dn as Q,gn as R,Bt as S,Mn as T,ln as U,hn as V,vL as W,pn as X,Zn as Y,AL as Z,it as _,Ws as a,xL as a0,mn as a1,mL as a2,EL as a3,wL as a4,cn as a5,_L as a6,fn as a7,un as a8,fL as a9,D1 as aA,ws as aB,Et as aC,vs as aD,X1 as aE,bs as aF,As as aG,Es as aH,ue as aI,De as aJ,vn as aK,xn as aL,An as aM,bn as aN,En as aO,In as aP,Fn as aQ,FL as aR,Nn as aS,HL as aT,DL as aU,zL as aV,XL as aW,YL as aX,GL as aY,pL as aa,Vt as ab,_s as ac,xt as ad,nn as ae,IL as af,x1 as ag,h1 as ah,vt as ai,on as aj,oe as ak,RL as al,f1 as am,BL as an,$L as ao,NL as ap,kL as aq,OL as ar,gL as as,_1 as at,an as au,xs as av,Xs as aw,Vs as ax,p1 as ay,O1 as az,Gs as b,Ys as c,Qe as d,P as e,E as f,b1 as g,m1 as h,qe as i,ZL as j,_n as k,H1 as l,We as m,en as n,On as o,Ln as p,Dn as q,Hn as r,VL as s,kn as t,zn as u,Vn as v,Xn as w,Yn as x,Gn as y,Wn as z};
