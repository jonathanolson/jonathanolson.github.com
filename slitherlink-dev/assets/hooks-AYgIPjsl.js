import"./UnivariatePolynomial-CzQEP6td.js";import{N as a,D as u}from"./PhetioControlledVisibilityProperty-Bd0APyjs.js";import{s as z,az as C,ad as g}from"./patternBoards-DKw4bfen.js";import{B as i}from"./BinaryRuleCollection-3SET39HA.js";import{B as r}from"./BinaryRuleSequence-DKLndh43.js";import{s as f,i as s}from"./PatternRule-BPSy1pyf.js";import{B as m}from"./BinaryMixedRuleGroup-DxUMHnng.js";import"./Highlander-C5Us1K0u.js";import"./PatternBoardSolver-DIAz22yg.js";import"./generalPatternBoardGenerations-BYWxxbUb.js";import"./RichSolution-DRmVpgml.js";const q=new a,B=new a({renderer:"svg",children:[q]}),c=new u(B,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(c.domElement);c.setWidthHeight(self.innerWidth,self.innerHeight);self.standardSquareBoardGenerations=z;self.getSerializedPatternBoardLibraryJS=()=>{const e=C();return JSON.stringify(g(JSON.stringify(e)))};self.getSequenceName=e=>r.getName(e);self.getEmptySequence=e=>r.empty(e).serialize();self.getSequenceStatus=e=>r.deserialize(e).getStatusString();self.getNextBoardInSequence=e=>{const o=r.deserialize(e).getNextBoard();return o?f(o):null};self.getSequenceWithProcessingBoard=(e,t)=>{const o=r.deserialize(e),l=s(t);return o.addProcessingBoard(l),o.serialize()};self.getSequenceWithoutProcessingBoard=(e,t)=>{const o=r.deserialize(e),l=s(t);return o.removeProcessingBoard(l),o.serialize()};self.getSequenceWithCollection=(e,t,o)=>{const l=r.deserialize(e),n=s(t),d=i.deserialize(o);return l.addProcessedBoardCollection(n,d),l.serialize()};self.getCollectionForSequence=(e,t)=>{const o=r.deserialize(e),l=s(t);return o.getCollectionForBoard(l).serialize()};self.withCollection=(e,t)=>{const o=i.deserialize(e),l=i.deserialize(t);return o.withCollection(l).serialize()};self.withCollectionNonequal=(e,t)=>{const o=i.deserialize(e),l=i.deserialize(t);return o.withCollectionNonequal(l).serialize()};self.withCollectionNonredundant=(e,t)=>{const o=i.deserialize(e),l=i.deserialize(t);return o.withCollectionNonredundant(l).serialize()};self.withoutCollectionNonequal=(e,t)=>{const o=i.deserialize(e),l=i.deserialize(t);return o.withoutCollectionNonequal(l).serialize()};self.withoutCollectionNonredundant=(e,t)=>{const o=i.deserialize(e),l=i.deserialize(t);return o.withoutCollectionNonredundant(l).serialize()};self.collectionsToSortedMixedGroup=(e,t)=>{const o=e?i.deserialize(e):null,l=t?i.deserialize(t):null;console.log("main count",o?o.size:0),console.log("highlander count",l?l.size:0);const n=m.fromCollections(o,l);return console.log("rule count",n.size),n.sortedDefault().serialize()};
