import{f as s,d as c,e as p,P as i,j as l,m as u,n as m,H as g,o as w}from"./chunk-18.js";import{V as a}from"./chunk-16.js";import{C as f,G as y,a as D,b as S}from"./chunk-28.js";import{B as h}from"./chunk-29.js";const v=e=>{if(e.type==="PolygonGeneratorBoard"){const t=s.find(r=>r.name===e.generator);return c()&&p(t),i.get(t,e.parameters)}else if(e.type==="BaseBoard"){const t=e.vertices.map(n=>({logicalCoordinates:new a(n.x,n.y),viewCoordinates:new a(n.vx,n.vy)})),r=e.faces.map(n=>({logicalCoordinates:new a(n.x,n.y),vertices:n.vertices.map(o=>t[o])}));return new l(u({vertices:t,faces:r}))}else{if(e.type==="SquareBoard")return new m(e.width,e.height);if(e.type==="HexagonalBoard")return new g(e.radius,e.scale,e.isPointyTop,e.holeRadius);throw new Error("Unknown board")}},C=(e,t)=>{const r=t.type;if(r==="CompleteData")return f.deserializeState(e,t);if(r==="FaceValueData")return y.deserializeState(e,t);if(r==="EdgeData")return D.deserializeState(e,t);if(r==="SimpleRegionData")return S.deserializeState(e,t);throw new Error(`Unknown action type: ${r}, could not deserialize`)},G=e=>{if(e.version!==1)throw new Error(`Unsupported puzzle version: ${e.version}`);const t=v(e.board),r=C(t,e.state);return new h(t,r)},V=e=>{try{const t=JSON.parse(w(e));return G(t)}catch(t){return console.error(t),null}};export{C as a,v as d,V as p};
