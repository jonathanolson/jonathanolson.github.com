import"./UnivariatePolynomial-1rLpyqfN.js";import{N as c,D as u}from"./PhetioControlledVisibilityProperty-CzTgKbkx.js";import{s as w}from"./patternBoards-CVo-HFgJ.js";import{B as n}from"./BinaryRuleCollection-ChMsuwM6.js";import{B as r}from"./BinaryRuleSequence-ODRds8fP.js";import{s as m,d as s}from"./PatternRule-Bgza_EDD.js";import{B as z}from"./BinaryMixedRuleGroup-DWLOdGJa.js";import"./getCoordinateClusteredMap-Bd_wM-c0.js";import"./getPeriodicTilingGenerator-zRiID_iR.js";import"./compression-CFlaLHJe.js";import"./FeatureSet-RmLjQa6B.js";import"./SectorOnlyOneFeature-B1Nn5A2g.js";import"./operations-BMyV0DHx.js";import"./logic-solver-DfsVuGQ5.js";import"./PatternBoardSolver-vRQRWARQ.js";import"./Highlander-BB6x0e65.js";import"./generalPatternBoardGenerations-DAzN66mx.js";import"./RichSolution-CJDHZecA.js";const C=new c,p=new c({renderer:"svg",children:[C]}),a=new u(p,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(a.domElement);a.setWidthHeight(window.innerWidth,window.innerHeight);window.standardSquareBoardGenerations=w;window.getSequenceName=e=>r.getName(e);window.getEmptySequence=e=>r.empty(e).serialize();window.getSequenceStatus=e=>r.deserialize(e).getStatusString();window.getNextBoardInSequence=e=>{const o=r.deserialize(e).getNextBoard();return o?m(o):null};window.getSequenceWithProcessingBoard=(e,t)=>{const o=r.deserialize(e),i=s(t);return o.addProcessingBoard(i),o.serialize()};window.getSequenceWithoutProcessingBoard=(e,t)=>{const o=r.deserialize(e),i=s(t);return o.removeProcessingBoard(i),o.serialize()};window.getSequenceWithCollection=(e,t,o)=>{const i=r.deserialize(e),l=s(t),d=n.deserialize(o);return i.addProcessedBoardCollection(l,d),i.serialize()};window.getCollectionForSequence=(e,t)=>{const o=r.deserialize(e),i=s(t);return o.getCollectionForBoard(i).serialize()};window.withCollection=(e,t)=>{const o=n.deserialize(e),i=n.deserialize(t);return o.withCollection(i).serialize()};window.withCollectionNonequal=(e,t)=>{const o=n.deserialize(e),i=n.deserialize(t);return o.withCollectionNonequal(i).serialize()};window.withCollectionNonredundant=(e,t)=>{const o=n.deserialize(e),i=n.deserialize(t);return o.withCollectionNonredundant(i).serialize()};window.withoutCollectionNonequal=(e,t)=>{const o=n.deserialize(e),i=n.deserialize(t);return o.withoutCollectionNonequal(i).serialize()};window.withoutCollectionNonredundant=(e,t)=>{const o=n.deserialize(e),i=n.deserialize(t);return o.withoutCollectionNonredundant(i).serialize()};window.collectionsToSortedMixedGroup=(e,t)=>{const o=e?n.deserialize(e):null,i=t?n.deserialize(t):null;console.log("main count",o?o.size:0),console.log("highlander count",i?i.size:0);const l=z.fromCollections(o,i);return console.log("rule count",l.size),l.sortedDefault().serialize()};
