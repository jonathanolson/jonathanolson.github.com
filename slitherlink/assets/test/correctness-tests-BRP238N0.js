import"../UnivariatePolynomial-CzQEP6td.js";import{Q as d,s as q,e as S,f as m,h as f,i as p,g as y,a as z,b as U,c as E,d as A}from"../square-only-all-unrestricted-KIfVkWVu.js";import{B as r}from"../BinaryRuleSequence-DKLndh43.js";import{g as B,i as O}from"../BinaryRuleCollection-3SET39HA.js";import{s as h}from"../PatternRule-BPSy1pyf.js";import"../generalPatternBoardGenerations-BYWxxbUb.js";import"../patternBoards-DKw4bfen.js";import"../RichSolution-DRmVpgml.js";import"../Highlander-C5Us1K0u.js";import"../PatternBoardSolver-DIAz22yg.js";d.module("pattern rule correctness",()=>{const e=(o,n)=>{n.patternBoards.forEach(l=>{const i=h(l);d.test(`${o} ${i}`,u=>{let a=0;const g=B(l,!1);let s=!0,c=null;n.forEachRule(t=>{s&&t.patternBoard===l&&(++a%50===1&&console.log(o,i,a-1),O(t,!0,g)||(s=!1,c=t.toCanonicalString()))}),u.ok(s,c??"all rules passed")})})};e("square-only-color-unrestricted",r.deserialize(q).collection),e("square-only-edge-sector",r.deserialize(S).collection),e("square-only-edge-sector-unrestricted",r.deserialize(m).collection),e("square-only-all",r.deserialize(f).collection),e("square-only-all-unrestricted",r.deserialize(p).collection),e("general-color-unrestricted",r.deserialize(y).collection),e("general-edge-sector",r.deserialize(z).collection),e("general-edge-sector-unrestricted",r.deserialize(U).collection),e("general-all",r.deserialize(E).collection),e("general-all-unrestricted",r.deserialize(A).collection)});self.assertions.enableAssert();
