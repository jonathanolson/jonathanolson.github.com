var Yi=Object.defineProperty;var Xi=(n,t,e)=>t in n?Yi(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var H=(n,t,e)=>(Xi(n,typeof t!="symbol"?t+"":t,e),e);import{z as it,N as Gi,D as W,t as us,ai as et,M as Vs,S as Ui,V as c,aj as Je,ak as ce,f as Es,o as Ms,B as gt,b as ie,E as Wi,e as Ji,Y as Xn,c as Ys,k as Qi,a5 as _e,a as he,a9 as ji,O as Wt,R as Xs}from"./UnivariatePolynomial-CzQEP6td.js";function Ki(n,t){if(n[t]!==void 0)return t;if(t=t.charAt(0).toUpperCase()+t.slice(1),n[`moz${t}`]!==void 0)return`moz${t}`;if(n[`Moz${t}`]!==void 0)return`Moz${t}`;if(n[`webkit${t}`]!==void 0)return`webkit${t}`;if(n[`ms${t}`]!==void 0)return`ms${t}`;if(n[`o${t}`]!==void 0)return`o${t}`}it.register("detectPrefix",Ki);const ot=navigator.userAgent;function U1(n){return Gn()===n}function Gs(){return!!(self.phet&&phet.chipper&&phet.chipper.queryParameters&&phet.chipper.queryParameters["phet-app"]||(ot.match(/(iPod|iPhone|iPad)/)||navigator.platform==="MacIntel"&&navigator.maxTouchPoints>=2)&&ot.match(/AppleWebKit/))}function Gn(){let n=-1,t=null;return navigator.appName==="Microsoft Internet Explorer"?(t=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),t.exec(ot)!==null&&(n=parseFloat(RegExp.$1))):navigator.appName==="Netscape"&&(t=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"),t.exec(ot)!==null&&(n=parseFloat(RegExp.$1))),n}const $i={firefox:ot.toLowerCase().includes("firefox"),mobileSafari:Gs(),safari5:!!(ot.match(/Version\/5\./)&&ot.match(/Safari\//)&&ot.match(/AppleWebKit/)),safari6:!!(ot.match(/Version\/6\./)&&ot.match(/Safari\//)&&ot.match(/AppleWebKit/)),safari7:!!(ot.match(/Version\/7\./)&&ot.match(/Safari\//)&&ot.match(/AppleWebKit/)),safari10:!!(ot.match(/Version\/10\./)&&ot.match(/Safari\//)&&ot.match(/AppleWebKit/)),safari11:!!(ot.match(/Version\/11\./)&&ot.match(/Safari\//)&&ot.match(/AppleWebKit/)),safari9:!!(ot.match(/Version\/9\./)&&ot.match(/Safari\//)&&ot.match(/AppleWebKit/)),safari:Gs()||!!(ot.match(/Version\//)&&ot.match(/Safari\//)&&ot.match(/AppleWebKit/)),ie:Gn()!==-1,ie9:U1(9),ie10:U1(10),ie11:U1(11),android:ot.indexOf("Android")>0,edge:!!ot.match(/Edge\//),chromium:/chrom(e|ium)/.test(ot.toLowerCase())&&!ot.match(/Edge\//),chromeOS:ot.indexOf("CrOS")>0,mac:navigator.platform.includes("Mac")};it.register("platform",$i);function t0(n,t){if(n[`on${t}`]!==void 0)return t;if(n[`onmoz${t}`]!==void 0)return`moz${t}`;if(n[`onMoz${t}`]!==void 0)return`Moz${t}`;if(n[`onwebkit${t}`]!==void 0)return`webkit${t}`;if(n[`onms${t}`]!==void 0)return`ms${t}`;if(n[`ono${t}`]!==void 0)return`o${t}`}it.register("detectPrefixEvent",t0);const Lt=new Gi("kite"),e0=W.lineLineIntersection,s0={lineWidth:1,lineCap:"butt",lineJoin:"miter",lineDash:[],lineDashOffset:0,miterLimit:10};class O1{constructor(t){const e=us({},s0,t);this.lineWidth=e.lineWidth,this.lineCap=e.lineCap,this.lineJoin=e.lineJoin,this.lineDash=e.lineDash,this.lineDashOffset=e.lineDashOffset,this.miterLimit=e.miterLimit,assert&&assert(typeof this.lineWidth=="number",`lineWidth should be a number: ${this.lineWidth}`),assert&&assert(isFinite(this.lineWidth),`lineWidth should be a finite number: ${this.lineWidth}`),assert&&assert(this.lineWidth>=0,`lineWidth should be non-negative: ${this.lineWidth}`),assert&&assert(this.lineCap==="butt"||this.lineCap==="round"||this.lineCap==="square",`Invalid lineCap: ${this.lineCap}`),assert&&assert(this.lineJoin==="miter"||this.lineJoin==="round"||this.lineJoin==="bevel",`Invalid lineJoin: ${this.lineJoin}`),assert&&assert(Array.isArray(this.lineDash),`lineDash should be an array: ${this.lineDash}`),assert&&assert(_.every(this.lineDash,s=>typeof s=="number"&&isFinite(s)&&s>=0),`Every lineDash should be a non-negative finite number: ${this.lineDash}`),assert&&assert(typeof this.lineDashOffset=="number",`lineDashOffset should be a number: ${this.lineDashOffset}`),assert&&assert(isFinite(this.lineDashOffset),`lineDashOffset should be a finite number: ${this.lineDashOffset}`),assert&&assert(typeof this.miterLimit=="number",`miterLimit should be a number: ${this.miterLimit}`),assert&&assert(isFinite(this.miterLimit),`miterLimit should be a finite number: ${this.miterLimit}`)}equals(t){if(!(this.lineWidth===t.lineWidth&&this.lineCap===t.lineCap&&this.lineJoin===t.lineJoin&&this.miterLimit===t.miterLimit&&this.lineDashOffset===t.lineDashOffset))return!1;if(this.lineDash.length===t.lineDash.length){for(let s=0;s<this.lineDash.length;s++)if(this.lineDash[s]!==t.lineDash[s])return!1}else return!1;return!0}copy(){return new O1({lineWidth:this.lineWidth,lineCap:this.lineCap,lineJoin:this.lineJoin,lineDash:this.lineDash,lineDashOffset:this.lineDashOffset,miterLimit:this.miterLimit})}leftJoin(t,e,s){e=e.normalized(),s=s.normalized();const i=t.plus(e.perpendicular.negated().times(this.lineWidth/2)),L=t.plus(s.perpendicular.negated().times(this.lineWidth/2)),a=i.equals(L)?[]:[new D(i,L)];let o,h,l;if(e.perpendicular.dot(s)>1e-12)switch(this.lineJoin){case"round":return o=e.angle+Math.PI/2,h=s.angle+Math.PI/2,[new tt(t,this.lineWidth/2,o,h,!0)];case"miter":if(l=e.angleBetween(s.negated()),1/Math.sin(l/2)<=this.miterLimit&&l<Math.PI-1e-5){const u=e0(i,i.plus(e),L,L.plus(s));return u?[new D(i,u),new D(u,L)]:[new D(i,L)]}else return a;case"bevel":return a;default:throw new Error(`invalid lineJoin: ${this.lineJoin}`)}else return a}rightJoin(t,e,s){return this.leftJoin(t,s.negated(),e.negated())}cap(t,e){e=e.normalized();const s=t.plus(e.perpendicular.times(-this.lineWidth/2)),i=t.plus(e.perpendicular.times(this.lineWidth/2));let L,a,o,h,l,u;switch(this.lineCap){case"butt":return[new D(s,i)];case"round":return L=e.angle,[new tt(t,this.lineWidth/2,L+Math.PI/2,L-Math.PI/2,!0)];case"square":return a=e.perpendicular.negated().times(this.lineWidth/2),o=e.perpendicular.times(this.lineWidth/2),h=e.times(this.lineWidth/2),l=t.plus(a).plus(h),u=t.plus(o).plus(h),[new D(s,l),new D(l,u),new D(u,i)];default:throw new Error(`invalid lineCap: ${this.lineCap}`)}}}Lt.register("LineStyles",O1);class Te{constructor(t,e){assert&&assert(isFinite(t)&&t!==0,"a should be a finite non-zero number"),assert&&assert(isFinite(e),"b should be a finite number"),this.a=t,this.b=e;let s=0,i=1,L=this.apply(s),a=this.apply(i);L>1&&(L=1,s=this.applyInverse(L)),L<0&&(L=0,s=this.applyInverse(L)),a>1&&(a=1,i=this.applyInverse(a)),a<0&&(a=0,i=this.applyInverse(a)),this.t0=s,this.t1=i,t>0?(this.qt0=L,this.qt1=a):(this.qt0=a,this.qt1=L),this.t0<0&&this.t0>-1e-8&&(this.t0=0),this.t0>1&&this.t0<1+1e-8&&(this.t0=1),this.t1<0&&this.t1>-1e-8&&(this.t1=0),this.t1>1&&this.t1<1+1e-8&&(this.t1=1),this.qt0<0&&this.qt0>-1e-8&&(this.qt0=0),this.qt0>1&&this.qt0<1+1e-8&&(this.qt0=1),this.qt1<0&&this.qt1>-1e-8&&(this.qt1=0),this.qt1>1&&this.qt1<1+1e-8&&(this.qt1=1),assert&&assert(this.t0>=0&&this.t0<=1,`t0 out of range: ${this.t0}`),assert&&assert(this.t1>=0&&this.t1<=1,`t1 out of range: ${this.t1}`),assert&&assert(this.qt0>=0&&this.qt0<=1,`qt0 out of range: ${this.qt0}`),assert&&assert(this.qt1>=0&&this.qt1<=1,`qt1 out of range: ${this.qt1}`)}apply(t){return this.a*t+this.b}applyInverse(t){return(t-this.b)/this.a}static createLinear(t,e,s,i){const L=(i-e)/(s-t);return new Te(L,e-t*L)}}Lt.register("Overlap",Te);class ge{constructor(t,e,s,i,L){assert&&assert(isFinite(t)&&t>=0,"invalid distance"),assert&&assert(Math.abs(s.magnitude-1)<1e-7,"invalid normal"),assert&&assert(L>=-1e-10&&L<=1+1e-10,`t out of range: ${L}`),this.point=e,this.normal=s,this.distance=t,this.wind=i,this.t=W.clamp(L,0,1)}}Lt.register("RayIntersection",ge);class Pt{constructor(t,e,s){assert&&assert(e>=-1e-10&&e<=1+1e-10,"aT out of range"),assert&&assert(s>=-1e-10&&s<=1+1e-10,"bT out of range"),this.point=t,this.aT=W.clamp(e,0,1),this.bT=W.clamp(s,0,1)}getSwapped(){return new Pt(this.point,this.bT,this.aT)}}Lt.register("SegmentIntersection",Pt);const j=n=>n.toFixed(20);Lt.register("svgNumber",j);const oe=(n,t,e,s)=>n.times(s).minus(t.times(e)),n0=n=>{const t=n[0],e=n[1],s=n[2],i=n[3],L=n[4],a=n[5],o=n[6],h=n[7],l=n[8];return t.times(L).times(l).plus(e.times(a).times(o)).plus(s.times(i).times(h)).minus(s.times(L).times(o)).minus(e.times(i).times(l)).minus(t.times(a).times(h))},i0=n=>{const t=n[0],e=n[1],s=n[2],i=n[3],L=n[4],a=n[5],o=n[6],h=n[7],l=n[8];return[oe(L,a,h,l),oe(e,s,h,l).negate(),oe(e,s,L,a),oe(i,a,o,l).negate(),oe(t,s,o,l),oe(t,s,i,a).negate(),oe(i,L,o,h),oe(t,e,o,h).negate(),oe(t,e,i,L)]},L0=n=>[n[0],n[3],n[6],n[1],n[4],n[7],n[2],n[5],n[8]],ys=(n,t=!1)=>_.sortBy([n.slice(0,3),n.slice(3,6),n.slice(6,9)],e=>-(e[0].magnitude+e[1].magnitude+(t?e[2].magnitude:0)))[0],r0=(n,t=!1)=>ys(L0(n),t),a0=n=>{const t=i0(n),e=ys(t);return[et.ZERO,e[2],e[1].negated(),e[2].negated(),et.ZERO,e[0],e[1],e[0].negated(),et.ZERO]},o0=(n,t)=>{const e=n[0],s=n[1],i=n[3],L=n[4],a=t[0],o=t[1],h=t[3],l=t[4],u=o.times(h).minus(a.times(l)),f=l.negated().times(e).plus(h.times(s)).plus(o.times(i)).minus(a.times(L)),d=s.times(i).minus(e.times(L)),M=et.solveQuadraticRoots(u,f,d);return M===null?null:M[0]},l0=n=>{const t=a0(n),e=o0(n,t);return e===null?n:[n[0].plus(e.times(t[0])),n[1].plus(e.times(t[1])),n[2].plus(e.times(t[2])),n[3].plus(e.times(t[3])),n[4].plus(e.times(t[4])),n[5].plus(e.times(t[5])),n[6].plus(e.times(t[6])),n[7].plus(e.times(t[7])),n[8].plus(e.times(t[8]))]},h0=n=>{const t=[],e=n[0],s=n[1].times(et.real(2)),i=n[4],L=n[2].times(et.real(2)),a=n[5].times(et.real(2)),o=n[8];let h=[];const l=new et(-2.51653525696959,1.5292850284402),u=i,f=s.times(l).plus(a),d=e.times(l).times(l).plus(L.times(l)).plus(o),M=et.solveQuadraticRoots(u,f,d);if(M&&M.length>=2)h=[[l,M[0]],[l,M[1]]];else{const p=e,A=s.times(l).plus(L),x=i.times(l).times(l).plus(a.times(l)).plus(o),b=et.solveQuadraticRoots(p,A,x);if(b&&b.length>=2)h=[[b[0],l],[b[1],l]];else if(M&&M.length===1)h=[[l,M[0]]];else if(b&&b.length===1)h=[[b[0],l]];else throw new Error("Implement more advanced initialization to find two solutions")}return h.forEach(p=>{const A=p[0].real,x=p[1].real,b=p[0].imaginary,w=p[1].imaginary,y=e.real,E=s.real,I=i.real,B=L.real,q=a.real,N=e.imaginary,C=s.imaginary,F=i.imaginary,T=L.imaginary,U=a.imaginary,mt=new Je(-2*N*b-C*w+B+2*y*A+E*x,-C*b-2*F*w+q+E*A+2*I*x,-T-2*b*y-w*E-2*N*A-C*x,-U-b*E-2*w*I-C*A-2*F*x),Y=new Je(T+2*b*y+w*E+2*N*A+C*x,U+b*E+2*w*I+C*A+2*F*x,-2*N*b-C*w+B+2*y*A+E*x,-C*b-2*F*w+q+E*A+2*I*x),V=new Je(6.1951068548253,-1.159268950386,.1602918829294,3.205818692048202),K=new Je(-5.420628549296924,-15.2069583028685,.159590602048868,5.10688288040682),G=(lt,dt)=>dt.timesScalar(lt.dot(dt)/dt.dot(dt)),st=mt,$=Y.minus(G(Y,st)),J=V.minus(G(V,st)).minus(G(V,$)),Q=K.minus(G(K,st)).minus(G(K,$)).minus(G(K,J)),ht=new Vs(2,2,[J.z,Q.z,J.w,Q.w]),X=new Ui(ht).getSingularValues();let ct=null;if(Math.abs(b)<1e-10&&Math.abs(w)<1e-10)ct=new c(A,x);else{if(Math.abs(X[1])>1e-10){const lt=ht.solve(new Vs(2,1,[-b,-w])).extractVector2(0);ct=new c(A+lt.x*J.z+lt.y*Q.z,x+lt.x*J.w+lt.y*Q.w)}else if(Math.abs(X[0])>1e-10){const lt=Math.abs(J.z)+Math.abs(J.w)>Math.abs(Q.z)+Math.abs(Q.w)?J:Q,dt=new c(lt.z,lt.w),vt=new c(b,w).dot(dt)/dt.dot(dt),At=new Je(A,x,b,w).minus(lt.timesScalar(vt));Math.abs(At.z)<1e-8&&Math.abs(At.w)<1e-8&&(ct=new c(At.x,At.y))}else ct=null;if(ct){if(Math.abs(X[1])>1e-10)t.push(ct);else if(Math.abs(X[0])>1e-10){const lt=Math.abs(J.z)+Math.abs(J.w)>Math.abs(Q.z)+Math.abs(Q.w),dt=lt?Q:J,vt=lt?J:Q,wt=Math.abs(vt.z)>Math.abs(vt.w)?dt.z/vt.z:dt.w/vt.w,qt=vt.timesScalar(wt).minus(dt);t.push(new ce(ct,new c(qt.x,qt.y).normalized()))}}}}),t},c0=n=>{const t=l0(n);return[ys(t),r0(t)]},Qe=(n,t)=>{const e=n[0],s=n[1],i=n[2],L=t[0],a=t[1],o=t[2],h=L.times(s).minus(e.times(a));if(h.equalsEpsilon(et.ZERO,1e-8))return null;{const l=a.times(i).minus(s.times(o)).dividedBy(h);let u;if(!s.equalsEpsilon(et.ZERO,1e-8))u=e.negated().times(l).minus(i).dividedBy(s);else if(!a.equalsEpsilon(et.ZERO,1e-8))u=L.negated().times(l).minus(o).dividedBy(a);else return null;return Math.abs(l.imaginary)<1e-8&&Math.abs(u.imaginary)<1e-8?new c(l.real,u.real):null}},u0=(n,t)=>{const e=n.m00(),s=n.m01(),i=n.m02(),L=n.m10(),a=n.m11(),o=n.m12(),h=n.m20(),l=n.m21(),u=n.m22(),f=t.m00(),d=t.m01(),M=t.m02(),p=t.m10(),A=t.m11(),x=t.m12(),b=t.m20(),w=t.m21(),y=t.m22(),E=-i*a*h+s*o*h+i*L*l-e*o*l-s*L*u+e*a*u,I=-L*u*d+L*l*M+i*l*p-s*u*p-i*h*A+e*u*A+s*h*x-e*l*x+i*L*w+o*(-l*f+h*d+s*b-e*w)-s*L*y+a*(u*f-h*M-i*b+e*y),B=-u*d*p+l*M*p+u*f*A-h*M*A-l*f*x+h*d*x+o*d*b-a*M*b-i*A*b+s*x*b-o*f*w+L*M*w+i*p*w-e*x*w+a*f*y-L*d*y-s*p*y+e*A*y,q=-M*A*b+d*x*b+M*p*w-f*x*w-d*p*y+f*A*y,N=et.solveCubicRoots(et.real(E),et.real(I),et.real(B),et.real(q));if(!N||N.length===0)return{degenerateConicMatrices:[],intersectionCollections:[],points:[],lines:[]};const F=_.uniqWith(N,(Y,V)=>Y.equals(V)).map(Y=>[et.real(e).multiply(Y).add(et.real(f)),et.real(s).multiply(Y).add(et.real(d)),et.real(i).multiply(Y).add(et.real(M)),et.real(L).multiply(Y).add(et.real(p)),et.real(a).multiply(Y).add(et.real(A)),et.real(o).multiply(Y).add(et.real(x)),et.real(h).multiply(Y).add(et.real(b)),et.real(l).multiply(Y).add(et.real(w)),et.real(u).multiply(Y).add(et.real(y))]);console.log("determinant magnitudes",F.map(Y=>n0(Y).magnitude));const T=[],U=F.map(c0);console.log(U);const mt=F.map(h0);console.log(mt);for(let Y=0;Y<U.length;Y++){const V=U[Y],K=Qe(V[0],V[1]);K&&T.push(K);for(let G=Y+1;G<U.length;G++){const st=U[G],$=[Qe(V[0],st[0]),Qe(V[0],st[1]),Qe(V[1],st[0]),Qe(V[1],st[1])];for(let J=0;J<4;J++){const Q=$[J];Q&&T.push(Q)}}}return{points:T,degenerateConicMatrices:F,lines:_.flatten(U),intersectionCollections:mt}};Lt.register("intersectConicMatrices",u0);function Un(n){return'"'+n.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g,escape)+'"'}const Ss={parse:function(n,t){const e={svgPath:o,movetoDrawtoCommandGroups:h,movetoDrawtoCommandGroup:l,drawtoCommands:u,drawtoCommand:f,moveto:d,movetoArgumentSequence:M,closepath:p,lineto:A,linetoArgumentSequence:x,horizontalLineto:b,horizontalLinetoArgumentSequence:w,verticalLineto:y,verticalLinetoArgumentSequence:E,curveto:I,curvetoArgumentSequence:B,curvetoArgument:q,smoothCurveto:N,smoothCurvetoArgumentSequence:C,smoothCurvetoArgument:F,quadraticBezierCurveto:T,quadraticBezierCurvetoArgumentSequence:U,quadraticBezierCurvetoArgument:mt,smoothQuadraticBezierCurveto:Y,smoothQuadraticBezierCurvetoArgumentSequence:V,ellipticalArc:K,ellipticalArcArgumentSequence:G,ellipticalArcArgument:st,coordinatePair:$,nonnegativeNumber:J,number:Q,flag:ht,commaWsp:X,comma:ct,floatingPointConstant:lt,fractionalConstant:dt,exponent:vt,sign:At,digitSequence:wt,digit:qt,wsp:O};if(t!==void 0){if(e[t]===void 0)throw new Error("Invalid rule name: "+Un(t)+".")}else t="svgPath";let s=0,i=0,L=[];function a(r){s<i||(s>i&&(i=s,L=[]),L.push(r))}function o(){let r,Z,g,m,v,z;for(v=s,z=s,r=[],Z=O();Z!==null;)r.push(Z),Z=O();if(r!==null)if(Z=h(),Z=Z!==null?Z:"",Z!==null){for(g=[],m=O();m!==null;)g.push(m),m=O();g!==null?r=[r,Z,g]:(r=null,s=z)}else r=null,s=z;else r=null,s=z;return r!==null&&(r=function(P,R){return R||[]}(v,r[1])),r===null&&(s=v),r}function h(){let r,Z,g,m,v;if(m=s,v=s,r=l(),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=h(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;return r!==null&&(r=function(z,P,R){return P.concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=l(),r!==null&&(r=function(z,P){return P}(m,r)),r===null&&(s=m)),r}function l(){let r,Z,g,m,v;if(m=s,v=s,r=d(),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=u(),g=g!==null?g:"",g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;return r!==null&&(r=function(z,P,R){return R.length?P.concat(R):P}(m,r[0],r[2])),r===null&&(s=m),r}function u(){let r,Z,g,m,v;if(m=s,v=s,r=f(),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=u(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;return r!==null&&(r=function(z,P,R){return P.concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=f(),r!==null&&(r=function(z,P){return P}(m,r)),r===null&&(s=m)),r}function f(){let r;return r=p(),r===null&&(r=A(),r===null&&(r=b(),r===null&&(r=y(),r===null&&(r=I(),r===null&&(r=N(),r===null&&(r=T(),r===null&&(r=Y(),r===null&&(r=K())))))))),r}function d(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===77?(r="M",s++):(r=null,a('"M"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=M(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return Ct(P,!1)}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===109?(r="m",s++):(r=null,a('"m"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=M(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return Ct(P,!0)}(m,r[2])),r===null&&(s=m)}return r}function M(){let r,Z,g,m,v;return m=s,v=s,r=$(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=x(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=$(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function p(){let r,Z;return Z=s,n.charCodeAt(s)===90?(r="Z",s++):(r=null,a('"Z"')),r===null&&(n.charCodeAt(s)===122?(r="z",s++):(r=null,a('"z"'))),r!==null&&(r=function(g,m){return{cmd:"close"}}()),r===null&&(s=Z),r}function A(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===76?(r="L",s++):(r=null,a('"L"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=x(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>({cmd:"lineTo",args:[R.x,R.y]}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===108?(r="l",s++):(r=null,a('"l"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=x(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>({cmd:"lineToRelative",args:[R.x,R.y]}))}(m,r[2])),r===null&&(s=m)}return r}function x(){let r,Z,g,m,v;return m=s,v=s,r=$(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=x(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=$(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function b(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===72?(r="H",s++):(r=null,a('"H"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=w(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>({cmd:"horizontalLineTo",args:[R]}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===104?(r="h",s++):(r=null,a('"h"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=w(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>({cmd:"horizontalLineToRelative",args:[R]}))}(m,r[2])),r===null&&(s=m)}return r}function w(){let r,Z,g,m,v;return m=s,v=s,r=Q(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=w(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=Q(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function y(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===86?(r="V",s++):(r=null,a('"V"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=E(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>({cmd:"verticalLineTo",args:[R]}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===118?(r="v",s++):(r=null,a('"v"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=E(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>({cmd:"verticalLineToRelative",args:[R]}))}(m,r[2])),r===null&&(s=m)}return r}function E(){let r,Z,g,m,v;return m=s,v=s,r=Q(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=E(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=Q(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function I(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===67?(r="C",s++):(r=null,a('"C"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=B(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>({cmd:"cubicCurveTo",args:R}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===99?(r="c",s++):(r=null,a('"c"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=B(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>({cmd:"cubicCurveToRelative",args:R}))}(m,r[2])),r===null&&(s=m)}return r}function B(){let r,Z,g,m,v;return m=s,v=s,r=q(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=B(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=q(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function q(){let r,Z,g,m,v,z,P;return z=s,P=s,r=$(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=$(),g!==null?(m=X(),m=m!==null?m:"",m!==null?(v=$(),v!==null?r=[r,Z,g,m,v]:(r=null,s=P)):(r=null,s=P)):(r=null,s=P)):(r=null,s=P)):(r=null,s=P),r!==null&&(r=function(R,de,ae,Ce){return[de.x,de.y,ae.x,ae.y,Ce.x,Ce.y]}(z,r[0],r[2],r[4])),r===null&&(s=z),r}function N(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===83?(r="S",s++):(r=null,a('"S"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=C(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>({cmd:"smoothCubicCurveTo",args:R}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===115?(r="s",s++):(r=null,a('"s"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=C(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>({cmd:"smoothCubicCurveToRelative",args:R}))}(m,r[2])),r===null&&(s=m)}return r}function C(){let r,Z,g,m,v;return m=s,v=s,r=F(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=C(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=F(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function F(){let r,Z,g,m,v;return m=s,v=s,r=$(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=$(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P.x,P.y,R.x,R.y]}(m,r[0],r[2])),r===null&&(s=m),r}function T(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===81?(r="Q",s++):(r=null,a('"Q"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=U(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>({cmd:"quadraticCurveTo",args:R}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===113?(r="q",s++):(r=null,a('"q"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=U(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>({cmd:"quadraticCurveToRelative",args:R}))}(m,r[2])),r===null&&(s=m)}return r}function U(){let r,Z,g,m,v;return m=s,v=s,r=mt(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=U(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=mt(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function mt(){let r,Z,g,m,v;return m=s,v=s,r=$(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=$(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P.x,P.y,R.x,R.y]}(m,r[0],r[2])),r===null&&(s=m),r}function Y(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===84?(r="T",s++):(r=null,a('"T"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=V(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>({cmd:"smoothQuadraticCurveTo",args:[R.x,R.y]}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===116?(r="t",s++):(r=null,a('"t"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=V(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>({cmd:"smoothQuadraticCurveToRelative",args:[R.x,R.y]}))}(m,r[2])),r===null&&(s=m)}return r}function V(){let r,Z,g,m,v;return m=s,v=s,r=$(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=V(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=$(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function K(){let r,Z,g,m,v;if(m=s,v=s,n.charCodeAt(s)===65?(r="A",s++):(r=null,a('"A"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=G(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;if(r!==null&&(r=function(z,P){return P.map(R=>(R[2]*=Math.PI/180,{cmd:"ellipticalArcTo",args:R}))}(m,r[2])),r===null&&(s=m),r===null){if(m=s,v=s,n.charCodeAt(s)===97?(r="a",s++):(r=null,a('"a"')),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?(g=G(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)}else r=null,s=v;r!==null&&(r=function(z,P){return P.map(R=>(R[2]*=Math.PI/180,{cmd:"ellipticalArcToRelative",args:R}))}(m,r[2])),r===null&&(s=m)}return r}function G(){let r,Z,g,m,v;return m=s,v=s,r=st(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=G(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return[P].concat(R)}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,r=st(),r!==null&&(r=function(z,P){return[P]}(m,r)),r===null&&(s=m)),r}function st(){let r,Z,g,m,v,z,P,R,de,ae,Ce,G1,Ut;return G1=s,Ut=s,r=J(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=J(),g!==null?(m=X(),m=m!==null?m:"",m!==null?(v=Q(),v!==null?(z=X(),z!==null?(P=ht(),P!==null?(R=X(),R=R!==null?R:"",R!==null?(de=ht(),de!==null?(ae=X(),ae=ae!==null?ae:"",ae!==null?(Ce=$(),Ce!==null?r=[r,Z,g,m,v,z,P,R,de,ae,Ce]:(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut)):(r=null,s=Ut),r!==null&&(r=function(h4,zi,Oi,Di,Hi,Vi,Hs){return[zi,Oi,Di,Hi,Vi,Hs.x,Hs.y]}(G1,r[0],r[2],r[4],r[6],r[8],r[10])),r===null&&(s=G1),r}function $(){let r,Z,g,m,v;return m=s,v=s,r=Q(),r!==null?(Z=X(),Z=Z!==null?Z:"",Z!==null?(g=Q(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return{x:P,y:R}}(m,r[0],r[2])),r===null&&(s=m),r}function J(){let r,Z;return Z=s,r=lt(),r!==null&&(r=function(g,m){return parseFloat(m)}(Z,r)),r===null&&(s=Z),r===null&&(Z=s,r=wt(),r!==null&&(r=function(g,m){return Number(m)}(Z,r)),r===null&&(s=Z)),r}function Q(){let r,Z,g,m;return g=s,m=s,r=At(),r=r!==null?r:"",r!==null?(Z=lt(),Z!==null?r=[r,Z]:(r=null,s=m)):(r=null,s=m),r!==null&&(r=function(v,z,P){return parseFloat(z+P)}(g,r[0],r[1])),r===null&&(s=g),r===null&&(g=s,m=s,r=At(),r=r!==null?r:"",r!==null?(Z=wt(),Z!==null?r=[r,Z]:(r=null,s=m)):(r=null,s=m),r!==null&&(r=function(v,z,P){return Number(z+P)}(g,r[0],r[1])),r===null&&(s=g)),r}function ht(){let r,Z;return Z=s,n.charCodeAt(s)===48?(r="0",s++):(r=null,a('"0"')),r!==null&&(r=function(g){return!1}()),r===null&&(s=Z),r===null&&(Z=s,n.charCodeAt(s)===49?(r="1",s++):(r=null,a('"1"')),r!==null&&(r=function(g){return!0}()),r===null&&(s=Z)),r}function X(){let r,Z,g,m,v;if(v=s,Z=O(),Z!==null)for(r=[];Z!==null;)r.push(Z),Z=O();else r=null;if(r!==null)if(Z=ct(),Z=Z!==null?Z:"",Z!==null){for(g=[],m=O();m!==null;)g.push(m),m=O();g!==null?r=[r,Z,g]:(r=null,s=v)}else r=null,s=v;else r=null,s=v;if(r===null)if(v=s,r=ct(),r!==null){for(Z=[],g=O();g!==null;)Z.push(g),g=O();Z!==null?r=[r,Z]:(r=null,s=v)}else r=null,s=v;return r}function ct(){let r;return n.charCodeAt(s)===44?(r=",",s++):(r=null,a('","')),r}function lt(){let r,Z,g,m;return g=s,m=s,r=dt(),r!==null?(Z=vt(),Z=Z!==null?Z:"",Z!==null?r=[r,Z]:(r=null,s=m)):(r=null,s=m),r!==null&&(r=function(v,z,P){return z+P}(g,r[0],r[1])),r===null&&(s=g),r===null&&(g=s,m=s,r=wt(),r!==null?(Z=vt(),Z!==null?r=[r,Z]:(r=null,s=m)):(r=null,s=m),r!==null&&(r=function(v,z,P){return z+P}(g,r[0],r[1])),r===null&&(s=g)),r}function dt(){let r,Z,g,m,v;return m=s,v=s,r=wt(),r=r!==null?r:"",r!==null?(n.charCodeAt(s)===46?(Z=".",s++):(Z=null,a('"."')),Z!==null?(g=wt(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R){return P+"."+R}(m,r[0],r[2])),r===null&&(s=m),r===null&&(m=s,v=s,r=wt(),r!==null?(n.charCodeAt(s)===46?(Z=".",s++):(Z=null,a('"."')),Z!==null?r=[r,Z]:(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P){return P}(m,r[0])),r===null&&(s=m)),r}function vt(){let r,Z,g,m,v;return m=s,v=s,n.charCodeAt(s)===101?(r="e",s++):(r=null,a('"e"')),r===null&&(n.charCodeAt(s)===69?(r="E",s++):(r=null,a('"E"'))),r!==null?(Z=At(),Z=Z!==null?Z:"",Z!==null?(g=wt(),g!==null?r=[r,Z,g]:(r=null,s=v)):(r=null,s=v)):(r=null,s=v),r!==null&&(r=function(z,P,R,de){return P+R+de}(m,r[0],r[1],r[2])),r===null&&(s=m),r}function At(){let r;return n.charCodeAt(s)===43?(r="+",s++):(r=null,a('"+"')),r===null&&(n.charCodeAt(s)===45?(r="-",s++):(r=null,a('"-"'))),r}function wt(){let r,Z,g,m;return g=s,m=s,r=qt(),r!==null?(Z=wt(),Z!==null?r=[r,Z]:(r=null,s=m)):(r=null,s=m),r!==null&&(r=function(v,z,P){return z+P}(g,r[0],r[1])),r===null&&(s=g),r===null&&(r=qt()),r}function qt(){let r;return/^[0-9]/.test(n.charAt(s))?(r=n.charAt(s),s++):(r=null,a("[0-9]")),r}function O(){let r;return n.charCodeAt(s)===32?(r=" ",s++):(r=null,a('" "')),r===null&&(n.charCodeAt(s)===9?(r="	",s++):(r=null,a('"\\t"')),r===null&&(n.charCodeAt(s)===13?(r="\r",s++):(r=null,a('"\\r"')),r===null&&(n.charCodeAt(s)===10?(r=`
`,s++):(r=null,a('"\\n"'))))),r}function Gt(r){r.sort();let Z=null;const g=[];for(let m=0;m<r.length;m++)r[m]!==Z&&(g.push(r[m]),Z=r[m]);return g}function Nt(){let r=1,Z=1,g=!1;for(let m=0;m<Math.max(s,i);m++){const v=n.charAt(m);v===`
`?(g||r++,Z=1,g=!1):v==="\r"||v==="\u2028"||v==="\u2029"?(r++,Z=1,g=!0):(Z++,g=!1)}return{line:r,column:Z}}function Ct(r,Z){const g=[{cmd:Z?"moveToRelative":"moveTo",args:[r[0].x,r[0].y]}];if(r.length>1)for(let m=1;m<r.length;m++)g.push({cmd:Z?"lineToRelative":"lineTo",args:[r[m].x,r[m].y]});return g}const Ds=e[t]();if(Ds===null||s!==n.length){const r=Math.max(s,i),Z=r<n.length?n.charAt(r):null,g=Nt();throw new this.SyntaxError(Gt(L),Z,r,g.line,g.column)}return Ds},toSource:function(){return this._source}};Ss.SyntaxError=function(n,t,e,s,i){function L(a,o){let h,l;switch(a.length){case 0:h="end of input";break;case 1:h=a[0];break;default:h=a.slice(0,a.length-1).join(", ")+" or "+a[a.length-1]}return l=o?Un(o):"end of input","Expected "+h+" but "+l+" found."}this.name="SyntaxError",this.expected=n,this.found=t,this.message=L(n,t),this.offset=e,this.line=s,this.column=i};Ss.SyntaxError.prototype=Error.prototype;Lt.register("svgPath",Ss);const M0=Lt.svgPath;class pt{constructor(){this.invalidationEmitter=new Es}areStrokedBoundsDilated(){return Math.abs(this.startTangent.x*this.startTangent.y)<1e-7&&Math.abs(this.endTangent.x*this.endTangent.y)<1e-7}getBoundsWithTransform(t){return this.transformed(t).getBounds()}slice(t,e){assert&&assert(t>=0&&t<=1&&e>=0&&e<=1,"Parametric value out of range"),assert&&assert(t<e);let s=this;return e<1&&(s=s.subdivided(e)[0]),t>0&&(s=s.subdivided(W.linear(0,e,0,1,t))[1]),s}subdivisions(t){let e=this;const s=[];for(let i=0;i<t.length;i++){const L=t[i],a=e.subdivided(L);assert&&assert(a.length===2),s.push(a[0]),e=a[1];for(let o=i+1;o<t.length;o++)t[o]=W.linear(L,1,0,1,t[o])}return s.push(e),s}subdividedIntoMonotone(){return this.subdivisions(this.getInteriorExtremaTs())}isSufficientlyFlat(t,e){const s=this.start,i=this.positionAt(.5),L=this.end;return pt.isSufficientlyFlat(t,e,s,i,L)}getArcLength(t,e,s){if(t=t===void 0?1e-10:t,e=e===void 0?1e-8:e,s=s===void 0?15:s,s<=0||this.isSufficientlyFlat(t,e))return this.start.distance(this.end);{const i=this.subdivided(.5);return i[0].getArcLength(t,e,s-1)+i[1].getArcLength(t,e,s-1)}}getDashValues(t,e,s,i){assert&&assert(t.length>0,"Do not call with an empty dash array");const L=this,a=[];let o=0;const h=_.sum(t);e=e%h,e<0&&(e+=h);let l=0,u=0,f=!0;function d(){l=(l+1)%t.length,f=!f}for(;e>0;)e>=t[l]?(e-=t[l],d()):(u=e,e=0);const M=f;return function p(A,x,b,w,y){const E=(A+x)/2,I=L.positionAt(E);if(y>14||pt.isSufficientlyFlat(s,i,b,I,w)){const B=b.distance(I)+I.distance(w);o+=B;let q=B;for(;u+q>=t[l];){const N=W.linear(0,B,A,x,B-q+t[l]-u);a.push(N),q-=t[l]-u,u=0,d()}u=u+q}else p(A,E,b,I,y+1),p(E,x,I,w,y+1)}(0,1,this.start,this.end,0),{values:a,arcLength:o,initiallyInside:M}}toPiecewiseLinearSegments(t,e,s,i,L,a){e=e===void 0?t.minLevels:e,s=s===void 0?t.maxLevels:s,i=i||[];const o=t.pointMap||_.identity;L=L||o(this.start),a=a||o(this.end);const h=o(this.positionAt(.5));assert&&assert(e<=s),assert&&assert(t.distanceEpsilon===null||typeof t.distanceEpsilon=="number"),assert&&assert(t.curveEpsilon===null||typeof t.curveEpsilon=="number"),assert&&assert(!o||typeof o=="function");let l=s===0;if(!l&&e<=0&&(l=this.isSufficientlyFlat(t.distanceEpsilon===null||t.distanceEpsilon===void 0?Number.POSITIVE_INFINITY:t.distanceEpsilon,t.curveEpsilon===null||t.curveEpsilon===void 0?Number.POSITIVE_INFINITY:t.curveEpsilon)),l)i.push(new D(L,a));else{const u=this.subdivided(.5);u[0].toPiecewiseLinearSegments(t,e-1,s-1,i,L,h),u[1].toPiecewiseLinearSegments(t,e-1,s-1,i,h,a)}return i}toPiecewiseLinearOrArcSegments(t){const e=Ms()({minLevels:2,maxLevels:7,curvatureThreshold:.02,errorThreshold:10,errorPoints:[.25,.75]},t),s=[];return this.toPiecewiseLinearOrArcRecursion(e,e.minLevels,e.maxLevels,s,0,1,this.positionAt(0),this.positionAt(1),this.curvatureAt(0),this.curvatureAt(1)),s}toPiecewiseLinearOrArcRecursion(t,e,s,i,L,a,o,h,l,u){const f=(L+a)/2,d=this.positionAt(f),M=this.curvatureAt(f);if(s<=0||e<=0&&Math.abs(l-M)+Math.abs(M-u)<t.curvatureThreshold*2){const p=tt.createFromPoints(o,d,h);let A=!1;if(p instanceof tt){const x=p.radius*p.radius;for(let b=0;b<t.errorPoints.length;b++){const w=t.errorPoints[b],y=this.positionAt(L*(1-w)+a*w);if(Math.abs(y.distanceSquared(p.center)-x)>t.errorThreshold){A=!0;break}}}if(!A){i.push(p);return}}this.toPiecewiseLinearOrArcRecursion(t,e-1,s-1,i,L,f,o,d,l,M),this.toPiecewiseLinearOrArcRecursion(t,e-1,s-1,i,f,a,d,h,M,u)}toShape(){return new Yt([new Rt([this])])}getClosestPoints(t){return pt.closestToPoint([this],t,1e-7)}static closestToPoint(t,e,s){const i=s*s;let L=[],a=[],o=Number.POSITIVE_INFINITY,h=!1;for(_.each(t,l=>{if(l instanceof D){const u=l.explicitClosestToPoint(e);_.each(u,f=>{f.distanceSquared<o?(a=[f],o=f.distanceSquared):f.distanceSquared===o&&a.push(f)})}else{const u=[0].concat(l.getInteriorExtremaTs()).concat([1]);for(let f=0;f<u.length-1;f++){const d=u[f],M=u[f+1],p=l.positionAt(d),A=l.positionAt(M),x=gt.point(p).addPoint(A),b=x.minimumDistanceToPointSquared(e);if(b<=o){const w=x.maximumDistanceToPointSquared(e);w<o&&(o=w,a=[]),L.push({ta:d,tb:M,pa:p,pb:A,segment:l,bounds:x,min:b,max:w})}}}});L.length&&!h;){const l=L;L=[],h=!0;for(const u of l){if(u.min>o)continue;h&&u.pa.distanceSquared(u.pb)>i&&(h=!1);const f=(u.ta+u.tb)/2,d=u.segment.positionAt(f),M=gt.point(u.pa).addPoint(d),p=gt.point(u.pb).addPoint(d),A=M.minimumDistanceToPointSquared(e),x=p.minimumDistanceToPointSquared(e);if(A<=o){const b=M.maximumDistanceToPointSquared(e);b<o&&(o=b,a=[]),L.push({ta:u.ta,tb:f,pa:u.pa,pb:d,segment:u.segment,bounds:M,min:A,max:b})}if(x<=o){const b=p.maximumDistanceToPointSquared(e);b<o&&(o=b,a=[]),L.push({ta:f,tb:u.tb,pa:d,pb:u.pb,segment:u.segment,bounds:p,min:x,max:b})}}}return _.each(L,l=>{const u=(l.ta+l.tb)/2,f=l.segment.positionAt(u);a.push({segment:l.segment,t:u,closestPoint:f,distanceSquared:e.distanceSquared(f)})}),a}static polynomialGetOverlapCubic(t,e,s,i,L,a,o,h){if(h===0)return pt.polynomialGetOverlapQuadratic(t,e,s,L,a,o);const l=Math.sign(i/h)*Math.pow(Math.abs(i/h),1/3);if(l===0)return null;const u=(s-l*l*o)/(3*l*l*h);return{a:l,b:u}}static polynomialGetOverlapQuadratic(t,e,s,i,L,a){if(a===0)return pt.polynomialGetOverlapLinear(t,e,i,L);if(s/a<0)return null;const h=Math.sqrt(s/a);if(h===0)return null;const l=(e-h*L)/(2*h*a);return{a:h,b:l}}static polynomialGetOverlapLinear(t,e,s,i){if(i===0)return t===s?!0:null;const L=e/i;if(L===0)return null;const a=(t-s)/i;return{a:L,b:a}}static intersect(t,e){if(D&&t instanceof D&&e instanceof D)return D.intersect(t,e);if(D&&t instanceof D)return D.intersectOther(t,e);if(D&&e instanceof D)return D.intersectOther(e,t).map(d0);if(tt&&t instanceof tt&&e instanceof tt)return tt.intersect(t,e);if(_t&&t instanceof _t&&e instanceof _t)return _t.intersect(t,e);if(Zt&&xt&&(t instanceof Zt||t instanceof xt)&&(e instanceof Zt||e instanceof xt)){const s=t instanceof xt?t:t.degreeElevated(),i=e instanceof xt?e:e.degreeElevated(),L=new paper.Curve(s.start.x,s.start.y,s.control1.x,s.control1.y,s.control2.x,s.control2.y,s.end.x,s.end.y),a=new paper.Curve(i.start.x,i.start.y,i.control1.x,i.control1.y,i.control2.x,i.control2.y,i.end.x,i.end.y);return L.getIntersections(a).map(h=>{const l=new c(h.point.x,h.point.y);return new Pt(l,h.time,h.intersection.time)})}else return He.intersect(t,e)}static deserialize(t){return assert&&assert(t.type&&Lt[t.type]&&Lt[t.type].deserialize),Lt[t.type].deserialize(t)}static isSufficientlyFlat(t,e,s,i,L){return!(W.distToSegmentSquared(i,s,L)/s.distanceSquared(L)>e||W.distToSegmentSquared(i,s,L)>t)}static filterClosestToPointResult(t){if(t.length===0)return[];const e=_.minBy(t,s=>s.distanceSquared).distanceSquared;return _.uniqWith(t.filter(s=>Math.abs(s.distanceSquared-e)<1e-11),(s,i)=>s.closestPoint.distanceSquared(i.closestPoint)<1e-11)}}Lt.register("Segment",pt);function d0(n){return n.getSwapped()}const Us=new c(0,0);class D extends pt{constructor(t,e){super(),this._start=t,this._end=e,this.invalidate()}setStart(t){return assert&&assert(t.isFinite(),`Line start should be finite: ${t.toString()}`),this._start.equals(t)||(this._start=t,this.invalidate()),this}set start(t){this.setStart(t)}get start(){return this.getStart()}getStart(){return this._start}setEnd(t){return assert&&assert(t.isFinite(),`Line end should be finite: ${t.toString()}`),this._end.equals(t)||(this._end=t,this.invalidate()),this}set end(t){this.setEnd(t)}get end(){return this.getEnd()}getEnd(){return this._end}positionAt(t){return assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1"),this._start.plus(this._end.minus(this._start).times(t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this.getStartTangent()}curvatureAt(t){return assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),0}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this.positionAt(t);return[new D(this._start,e),new D(e,this._end)]}invalidate(){assert&&assert(this._start instanceof c,`Line start should be a Vector2: ${this._start}`),assert&&assert(this._start.isFinite(),`Line start should be finite: ${this._start.toString()}`),assert&&assert(this._end instanceof c,`Line end should be a Vector2: ${this._end}`),assert&&assert(this._end.isFinite(),`Line end should be finite: ${this._end.toString()}`),this._tangent=null,this._bounds=null,this._svgPathFragment=null,this.invalidationEmitter.emit()}getStartTangent(){return this._tangent===null&&(this._tangent=this._end.minus(this._start).normalized()),this._tangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this.getStartTangent()}get endTangent(){return this.getEndTangent()}getBounds(){return this._bounds===null&&(this._bounds=gt.NOTHING.copy().addPoint(this._start).addPoint(this._end)),this._bounds}get bounds(){return this.getBounds()}getBoundsWithTransform(t){const e=gt.NOTHING.copy();return e.addPoint(t.multiplyVector2(Us.set(this._start))),e.addPoint(t.multiplyVector2(Us.set(this._end))),e}getNondegenerateSegments(){return this._start.equals(this._end)?[]:[this]}getSVGPathFragment(){let t;return assert&&(t=this._svgPathFragment,this._svgPathFragment=null),this._svgPathFragment||(this._svgPathFragment=`L ${j(this._end.x)} ${j(this._end.y)}`),assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){const e=this.getEndTangent().perpendicular.negated().times(t/2);return[new D(this._start.plus(e),this._end.plus(e))]}strokeRight(t){const e=this.getStartTangent().perpendicular.times(t/2);return[new D(this._end.plus(e),this._start.plus(e))]}getInteriorExtremaTs(){return[]}intersection(t){const e=[],s=this._start,L=this._end.minus(s);if(L.magnitudeSquared===0)return e;const a=t.direction.y*L.x-t.direction.x*L.y;if(a===0)return e;const o=(t.direction.x*(s.y-t.position.y)-t.direction.y*(s.x-t.position.x))/a;if(o<0||o>=1)return e;const h=(L.x*(s.y-t.position.y)-L.y*(s.x-t.position.x))/a;if(h<1e-8)return e;const l=L.perpendicular,u=s.plus(L.times(o)),f=(l.dot(t.direction)>0?l.negated():l).normalized(),d=t.direction.perpendicular.dot(L)<0?1:-1;return e.push(new ge(h,u,f,d,o)),e}windingIntersection(t){const e=this.intersection(t);return e.length?e[0].wind:0}writeToContext(t){t.lineTo(this._end.x,this._end.y)}transformed(t){return new D(t.timesVector2(this._start),t.timesVector2(this._end))}explicitClosestToPoint(t){const e=this._end.minus(this._start);let s=t.minus(this._start).dot(e)/e.magnitudeSquared;s=W.clamp(s,0,1);const i=this.positionAt(s);return[{segment:this,t:s,closestPoint:i,distanceSquared:t.distanceSquared(i)}]}getSignedAreaFragment(){return 1/2*(this._start.x*this._end.y-this._start.y*this._end.x)}reparameterized(t,e){return new D(this.positionAt(e),this.positionAt(t+e))}reversed(){return new D(this._end,this._start)}polarToCartesian(t){return this._start.x===this._end.x?[new D(c.createPolar(this._start.y,this._start.x),c.createPolar(this._end.y,this._end.x))]:this._start.y===this._end.y?[new tt(c.ZERO,this._start.y,this._start.x,this._end.x,this._start.x>this._end.x)]:this.toPiecewiseLinearSegments(t)}getArcLength(){return this.start.distance(this.end)}toPiecewiseLinearOrArcSegments(){return[this]}serialize(){return{type:"Line",startX:this._start.x,startY:this._start.y,endX:this._end.x,endY:this._end.y}}getOverlaps(t,e=1e-6){return t instanceof D?D.getOverlaps(this,t):null}getClosestPoints(t){const e=this._end.minus(this._start),s=e.normalized(),i=t.minus(this._start).dot(s),L=W.clamp(i/e.magnitude,0,1),a=this.positionAt(L);return[{segment:this,t:L,closestPoint:a,distanceSquared:a.distanceSquared(t)}]}static deserialize(t){return assert&&assert(t.type==="Line"),new D(new c(t.startX,t.startY),new c(t.endX,t.endY))}static getOverlaps(t,e,s=1e-6){const i=[],L=t._start.x,a=-1*t._start.x+t._end.x,o=t._start.y,h=-1*t._start.y+t._end.y,l=e._start.x,u=-1*e._start.x+e._end.x,f=e._start.y,d=-1*e._start.y+e._end.y,M=Math.abs(Math.max(t._start.x,t._end.x,e._start.x,e._end.x)-Math.min(t._start.x,t._end.x,e._start.x,e._end.x)),p=Math.abs(Math.max(t._start.y,t._end.y,e._start.y,e._end.y)-Math.min(t._start.y,t._end.y,e._start.y,e._end.y)),A=pt.polynomialGetOverlapLinear(L,a,l,u),x=pt.polynomialGetOverlapLinear(o,h,f,d);let b;if(M>p?b=A===null||A===!0?x:A:b=x===null||x===!0?A:x,b===null||b===!0)return i;const w=b.a,y=b.b,E=l+y*u-L,I=w*u-a,B=f+y*d-o,q=w*d-h;if(Math.abs(E)>s||Math.abs(I+E)>s||Math.abs(B)>s||Math.abs(q+B)>s)return i;const N=y,C=w+y;return N>1&&C>1||N<0&&C<0?i:[new Te(w,y)]}static intersect(t,e){const s=W.lineSegmentIntersection(t.start.x,t.start.y,t.end.x,t.end.y,e.start.x,e.start.y,e.end.x,e.end.y);if(s!==null){const i=t.explicitClosestToPoint(s)[0].t,L=e.explicitClosestToPoint(s)[0].t;return[new Pt(s,i,L)]}else return[]}static intersectOther(t,e){const s=t.end.minus(t.start),i=s.magnitude,L=new ce(t.start,s.normalize()),a=e.intersection(L),o=[];for(let h=0;h<a.length;h++){const l=a[h],u=l.distance/i;u>1e-8&&u<1-1e-8&&o.push(new Pt(l.point,u,l.t))}return o}}Lt.register("Line",D);const f0=W.solveQuadraticRootsReal,Z0=W.arePointsCollinear;function Ws(n){return n>=0&&n<=1}class Zt extends pt{constructor(t,e,s){super(),this._start=t,this._control=e,this._end=s,this.invalidate()}setStart(t){return assert&&assert(t.isFinite(),`Quadratic start should be finite: ${t.toString()}`),this._start.equals(t)||(this._start=t,this.invalidate()),this}set start(t){this.setStart(t)}get start(){return this.getStart()}getStart(){return this._start}setControl(t){return assert&&assert(t.isFinite(),`Quadratic control should be finite: ${t.toString()}`),this._control.equals(t)||(this._control=t,this.invalidate()),this}set control(t){this.setControl(t)}get control(){return this.getControl()}getControl(){return this._control}setEnd(t){return assert&&assert(t.isFinite(),`Quadratic end should be finite: ${t.toString()}`),this._end.equals(t)||(this._end=t,this.invalidate()),this}set end(t){this.setEnd(t)}get end(){return this.getEnd()}getEnd(){return this._end}positionAt(t){assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1");const e=1-t;return this._start.times(e*e).plus(this._control.times(2*e*t)).plus(this._end.times(t*t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this._control.minus(this._start).times(2*(1-t)).plus(this._end.minus(this._control).times(2*t))}curvatureAt(t){if(assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),Math.abs(t-.5)>.5-1e-7){const s=t<.5,i=s?this._start:this._end,L=this._control,a=s?this._end:this._start,o=L.minus(i),h=o.magnitude;return(s?-1:1)*o.perpendicular.normalized().dot(a.minus(L))*(this.degree-1)/(this.degree*h*h)}else return this.subdivided(t)[0].curvatureAt(1)}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this._start.blend(this._control,t),s=this._control.blend(this._end,t),i=e.blend(s,t);return[new Zt(this._start,e,i),new Zt(i,s,this._end)]}invalidate(){assert&&assert(this._start instanceof c,`Quadratic start should be a Vector2: ${this._start}`),assert&&assert(this._start.isFinite(),`Quadratic start should be finite: ${this._start.toString()}`),assert&&assert(this._control instanceof c,`Quadratic control should be a Vector2: ${this._control}`),assert&&assert(this._control.isFinite(),`Quadratic control should be finite: ${this._control.toString()}`),assert&&assert(this._end instanceof c,`Quadratic end should be a Vector2: ${this._end}`),assert&&assert(this._end.isFinite(),`Quadratic end should be finite: ${this._end.toString()}`),this._startTangent=null,this._endTangent=null,this._tCriticalX=null,this._tCriticalY=null,this._bounds=null,this._svgPathFragment=null,this.invalidationEmitter.emit()}getStartTangent(){if(this._startTangent===null){const t=this._start.equals(this._control);this._startTangent=t?this._end.minus(this._start).normalized():this._control.minus(this._start).normalized()}return this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){if(this._endTangent===null){const t=this._end.equals(this._control);this._endTangent=t?this._end.minus(this._start).normalized():this._end.minus(this._control).normalized()}return this._endTangent}get endTangent(){return this.getEndTangent()}getTCriticalX(){return this._tCriticalX===null&&(this._tCriticalX=Zt.extremaT(this._start.x,this._control.x,this._end.x)),this._tCriticalX}get tCriticalX(){return this.getTCriticalX()}getTCriticalY(){return this._tCriticalY===null&&(this._tCriticalY=Zt.extremaT(this._start.y,this._control.y,this._end.y)),this._tCriticalY}get tCriticalY(){return this.getTCriticalY()}getNondegenerateSegments(){const t=this._start,e=this._control,s=this._end,i=t.equals(s),L=t.equals(e),a=t.equals(e);if(i&&L)return[];if(i){const o=this.positionAt(.5);return[new D(t,o),new D(o,s)]}else if(Z0(t,e,s)){if(L||a)return[new D(t,s)];const o=s.minus(t),h=e.minus(t).dot(o.normalized())/o.magnitude,l=Zt.extremaT(0,h,1);if(!isNaN(l)&&l>0&&l<1){const u=this.positionAt(l);return _.flatten([new D(t,u).getNondegenerateSegments(),new D(u,s).getNondegenerateSegments()])}else return[new D(t,s)]}else return[this]}getBounds(){if(this._bounds===null){this._bounds=new gt(Math.min(this._start.x,this._end.x),Math.min(this._start.y,this._end.y),Math.max(this._start.x,this._end.x),Math.max(this._start.y,this._end.y));const t=this.getTCriticalX(),e=this.getTCriticalY();!isNaN(t)&&t>0&&t<1&&(this._bounds=this._bounds.withPoint(this.positionAt(t))),!isNaN(e)&&e>0&&e<1&&(this._bounds=this._bounds.withPoint(this.positionAt(e)))}return this._bounds}get bounds(){return this.getBounds()}offsetTo(t,e){let s=[this];const i=5;for(let a=0;a<i;a++)s=_.flatten(_.map(s,o=>o.subdivided(.5)));let L=_.map(s,a=>a.approximateOffset(t));return e&&(L.reverse(),L=_.map(L,a=>a.reversed())),L}degreeElevated(){return new xt(this._start,this._start.plus(this._control.timesScalar(2)).dividedScalar(3),this._end.plus(this._control.timesScalar(2)).dividedScalar(3),this._end)}approximateOffset(t){return new Zt(this._start.plus((this._start.equals(this._control)?this._end.minus(this._start):this._control.minus(this._start)).perpendicular.normalized().times(t)),this._control.plus(this._end.minus(this._start).perpendicular.normalized().times(t)),this._end.plus((this._end.equals(this._control)?this._end.minus(this._start):this._end.minus(this._control)).perpendicular.normalized().times(t)))}getSVGPathFragment(){let t;return assert&&(t=this._svgPathFragment,this._svgPathFragment=null),this._svgPathFragment||(this._svgPathFragment=`Q ${j(this._control.x)} ${j(this._control.y)} ${j(this._end.x)} ${j(this._end.y)}`),assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return this.offsetTo(-t/2,!1)}strokeRight(t){return this.offsetTo(t/2,!0)}getInteriorExtremaTs(){const t=[],s=this.getTCriticalX(),i=this.getTCriticalY();return!isNaN(s)&&s>1e-10&&s<1-1e-10&&t.push(this.tCriticalX),!isNaN(i)&&i>1e-10&&i<1-1e-10&&t.push(this.tCriticalY),t.sort()}intersection(t){const e=[],s=ie.rotation2(-t.direction.angle).timesMatrix(ie.translation(-t.position.x,-t.position.y)),i=s.timesVector2(this._start),L=s.timesVector2(this._control),a=s.timesVector2(this._end),o=i.y-2*L.y+a.y,h=-2*i.y+2*L.y,l=i.y,u=f0(o,h,l);return _.each(u,f=>{if(f>=0&&f<=1){const d=this.positionAt(f),M=this.tangentAt(f).normalized(),p=M.perpendicular,A=d.minus(t.position);if(A.dot(t.direction)>0){const x=p.dot(t.direction)>0?p.negated():p,b=t.direction.perpendicular.dot(M)<0?1:-1;e.push(new ge(A.magnitude,d,x,b,f))}}}),e}windingIntersection(t){let e=0;const s=this.intersection(t);return _.each(s,i=>{e+=i.wind}),e}writeToContext(t){t.quadraticCurveTo(this._control.x,this._control.y,this._end.x,this._end.y)}transformed(t){return new Zt(t.timesVector2(this._start),t.timesVector2(this._control),t.timesVector2(this._end))}getSignedAreaFragment(){return 1/6*(this._start.x*(2*this._control.y+this._end.y)+this._control.x*(-2*this._start.y+2*this._end.y)+this._end.x*(-this._start.y-2*this._control.y))}reparameterized(t,e){const s=this._start.plus(this._end.plus(this._control.timesScalar(-2))),i=this._control.minus(this._start).timesScalar(2),L=this._start,a=s.timesScalar(t*t),o=s.timesScalar(t*e).timesScalar(2).plus(i.timesScalar(t)),h=s.timesScalar(e*e).plus(i.timesScalar(e)).plus(L);return new Zt(h,o.timesScalar(.5).plus(h),a.plus(o).plus(h))}reversed(){return new Zt(this._end,this._control,this._start)}serialize(){return{type:"Quadratic",startX:this._start.x,startY:this._start.y,controlX:this._control.x,controlY:this._control.y,endX:this._end.x,endY:this._end.y}}getOverlaps(t,e=1e-6){return t instanceof Zt?Zt.getOverlaps(this,t):null}static deserialize(t){return assert&&assert(t.type==="Quadratic"),new Zt(new c(t.startX,t.startY),new c(t.controlX,t.controlY),new c(t.endX,t.endY))}static extremaT(t,e,s){const i=2*(s-2*e+t);return i!==0?-2*(e-t)/i:NaN}static getOverlaps(t,e,s=1e-6){const i=[],L=t._start.x,a=-2*t._start.x+2*t._control.x,o=t._start.x-2*t._control.x+t._end.x,h=t._start.y,l=-2*t._start.y+2*t._control.y,u=t._start.y-2*t._control.y+t._end.y,f=e._start.x,d=-2*e._start.x+2*e._control.x,M=e._start.x-2*e._control.x+e._end.x,p=e._start.y,A=-2*e._start.y+2*e._control.y,x=e._start.y-2*e._control.y+e._end.y,b=Math.abs(Math.max(t._start.x,t._control.x,t._end.x,e._start.x,e._control.x,e._end.x)-Math.min(t._start.x,t._control.x,t._end.x,e._start.x,e._control.x,e._end.x)),w=Math.abs(Math.max(t._start.y,t._control.y,t._end.y,e._start.y,e._control.y,e._end.y)-Math.min(t._start.y,t._control.y,t._end.y,e._start.y,e._control.y,e._end.y)),y=pt.polynomialGetOverlapQuadratic(L,a,o,f,d,M),E=pt.polynomialGetOverlapQuadratic(h,l,u,p,A,x);let I;if(b>w?I=y===null||y===!0?E:y:I=E===null||E===!0?y:E,I===null||I===!0)return i;const B=I.a,q=I.b,N=B*B,C=q*q,F=2*B*q,T=f+q*d+C*M-L,U=B*d+F*M-a,mt=N*M-o,Y=p+q*A+C*x-h,V=B*A+F*x-l,K=N*x-u,G=W.solveLinearRootsReal(2*mt,U),st=W.solveLinearRootsReal(2*K,V),$=_.uniq([0,1].concat(G?G.filter(Ws):[])),J=_.uniq([0,1].concat(st?st.filter(Ws):[]));for(let X=0;X<$.length;X++){const ct=$[X];if(Math.abs((mt*ct+U)*ct+T)>s)return i}for(let X=0;X<J.length;X++){const ct=J[X];if(Math.abs((K*ct+V)*ct+Y)>s)return i}const Q=q,ht=B+q;return Q>1&&ht>1||Q<0&&ht<0?i:[new Te(B,q)]}}Zt.prototype.degree=2;Lt.register("Quadratic",Zt);const g0=W.solveQuadraticRootsReal,p0=W.solveCubicRootsReal,Js=W.arePointsCollinear,b1=new c(0,0),m0=new c(0,0),w0=new c(0,0);function W1(n){return n>=0&&n<=1}class xt extends pt{constructor(t,e,s,i){super(),this._start=t,this._control1=e,this._control2=s,this._end=i,this.invalidate()}setStart(t){return assert&&assert(t.isFinite(),`Cubic start should be finite: ${t.toString()}`),this._start.equals(t)||(this._start=t,this.invalidate()),this}set start(t){this.setStart(t)}get start(){return this.getStart()}getStart(){return this._start}setControl1(t){return assert&&assert(t.isFinite(),`Cubic control1 should be finite: ${t.toString()}`),this._control1.equals(t)||(this._control1=t,this.invalidate()),this}set control1(t){this.setControl1(t)}get control1(){return this.getControl1()}getControl1(){return this._control1}setControl2(t){return assert&&assert(t.isFinite(),`Cubic control2 should be finite: ${t.toString()}`),this._control2.equals(t)||(this._control2=t,this.invalidate()),this}set control2(t){this.setControl2(t)}get control2(){return this.getControl2()}getControl2(){return this._control2}setEnd(t){return assert&&assert(t.isFinite(),`Cubic end should be finite: ${t.toString()}`),this._end.equals(t)||(this._end=t,this.invalidate()),this}set end(t){this.setEnd(t)}get end(){return this.getEnd()}getEnd(){return this._end}positionAt(t){assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1");const e=1-t,s=e*e*e,i=3*e*e*t,L=3*e*t*t,a=t*t*t;return new c(this._start.x*s+this._control1.x*i+this._control2.x*L+this._end.x*a,this._start.y*s+this._control1.y*i+this._control2.y*L+this._end.y*a)}tangentAt(t){assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1");const e=1-t;return new c(0,0).set(this._start).multiplyScalar(-3*e*e).add(b1.set(this._control1).multiplyScalar(3*e*e-6*e*t)).add(b1.set(this._control2).multiplyScalar(6*e*t-3*t*t)).add(b1.set(this._end).multiplyScalar(3*t*t))}curvatureAt(t){if(assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),Math.abs(t-.5)>.5-1e-7){const s=t<.5,i=s?this._start:this._end,L=s?this._control1:this._control2,a=s?this._control2:this._control1,o=L.minus(i),h=o.magnitude;return(s?-1:1)*o.perpendicular.normalized().dot(a.minus(L))*(this.degree-1)/(this.degree*h*h)}else return this.subdivided(t)[0].curvatureAt(1)}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this._start.blend(this._control1,t),s=this._control2.blend(this._end,t),i=this._control1.blend(this._control2,t),L=e.blend(i,t),a=i.blend(s,t),o=L.blend(a,t);return[new xt(this._start,e,L,o),new xt(o,a,s,this._end)]}invalidate(){assert&&assert(this._start instanceof c,`Cubic start should be a Vector2: ${this._start}`),assert&&assert(this._start.isFinite(),`Cubic start should be finite: ${this._start.toString()}`),assert&&assert(this._control1 instanceof c,`Cubic control1 should be a Vector2: ${this._control1}`),assert&&assert(this._control1.isFinite(),`Cubic control1 should be finite: ${this._control1.toString()}`),assert&&assert(this._control2 instanceof c,`Cubic control2 should be a Vector2: ${this._control2}`),assert&&assert(this._control2.isFinite(),`Cubic control2 should be finite: ${this._control2.toString()}`),assert&&assert(this._end instanceof c,`Cubic end should be a Vector2: ${this._end}`),assert&&assert(this._end.isFinite(),`Cubic end should be finite: ${this._end.toString()}`),this._startTangent=null,this._endTangent=null,this._r=null,this._s=null,this._tCusp=null,this._tDeterminant=null,this._tInflection1=null,this._tInflection2=null,this._quadratics=null,this._xExtremaT=null,this._yExtremaT=null,this._bounds=null,this._svgPathFragment=null,this.invalidationEmitter.emit()}getStartTangent(){return this._startTangent===null&&(this._startTangent=this.tangentAt(0).normalized()),this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this._endTangent===null&&(this._endTangent=this.tangentAt(1).normalized()),this._endTangent}get endTangent(){return this.getEndTangent()}getR(){return this._r===null&&(this._r=this._control1.minus(this._start).normalized()),this._r}get r(){return this.getR()}getS(){return this._s===null&&(this._s=this.getR().perpendicular),this._s}get s(){return this.getS()}getTCusp(){return this._tCusp===null&&this.computeCuspInfo(),assert&&assert(this._tCusp!==null),this._tCusp}get tCusp(){return this.getTCusp()}getTDeterminant(){return this._tDeterminant===null&&this.computeCuspInfo(),assert&&assert(this._tDeterminant!==null),this._tDeterminant}get tDeterminant(){return this.getTDeterminant()}getTInflection1(){return this._tInflection1===null&&this.computeCuspInfo(),assert&&assert(this._tInflection1!==null),this._tInflection1}get tInflection1(){return this.getTInflection1()}getTInflection2(){return this._tInflection2===null&&this.computeCuspInfo(),assert&&assert(this._tInflection2!==null),this._tInflection2}get tInflection2(){return this.getTInflection2()}getQuadratics(){return this._quadratics===null&&this.computeCuspSegments(),assert&&assert(this._quadratics!==null),this._quadratics}getXExtremaT(){return this._xExtremaT===null&&(this._xExtremaT=xt.extremaT(this._start.x,this._control1.x,this._control2.x,this._end.x)),this._xExtremaT}get xExtremaT(){return this.getXExtremaT()}getYExtremaT(){return this._yExtremaT===null&&(this._yExtremaT=xt.extremaT(this._start.y,this._control1.y,this._control2.y,this._end.y)),this._yExtremaT}get yExtremaT(){return this.getYExtremaT()}getBounds(){return this._bounds===null&&(this._bounds=gt.NOTHING,this._bounds=this._bounds.withPoint(this._start),this._bounds=this._bounds.withPoint(this._end),_.each(this.getXExtremaT(),t=>{t>=0&&t<=1&&(this._bounds=this._bounds.withPoint(this.positionAt(t)))}),_.each(this.getYExtremaT(),t=>{t>=0&&t<=1&&(this._bounds=this._bounds.withPoint(this.positionAt(t)))}),this.hasCusp()&&(this._bounds=this._bounds.withPoint(this.positionAt(this.getTCusp())))),this._bounds}get bounds(){return this.getBounds()}computeCuspInfo(){const t=this._start.times(-1).plus(this._control1.times(3)).plus(this._control2.times(-3)).plus(this._end),e=this._start.times(3).plus(this._control1.times(-6)).plus(this._control2.times(3)),s=this._start.times(-3).plus(this._control1.times(3)),i=t.perpendicular,L=e.perpendicular,a=i.dot(e);if(this._tCusp=-.5*(i.dot(s)/a),this._tDeterminant=this._tCusp*this._tCusp-1/3*(L.dot(s)/a),this._tDeterminant>=0){const o=Math.sqrt(this._tDeterminant);this._tInflection1=this._tCusp-o,this._tInflection2=this._tCusp+o}else this._tInflection1=NaN,this._tInflection2=NaN}computeCuspSegments(){if(this.hasCusp()){this._quadratics=[];const t=this.getTCusp();if(t===0)this._quadratics.push(new Zt(this.start,this.control2,this.end));else if(t===1)this._quadratics.push(new Zt(this.start,this.control1,this.end));else{const e=this.subdivided(t);this._quadratics.push(new Zt(e[0].start,e[0].control1,e[0].end)),this._quadratics.push(new Zt(e[1].start,e[1].control2,e[1].end))}}else this._quadratics=null}getNondegenerateSegments(){const t=this._start,e=this._control1,s=this._control2,i=this._end,L=this.degreeReduced(1e-9);if(t.equals(i)&&t.equals(e)&&t.equals(s))return[];if(this.hasCusp())return _.flatten(this.getQuadratics().map(a=>a.getNondegenerateSegments()));if(L)return L.getNondegenerateSegments();if(Js(t,e,i)&&Js(t,s,i)&&!t.equalsEpsilon(i,1e-7)){const a=this.getXExtremaT().concat(this.getYExtremaT()).sort().map(l=>this.positionAt(l)),o=[];let h=t;a.length&&(o.push(new D(t,a[0])),h=a[0]);for(let l=1;l<a.length;l++)o.push(new D(a[l-1],a[l])),h=a[l];return o.push(new D(h,i)),_.flatten(o.map(l=>l.getNondegenerateSegments()))}else return[this]}hasCusp(){const t=this.getTCusp();return t>=0&&t<=1&&this.tangentAt(t).magnitude<1e-7}toRS(t){const e=t.minus(this._start);return new c(e.dot(this.getR()),e.dot(this.getS()))}offsetTo(t,e){const i=[],L=[];for(let a=0;a<32;a++){let o=a/31;e&&(o=1-o),i.push(this.positionAt(o).plus(this.tangentAt(o).perpendicular.normalized().times(t))),a>0&&L.push(new D(i[a-1],i[a]))}return L}getSVGPathFragment(){let t;return assert&&(t=this._svgPathFragment,this._svgPathFragment=null),this._svgPathFragment||(this._svgPathFragment=`C ${j(this._control1.x)} ${j(this._control1.y)} ${j(this._control2.x)} ${j(this._control2.y)} ${j(this._end.x)} ${j(this._end.y)}`),assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return this.offsetTo(-t/2,!1)}strokeRight(t){return this.offsetTo(t/2,!0)}getInteriorExtremaTs(){const t=this.getXExtremaT().concat(this.getYExtremaT()),e=[];return _.each(t,s=>{s>1e-10&&s<1-1e-10&&_.every(e,L=>Math.abs(s-L)>1e-10)&&e.push(s)}),e.sort()}intersection(t){const e=[],s=ie.rotation2(-t.direction.angle).timesMatrix(ie.translation(-t.position.x,-t.position.y)),i=s.timesVector2(this._start),L=s.timesVector2(this._control1),a=s.timesVector2(this._control2),o=s.timesVector2(this._end),h=-i.y+3*L.y-3*a.y+o.y,l=3*i.y-6*L.y+3*a.y,u=-3*i.y+3*L.y,f=i.y,d=p0(h,l,u,f);return _.each(d,M=>{if(M>=0&&M<=1){const p=this.positionAt(M),A=this.tangentAt(M).normalized(),x=A.perpendicular,b=p.minus(t.position);if(b.dot(t.direction)>0){const w=x.dot(t.direction)>0?x.negated():x,y=t.direction.perpendicular.dot(A)<0?1:-1;e.push(new ge(b.magnitude,p,w,y,M))}}}),e}windingIntersection(t){let e=0;const s=this.intersection(t);return _.each(s,i=>{e+=i.wind}),e}writeToContext(t){t.bezierCurveTo(this._control1.x,this._control1.y,this._control2.x,this._control2.y,this._end.x,this._end.y)}transformed(t){return new xt(t.timesVector2(this._start),t.timesVector2(this._control1),t.timesVector2(this._control2),t.timesVector2(this._end))}degreeReduced(t){t=t||0;const e=b1.set(this._control1).multiplyScalar(3).subtract(this._start).divideScalar(2),s=m0.set(this._control2).multiplyScalar(3).subtract(this._end).divideScalar(2);return w0.set(e).subtract(s).magnitude<=t?new Zt(this._start,e.average(s),this._end):null}getSignedAreaFragment(){return 1/20*(this._start.x*(6*this._control1.y+3*this._control2.y+this._end.y)+this._control1.x*(-6*this._start.y+3*this._control2.y+3*this._end.y)+this._control2.x*(-3*this._start.y-3*this._control1.y+6*this._end.y)+this._end.x*(-this._start.y-3*this._control1.y-6*this._control2.y))}reversed(){return new xt(this._end,this._control2,this._control1,this._start)}getSelfIntersection(){const t=this.getInteriorExtremaTs(),e=[0].concat(t).concat([1]),s=this.subdivisions(t);if(s.length<3)return null;for(let i=0;i<s.length;i++){const L=s[i];for(let a=i+1;a<s.length;a++){const o=s[a],h=He.intersect(L,o);if(assert&&assert(h.length<2),h.length){const l=h[0];if(l.aT>1e-7&&l.aT<1-1e-7&&l.bT>1e-7&&l.bT<1-1e-7){const u=e[i]+l.aT*(e[i+1]-e[i]),f=e[a]+l.bT*(e[a+1]-e[a]);return new Pt(l.point,u,f)}}}}return null}serialize(){return{type:"Cubic",startX:this._start.x,startY:this._start.y,control1X:this._control1.x,control1Y:this._control1.y,control2X:this._control2.x,control2Y:this._control2.y,endX:this._end.x,endY:this._end.y}}getOverlaps(t,e=1e-6){return t instanceof xt?xt.getOverlaps(this,t):null}static deserialize(t){return assert&&assert(t.type==="Cubic"),new xt(new c(t.startX,t.startY),new c(t.control1X,t.control1Y),new c(t.control2X,t.control2Y),new c(t.endX,t.endY))}static extremaT(t,e,s,i){if(t===e&&t===s&&t===i)return[];const L=-3*t+9*e-9*s+3*i,a=6*t-12*e+6*s,o=-3*t+3*e;return _.filter(g0(L,a,o),W1)}static getOverlaps(t,e,s=1e-6){const i=[],L=t._start.x,a=-3*t._start.x+3*t._control1.x,o=3*t._start.x-6*t._control1.x+3*t._control2.x,h=-1*t._start.x+3*t._control1.x-3*t._control2.x+t._end.x,l=t._start.y,u=-3*t._start.y+3*t._control1.y,f=3*t._start.y-6*t._control1.y+3*t._control2.y,d=-1*t._start.y+3*t._control1.y-3*t._control2.y+t._end.y,M=e._start.x,p=-3*e._start.x+3*e._control1.x,A=3*e._start.x-6*e._control1.x+3*e._control2.x,x=-1*e._start.x+3*e._control1.x-3*e._control2.x+e._end.x,b=e._start.y,w=-3*e._start.y+3*e._control1.y,y=3*e._start.y-6*e._control1.y+3*e._control2.y,E=-1*e._start.y+3*e._control1.y-3*e._control2.y+e._end.y,I=Math.abs(Math.max(t._start.x,t._control1.x,t._control2.x,t._end.x,t._start.x,t._control1.x,t._control2.x,t._end.x)-Math.min(t._start.x,t._control1.x,t._control2.x,t._end.x,t._start.x,t._control1.x,t._control2.x,t._end.x)),B=Math.abs(Math.max(t._start.y,t._control1.y,t._control2.y,t._end.y,t._start.y,t._control1.y,t._control2.y,t._end.y)-Math.min(t._start.y,t._control1.y,t._control2.y,t._end.y,t._start.y,t._control1.y,t._control2.y,t._end.y)),q=pt.polynomialGetOverlapCubic(L,a,o,h,M,p,A,x),N=pt.polynomialGetOverlapCubic(l,u,f,d,b,w,y,E);let C;if(I>B?C=q===null||q===!0?N:q:C=N===null||N===!0?q:N,C===null||C===!0)return i;const F=C.a,T=C.b,U=F*F,mt=F*F*F,Y=T*T,V=T*T*T,K=2*F*T,G=3*F*Y,st=3*U*T,$=M+T*p+Y*A+V*x-L,J=F*p+K*A+G*x-a,Q=U*A+st*x-o,ht=mt*x-h,X=b+T*w+Y*y+V*E-l,ct=F*w+K*y+G*E-u,lt=U*y+st*E-f,dt=mt*E-d,vt=W.solveQuadraticRootsReal(3*ht,2*Q,J),At=W.solveQuadraticRootsReal(3*dt,2*lt,ct),wt=_.uniq([0,1].concat(vt!==null?vt.filter(W1):[])),qt=_.uniq([0,1].concat(At!==null?At.filter(W1):[]));for(let Nt=0;Nt<wt.length;Nt++){const Ct=wt[Nt];if(Math.abs(((ht*Ct+Q)*Ct+J)*Ct+$)>s)return i}for(let Nt=0;Nt<qt.length;Nt++){const Ct=qt[Nt];if(Math.abs(((dt*Ct+lt)*Ct+ct)*Ct+X)>s)return i}const O=T,Gt=F+T;return O>1&&Gt>1||O<0&&Gt<0?i:[new Te(F,T)]}}xt.prototype.degree=3;Lt.register("Cubic",xt);const te=Math.PI*2;class tt extends pt{constructor(t,e,s,i,L){super(),this._center=t,this._radius=e,this._startAngle=s,this._endAngle=i,this._anticlockwise=L,this.invalidate()}setCenter(t){return assert&&assert(t.isFinite(),`Arc center should be finite: ${t.toString()}`),this._center.equals(t)||(this._center=t,this.invalidate()),this}set center(t){this.setCenter(t)}get center(){return this.getCenter()}getCenter(){return this._center}setRadius(t){return assert&&assert(isFinite(t),`Arc radius should be a finite number: ${t}`),this._radius!==t&&(this._radius=t,this.invalidate()),this}set radius(t){this.setRadius(t)}get radius(){return this.getRadius()}getRadius(){return this._radius}setStartAngle(t){return assert&&assert(isFinite(t),`Arc startAngle should be a finite number: ${t}`),this._startAngle!==t&&(this._startAngle=t,this.invalidate()),this}set startAngle(t){this.setStartAngle(t)}get startAngle(){return this.getStartAngle()}getStartAngle(){return this._startAngle}setEndAngle(t){return assert&&assert(isFinite(t),`Arc endAngle should be a finite number: ${t}`),this._endAngle!==t&&(this._endAngle=t,this.invalidate()),this}set endAngle(t){this.setEndAngle(t)}get endAngle(){return this.getEndAngle()}getEndAngle(){return this._endAngle}setAnticlockwise(t){return this._anticlockwise!==t&&(this._anticlockwise=t,this.invalidate()),this}set anticlockwise(t){this.setAnticlockwise(t)}get anticlockwise(){return this.getAnticlockwise()}getAnticlockwise(){return this._anticlockwise}positionAt(t){return assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1"),this.positionAtAngle(this.angleAt(t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this.tangentAtAngle(this.angleAt(t))}curvatureAt(t){return assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1"),(this._anticlockwise?-1:1)/this._radius}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this.angleAt(0),s=this.angleAt(t),i=this.angleAt(1);return[new tt(this._center,this._radius,e,s,this._anticlockwise),new tt(this._center,this._radius,s,i,this._anticlockwise)]}invalidate(){this._start=null,this._end=null,this._startTangent=null,this._endTangent=null,this._actualEndAngle=null,this._isFullPerimeter=null,this._angleDifference=null,this._bounds=null,this._svgPathFragment=null,assert&&assert(this._center instanceof c,"Arc center should be a Vector2"),assert&&assert(this._center.isFinite(),"Arc center should be finite (not NaN or infinite)"),assert&&assert(typeof this._radius=="number",`Arc radius should be a number: ${this._radius}`),assert&&assert(isFinite(this._radius),`Arc radius should be a finite number: ${this._radius}`),assert&&assert(typeof this._startAngle=="number",`Arc startAngle should be a number: ${this._startAngle}`),assert&&assert(isFinite(this._startAngle),`Arc startAngle should be a finite number: ${this._startAngle}`),assert&&assert(typeof this._endAngle=="number",`Arc endAngle should be a number: ${this._endAngle}`),assert&&assert(isFinite(this._endAngle),`Arc endAngle should be a finite number: ${this._endAngle}`),assert&&assert(typeof this._anticlockwise=="boolean",`Arc anticlockwise should be a boolean: ${this._anticlockwise}`),this._radius<0&&(this._radius=-this._radius,this._startAngle+=Math.PI,this._endAngle+=Math.PI),assert&&assert(!(!this.anticlockwise&&this._endAngle-this._startAngle<=-Math.PI*2||this.anticlockwise&&this._startAngle-this._endAngle<=-Math.PI*2),"Not handling arcs with start/end angles that show differences in-between browser handling"),assert&&assert(!(!this.anticlockwise&&this._endAngle-this._startAngle>Math.PI*2||this.anticlockwise&&this._startAngle-this._endAngle>Math.PI*2),"Not handling arcs with start/end angles that show differences in-between browser handling"),this.invalidationEmitter.emit()}getStart(){return this._start===null&&(this._start=this.positionAtAngle(this._startAngle)),this._start}get start(){return this.getStart()}getEnd(){return this._end===null&&(this._end=this.positionAtAngle(this._endAngle)),this._end}get end(){return this.getEnd()}getStartTangent(){return this._startTangent===null&&(this._startTangent=this.tangentAtAngle(this._startAngle)),this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this._endTangent===null&&(this._endTangent=this.tangentAtAngle(this._endAngle)),this._endTangent}get endTangent(){return this.getEndTangent()}getActualEndAngle(){return this._actualEndAngle===null&&(this._actualEndAngle=tt.computeActualEndAngle(this._startAngle,this._endAngle,this._anticlockwise)),this._actualEndAngle}get actualEndAngle(){return this.getActualEndAngle()}getIsFullPerimeter(){return this._isFullPerimeter===null&&(this._isFullPerimeter=!this._anticlockwise&&this._endAngle-this._startAngle>=Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle>=Math.PI*2),this._isFullPerimeter}get isFullPerimeter(){return this.getIsFullPerimeter()}getAngleDifference(){return this._angleDifference===null&&(this._angleDifference=this._anticlockwise?this._startAngle-this._endAngle:this._endAngle-this._startAngle,this._angleDifference<0&&(this._angleDifference+=Math.PI*2),assert&&assert(this._angleDifference>=0)),this._angleDifference}get angleDifference(){return this.getAngleDifference()}getBounds(){return this._bounds===null&&(this._bounds=gt.NOTHING.copy().withPoint(this.getStart()).withPoint(this.getEnd()),this._startAngle!==this._endAngle&&(this.includeBoundsAtAngle(0),this.includeBoundsAtAngle(Math.PI/2),this.includeBoundsAtAngle(Math.PI),this.includeBoundsAtAngle(3*Math.PI/2))),this._bounds}get bounds(){return this.getBounds()}getNondegenerateSegments(){return this._radius<=0||this._startAngle===this._endAngle?[]:[this]}includeBoundsAtAngle(t){this.containsAngle(t)&&(this._bounds=this._bounds.withPoint(this._center.plus(c.createPolar(this._radius,t))))}mapAngle(t){return Math.abs(W.moduloBetweenDown(t-this._startAngle,-Math.PI,Math.PI))<1e-8?this._startAngle:Math.abs(W.moduloBetweenDown(t-this.getActualEndAngle(),-Math.PI,Math.PI))<1e-8?this.getActualEndAngle():this._startAngle>this.getActualEndAngle()?W.moduloBetweenUp(t,this._startAngle-2*Math.PI,this._startAngle):W.moduloBetweenDown(t,this._startAngle,this._startAngle+2*Math.PI)}tAtAngle(t){const e=(this.mapAngle(t)-this._startAngle)/(this.getActualEndAngle()-this._startAngle);return assert&&assert(e>=0&&e<=1,`tAtAngle out of range: ${e}`),e}angleAt(t){return this._startAngle+(this.getActualEndAngle()-this._startAngle)*t}positionAtAngle(t){return this._center.plus(c.createPolar(this._radius,t))}tangentAtAngle(t){const e=c.createPolar(1,t);return this._anticlockwise?e.perpendicular:e.perpendicular.negated()}containsAngle(t){const e=this._anticlockwise?t-this._endAngle:t-this._startAngle;return W.moduloBetweenDown(e,0,Math.PI*2)<=this.angleDifference}getSVGPathFragment(){let t;if(assert&&(t=this._svgPathFragment,this._svgPathFragment=null),!this._svgPathFragment){const s=this._anticlockwise?"0":"1";let i;if(this.angleDifference<Math.PI*2-.01)i=this.angleDifference<Math.PI?"0":"1",this._svgPathFragment=`A ${j(this._radius)} ${j(this._radius)} 0 ${i} ${s} ${j(this.end.x)} ${j(this.end.y)}`;else{const L=(this._startAngle+this._endAngle)/2,a=this._center.plus(c.createPolar(this._radius,L));i="0";const o=`A ${j(this._radius)} ${j(this._radius)} 0 ${i} ${s} ${j(a.x)} ${j(a.y)}`,h=`A ${j(this._radius)} ${j(this._radius)} 0 ${i} ${s} ${j(this.end.x)} ${j(this.end.y)}`;this._svgPathFragment=`${o} ${h}`}}return assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return[new tt(this._center,this._radius+(this._anticlockwise?1:-1)*t/2,this._startAngle,this._endAngle,this._anticlockwise)]}strokeRight(t){return[new tt(this._center,this._radius+(this._anticlockwise?-1:1)*t/2,this._endAngle,this._startAngle,!this._anticlockwise)]}getInteriorExtremaTs(){const t=[];return _.each([0,Math.PI/2,Math.PI,3*Math.PI/2],e=>{if(this.containsAngle(e)){const s=this.tAtAngle(e),i=1e-10;s>i&&s<1-i&&t.push(s)}}),t.sort()}intersection(t){const e=[],i=t.position.minus(this._center),L=t.direction.dot(i),a=i.magnitudeSquared,o=4*L*L-4*(a-this._radius*this._radius);if(o<0)return e;const h=t.direction.dot(this._center)-t.direction.dot(t.position),l=Math.sqrt(o)/2,u=h-l,f=h+l;if(f<0)return e;const d=t.pointAtDistance(f),M=d.minus(this._center).normalized(),p=M.angle;if(u<0)this.containsAngle(p)&&e.push(new ge(f,d,M.negated(),this._anticlockwise?-1:1,this.tAtAngle(p)));else{const A=t.pointAtDistance(u),x=A.minus(this._center).normalized(),b=x.angle;this.containsAngle(b)&&e.push(new ge(u,A,x,this._anticlockwise?1:-1,this.tAtAngle(b))),this.containsAngle(p)&&e.push(new ge(f,d,M.negated(),this._anticlockwise?-1:1,this.tAtAngle(p)))}return e}windingIntersection(t){let e=0;const s=this.intersection(t);return _.each(s,i=>{e+=i.wind}),e}writeToContext(t){t.arc(this._center.x,this._center.y,this._radius,this._startAngle,this._endAngle,this._anticlockwise)}transformed(t){const e=t.timesVector2(c.createPolar(1,this._startAngle)).minus(t.timesVector2(c.ZERO)).angle;let s=t.timesVector2(c.createPolar(1,this._endAngle)).minus(t.timesVector2(c.ZERO)).angle;const i=t.getDeterminant()>=0?this._anticlockwise:!this._anticlockwise;Math.abs(this._endAngle-this._startAngle)===Math.PI*2&&(s=i?e-Math.PI*2:e+Math.PI*2);const L=t.getScaleVector();if(L.x!==L.y){const a=L.x*this._radius,o=L.y*this._radius;return new _t(t.timesVector2(this._center),a,o,0,e,s,i)}else{const a=L.x*this._radius;return new tt(t.timesVector2(this._center),a,e,s,i)}}getSignedAreaFragment(){const t=this._startAngle,e=this.getActualEndAngle();return .5*this._radius*(this._radius*(e-t)+this._center.x*(Math.sin(e)-Math.sin(t))-this._center.y*(Math.cos(e)-Math.cos(t)))}reversed(){return new tt(this._center,this._radius,this._endAngle,this._startAngle,!this._anticlockwise)}getArcLength(){return this.getAngleDifference()*this._radius}toPiecewiseLinearOrArcSegments(){return[this]}serialize(){return{type:"Arc",centerX:this._center.x,centerY:this._center.y,radius:this._radius,startAngle:this._startAngle,endAngle:this._endAngle,anticlockwise:this._anticlockwise}}getOverlaps(t,e=1e-6){return t instanceof tt?tt.getOverlaps(this,t):null}getConicMatrix(){const t=this.center.x,e=this.center.y,s=1,i=0,L=1,a=-2*t,o=-2*e,h=t*t+e*e-this.radius*this.radius;return ie.rowMajor(s,i/2,a/2,i/2,L,o/2,a/2,o/2,h)}static deserialize(t){return assert&&assert(t.type==="Arc"),new tt(new c(t.centerX,t.centerY),t.radius,t.startAngle,t.endAngle,t.anticlockwise)}static computeActualEndAngle(t,e,s){return s?t>e?e:t<e?e-2*Math.PI:t:t<e?e:t>e?e+Math.PI*2:t}static getPartialOverlap(t,e,s,i,L){assert&&assert(t>0&&t<=te+1e-10),assert&&assert(e>=0&&e<te+1e-10),assert&&assert(s>=0&&s<=te+1e-10),assert&&assert(i>=0&&i<=1),assert&&assert(L>=0&&L<=1);const a=s<e,o=a?s:e,h=a?e:s,l=o,u=Math.min(t,h);return u<l+1e-8?[]:[Te.createLinear(W.clamp(W.linear(0,t,0,1,l),0,1),W.clamp(W.linear(e,s,i,L,l),0,1),W.clamp(W.linear(0,t,0,1,u),0,1),W.clamp(W.linear(e,s,i,L,u),0,1))]}static getAngularOverlaps(t,e,s,i){assert&&assert(isFinite(t)),assert&&assert(isFinite(e)),assert&&assert(isFinite(s)),assert&&assert(isFinite(i));let L=e-t;const a=L<0?-1:1;L*=a;const o=W.moduloBetweenDown(a*(s-t),0,te),h=a*(i-s)+o;let l;return h<-1e-10?(l=-o/(h-o),tt.getPartialOverlap(L,o,0,0,l).concat(tt.getPartialOverlap(L,te,h+te,l,1))):h>te+1e-10?(l=(te-o)/(h-o),tt.getPartialOverlap(L,o,te,0,l).concat(tt.getPartialOverlap(L,0,h-te,l,1))):tt.getPartialOverlap(L,o,h,0,1)}static getOverlaps(t,e){return t._center.distance(e._center)>1e-4||Math.abs(t._radius-e._radius)>1e-4?[]:tt.getAngularOverlaps(t._startAngle,t.getActualEndAngle(),e._startAngle,e.getActualEndAngle())}static getCircleIntersectionPoint(t,e,s,i){assert&&assert(isFinite(e)&&e>=0),assert&&assert(isFinite(i)&&i>=0);const L=s.minus(t),a=L.magnitude;let o=[];if(!(a<1e-10||a>e+i+1e-10))if(a>e+i-1e-10)o=[t.blend(s,e/a)];else{const h=.5*(a*a-i*i+e*e)/a,l=a*a-i*i+e*e,u=4*a*a*e*e-l*l,f=t.blend(s,h/a);if(u>=1e-10){const d=Math.sqrt(u)/a/2,M=L.perpendicular.setMagnitude(d);o=[f.plus(M),f.minus(M)]}else u>-1e-10&&(o=[f])}return assert&&o.forEach(h=>{assert(Math.abs(h.distance(t)-e)<1e-8),assert(Math.abs(h.distance(s)-i)<1e-8)}),o}static intersect(t,e){const i=[];if(t._center.equalsEpsilon(e._center,1e-7)&&Math.abs(t._radius-e._radius)<1e-7){const L=t.positionAt(0),a=t.positionAt(1),o=e.positionAt(0),h=e.positionAt(1);L.equalsEpsilon(o,1e-7)&&i.push(new Pt(L.average(o),0,0)),L.equalsEpsilon(h,1e-7)&&i.push(new Pt(L.average(h),0,1)),a.equalsEpsilon(o,1e-7)&&i.push(new Pt(a.average(o),1,0)),a.equalsEpsilon(h,1e-7)&&i.push(new Pt(a.average(h),1,1))}else{const L=tt.getCircleIntersectionPoint(t._center,t._radius,e._center,e._radius);for(let a=0;a<L.length;a++){const o=L[a],h=o.minus(t._center).angle,l=o.minus(e._center).angle;t.containsAngle(h)&&e.containsAngle(l)&&i.push(new Pt(o,t.tAtAngle(h),e.tAtAngle(l)))}}return i}static createFromPoints(t,e,s){const i=W.circleCenterFromPoints(t,e,s);if(i===null)return new D(t,s);{const L=t.minus(i),a=e.minus(i),o=s.minus(i),h=L.angle,l=a.angle,u=o.angle,f=(L.magnitude+a.magnitude+o.magnitude)/3,d=new tt(i,f,h,u,!1);return d.containsAngle(l)?d:new tt(i,f,h,u,!0)}}}Lt.register("Arc",tt);const _0=W.toDegrees,x0=ie.rowMajor(1,0,0,0,1,0,0,0,-1);class _t extends pt{constructor(t,e,s,i,L,a,o){super(),this._center=t,this._radiusX=e,this._radiusY=s,this._rotation=i,this._startAngle=L,this._endAngle=a,this._anticlockwise=o,this.invalidate()}setCenter(t){return assert&&assert(t.isFinite(),`EllipticalArc center should be finite: ${t.toString()}`),this._center.equals(t)||(this._center=t,this.invalidate()),this}set center(t){this.setCenter(t)}get center(){return this.getCenter()}getCenter(){return this._center}setRadiusX(t){return assert&&assert(isFinite(t),`EllipticalArc radiusX should be a finite number: ${t}`),this._radiusX!==t&&(this._radiusX=t,this.invalidate()),this}set radiusX(t){this.setRadiusX(t)}get radiusX(){return this.getRadiusX()}getRadiusX(){return this._radiusX}setRadiusY(t){return assert&&assert(isFinite(t),`EllipticalArc radiusY should be a finite number: ${t}`),this._radiusY!==t&&(this._radiusY=t,this.invalidate()),this}set radiusY(t){this.setRadiusY(t)}get radiusY(){return this.getRadiusY()}getRadiusY(){return this._radiusY}setRotation(t){return assert&&assert(isFinite(t),`EllipticalArc rotation should be a finite number: ${t}`),this._rotation!==t&&(this._rotation=t,this.invalidate()),this}set rotation(t){this.setRotation(t)}get rotation(){return this.getRotation()}getRotation(){return this._rotation}setStartAngle(t){return assert&&assert(isFinite(t),`EllipticalArc startAngle should be a finite number: ${t}`),this._startAngle!==t&&(this._startAngle=t,this.invalidate()),this}set startAngle(t){this.setStartAngle(t)}get startAngle(){return this.getStartAngle()}getStartAngle(){return this._startAngle}setEndAngle(t){return assert&&assert(isFinite(t),`EllipticalArc endAngle should be a finite number: ${t}`),this._endAngle!==t&&(this._endAngle=t,this.invalidate()),this}set endAngle(t){this.setEndAngle(t)}get endAngle(){return this.getEndAngle()}getEndAngle(){return this._endAngle}setAnticlockwise(t){return this._anticlockwise!==t&&(this._anticlockwise=t,this.invalidate()),this}set anticlockwise(t){this.setAnticlockwise(t)}get anticlockwise(){return this.getAnticlockwise()}getAnticlockwise(){return this._anticlockwise}positionAt(t){return assert&&assert(t>=0,"positionAt t should be non-negative"),assert&&assert(t<=1,"positionAt t should be no greater than 1"),this.positionAtAngle(this.angleAt(t))}tangentAt(t){return assert&&assert(t>=0,"tangentAt t should be non-negative"),assert&&assert(t<=1,"tangentAt t should be no greater than 1"),this.tangentAtAngle(this.angleAt(t))}curvatureAt(t){assert&&assert(t>=0,"curvatureAt t should be non-negative"),assert&&assert(t<=1,"curvatureAt t should be no greater than 1");const e=this.angleAt(t),s=this._radiusX*Math.sin(e),i=this._radiusY*Math.cos(e),L=Math.pow(i*i+s*s,3/2);return(this._anticlockwise?-1:1)*this._radiusX*this._radiusY/L}subdivided(t){if(assert&&assert(t>=0,"subdivided t should be non-negative"),assert&&assert(t<=1,"subdivided t should be no greater than 1"),t===0||t===1)return[this];const e=this.angleAt(0),s=this.angleAt(t),i=this.angleAt(1);return[new _t(this._center,this._radiusX,this._radiusY,this._rotation,e,s,this._anticlockwise),new _t(this._center,this._radiusX,this._radiusY,this._rotation,s,i,this._anticlockwise)]}invalidate(){if(assert&&assert(this._center instanceof c,"Arc center should be a Vector2"),assert&&assert(this._center.isFinite(),"Arc center should be finite (not NaN or infinite)"),assert&&assert(typeof this._radiusX=="number",`Arc radiusX should be a number: ${this._radiusX}`),assert&&assert(isFinite(this._radiusX),`Arc radiusX should be a finite number: ${this._radiusX}`),assert&&assert(typeof this._radiusY=="number",`Arc radiusY should be a number: ${this._radiusY}`),assert&&assert(isFinite(this._radiusY),`Arc radiusY should be a finite number: ${this._radiusY}`),assert&&assert(typeof this._rotation=="number",`Arc rotation should be a number: ${this._rotation}`),assert&&assert(isFinite(this._rotation),`Arc rotation should be a finite number: ${this._rotation}`),assert&&assert(typeof this._startAngle=="number",`Arc startAngle should be a number: ${this._startAngle}`),assert&&assert(isFinite(this._startAngle),`Arc startAngle should be a finite number: ${this._startAngle}`),assert&&assert(typeof this._endAngle=="number",`Arc endAngle should be a number: ${this._endAngle}`),assert&&assert(isFinite(this._endAngle),`Arc endAngle should be a finite number: ${this._endAngle}`),assert&&assert(typeof this._anticlockwise=="boolean",`Arc anticlockwise should be a boolean: ${this._anticlockwise}`),this._unitTransform=null,this._start=null,this._end=null,this._startTangent=null,this._endTangent=null,this._actualEndAngle=null,this._isFullPerimeter=null,this._angleDifference=null,this._unitArcSegment=null,this._bounds=null,this._svgPathFragment=null,this._radiusX<0&&(this._radiusX=-this._radiusX,this._startAngle=Math.PI-this._startAngle,this._endAngle=Math.PI-this._endAngle,this._anticlockwise=!this._anticlockwise),this._radiusY<0&&(this._radiusY=-this._radiusY,this._startAngle=-this._startAngle,this._endAngle=-this._endAngle,this._anticlockwise=!this._anticlockwise),this._radiusX<this._radiusY){this._rotation+=Math.PI/2,this._startAngle-=Math.PI/2,this._endAngle-=Math.PI/2;const t=this._radiusX;this._radiusX=this._radiusY,this._radiusY=t}if(this._radiusX<this._radiusY)throw new Error("Not verified to work if radiusX < radiusY");assert&&assert(!(!this._anticlockwise&&this._endAngle-this._startAngle<=-Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle<=-Math.PI*2),"Not handling elliptical arcs with start/end angles that show differences in-between browser handling"),assert&&assert(!(!this._anticlockwise&&this._endAngle-this._startAngle>Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle>Math.PI*2),"Not handling elliptical arcs with start/end angles that show differences in-between browser handling"),this.invalidationEmitter.emit()}getUnitTransform(){return this._unitTransform===null&&(this._unitTransform=_t.computeUnitTransform(this._center,this._radiusX,this._radiusY,this._rotation)),this._unitTransform}get unitTransform(){return this.getUnitTransform()}getStart(){return this._start===null&&(this._start=this.positionAtAngle(this._startAngle)),this._start}get start(){return this.getStart()}getEnd(){return this._end===null&&(this._end=this.positionAtAngle(this._endAngle)),this._end}get end(){return this.getEnd()}getStartTangent(){return this._startTangent===null&&(this._startTangent=this.tangentAtAngle(this._startAngle)),this._startTangent}get startTangent(){return this.getStartTangent()}getEndTangent(){return this._endTangent===null&&(this._endTangent=this.tangentAtAngle(this._endAngle)),this._endTangent}get endTangent(){return this.getEndTangent()}getActualEndAngle(){return this._actualEndAngle===null&&(this._actualEndAngle=tt.computeActualEndAngle(this._startAngle,this._endAngle,this._anticlockwise)),this._actualEndAngle}get actualEndAngle(){return this.getActualEndAngle()}getIsFullPerimeter(){return this._isFullPerimeter===null&&(this._isFullPerimeter=!this._anticlockwise&&this._endAngle-this._startAngle>=Math.PI*2||this._anticlockwise&&this._startAngle-this._endAngle>=Math.PI*2),this._isFullPerimeter}get isFullPerimeter(){return this.getIsFullPerimeter()}getAngleDifference(){return this._angleDifference===null&&(this._angleDifference=this._anticlockwise?this._startAngle-this._endAngle:this._endAngle-this._startAngle,this._angleDifference<0&&(this._angleDifference+=Math.PI*2),assert&&assert(this._angleDifference>=0)),this._angleDifference}get angleDifference(){return this.getAngleDifference()}getUnitArcSegment(){return this._unitArcSegment===null&&(this._unitArcSegment=new tt(c.ZERO,1,this._startAngle,this._endAngle,this._anticlockwise)),this._unitArcSegment}get unitArcSegment(){return this.getUnitArcSegment()}getBounds(){if(this._bounds===null&&(this._bounds=gt.NOTHING.withPoint(this.getStart()).withPoint(this.getEnd()),this._startAngle!==this._endAngle)){const t=Math.atan(-(this._radiusY/this._radiusX)*Math.tan(this._rotation)),e=Math.atan(this._radiusY/this._radiusX/Math.tan(this._rotation));this.possibleExtremaAngles=[t,t+Math.PI,e,e+Math.PI],_.each(this.possibleExtremaAngles,this.includeBoundsAtAngle.bind(this))}return this._bounds}get bounds(){return this.getBounds()}getNondegenerateSegments(){if(this._radiusX<=0||this._radiusY<=0||this._startAngle===this._endAngle)return[];if(this._radiusX===this._radiusY){const t=this._startAngle+this._rotation;let e=this._endAngle+this._rotation;return Math.abs(this._endAngle-this._startAngle)===Math.PI*2&&(e=this._anticlockwise?t-Math.PI*2:t+Math.PI*2),[new tt(this._center,this._radiusX,t,e,this._anticlockwise)]}else return[this]}includeBoundsAtAngle(t){this.unitArcSegment.containsAngle(t)&&(this._bounds=this._bounds.withPoint(this.positionAtAngle(t)))}mapAngle(t){return Math.abs(W.moduloBetweenDown(t-this._startAngle,-Math.PI,Math.PI))<1e-8?this._startAngle:Math.abs(W.moduloBetweenDown(t-this.getActualEndAngle(),-Math.PI,Math.PI))<1e-8?this.getActualEndAngle():this._startAngle>this.getActualEndAngle()?W.moduloBetweenUp(t,this._startAngle-2*Math.PI,this._startAngle):W.moduloBetweenDown(t,this._startAngle,this._startAngle+2*Math.PI)}tAtAngle(t){return(this.mapAngle(t)-this._startAngle)/(this.getActualEndAngle()-this._startAngle)}angleAt(t){return this._startAngle+(this.getActualEndAngle()-this._startAngle)*t}positionAtAngle(t){return this.getUnitTransform().transformPosition2(c.createPolar(1,t))}tangentAtAngle(t){const e=this.getUnitTransform().transformNormal2(c.createPolar(1,t));return this._anticlockwise?e.perpendicular:e.perpendicular.negated()}offsetTo(t,e){const i=[],L=[];for(let a=0;a<32;a++){let o=a/31;e&&(o=1-o);const h=this.angleAt(o);i.push(this.positionAtAngle(h).plus(this.tangentAtAngle(h).perpendicular.normalized().times(t))),a>0&&L.push(new D(i[a-1],i[a]))}return L}getSVGPathFragment(){let t;if(assert&&(t=this._svgPathFragment,this._svgPathFragment=null),!this._svgPathFragment){const s=this._anticlockwise?"0":"1";let i;const L=_0(this._rotation);if(this.getAngleDifference()<Math.PI*2-.01)i=this.getAngleDifference()<Math.PI?"0":"1",this._svgPathFragment=`A ${j(this._radiusX)} ${j(this._radiusY)} ${L} ${i} ${s} ${j(this.getEnd().x)} ${j(this.getEnd().y)}`;else{const a=(this._startAngle+this._endAngle)/2,o=this.positionAtAngle(a);i="0";const h=`A ${j(this._radiusX)} ${j(this._radiusY)} ${L} ${i} ${s} ${j(o.x)} ${j(o.y)}`,l=`A ${j(this._radiusX)} ${j(this._radiusY)} ${L} ${i} ${s} ${j(this.getEnd().x)} ${j(this.getEnd().y)}`;this._svgPathFragment=`${h} ${l}`}}return assert&&t&&assert(t===this._svgPathFragment,"Quadratic line segment changed without invalidate()"),this._svgPathFragment}strokeLeft(t){return this.offsetTo(-t/2,!1)}strokeRight(t){return this.offsetTo(t/2,!0)}getInteriorExtremaTs(){const t=[];return _.each(this.possibleExtremaAngles,e=>{if(this.unitArcSegment.containsAngle(e)){const s=this.tAtAngle(e),i=1e-10;s>i&&s<1-i&&t.push(s)}}),t.sort()}intersection(t){const e=this.getUnitTransform(),s=e.inverseRay2(t),i=this.getUnitArcSegment().intersection(s);return _.map(i,L=>{const a=e.transformPosition2(L.point),o=t.position.distance(a),h=e.inverseNormal2(L.normal);return new ge(o,a,h,L.wind,L.t)})}windingIntersection(t){const e=this.getUnitTransform().inverseRay2(t);return this.getUnitArcSegment().windingIntersection(e)}writeToContext(t){t.ellipse?t.ellipse(this._center.x,this._center.y,this._radiusX,this._radiusY,this._rotation,this._startAngle,this._endAngle,this._anticlockwise):(this.getUnitTransform().getMatrix().canvasAppendTransform(t),t.arc(0,0,1,this._startAngle,this._endAngle,this._anticlockwise),this.getUnitTransform().getInverse().canvasAppendTransform(t))}transformed(t){const e=t.timesVector2(c.createPolar(this._radiusX,this._rotation)).minus(t.timesVector2(c.ZERO)),s=t.timesVector2(c.createPolar(this._radiusY,this._rotation+Math.PI/2)).minus(t.timesVector2(c.ZERO)),i=e.angle,L=e.magnitude,a=s.magnitude,o=t.getDeterminant()<0,h=o?!this._anticlockwise:this._anticlockwise,l=o?-this._startAngle:this._startAngle;let u=o?-this._endAngle:this._endAngle;return Math.abs(this._endAngle-this._startAngle)===Math.PI*2&&(u=h?l-Math.PI*2:l+Math.PI*2),new _t(t.timesVector2(this._center),L,a,i,l,u,h)}getSignedAreaFragment(){const t=this._startAngle,e=this.getActualEndAngle(),s=Math.sin(t),i=Math.sin(e),L=Math.cos(t),a=Math.cos(e);return .5*(this._radiusX*this._radiusY*(e-t)+Math.cos(this._rotation)*(this._radiusX*this._center.y*(L-a)+this._radiusY*this._center.x*(i-s))+Math.sin(this._rotation)*(this._radiusX*this._center.x*(a-L)+this._radiusY*this._center.y*(i-s)))}reversed(){return new _t(this._center,this._radiusX,this._radiusY,this._rotation,this._endAngle,this._startAngle,!this._anticlockwise)}serialize(){return{type:"EllipticalArc",centerX:this._center.x,centerY:this._center.y,radiusX:this._radiusX,radiusY:this._radiusY,rotation:this._rotation,startAngle:this._startAngle,endAngle:this._endAngle,anticlockwise:this._anticlockwise}}getOverlaps(t,e=1e-6){return t instanceof _t?_t.getOverlaps(this,t):null}getConicMatrix(){const e=_t.computeUnitMatrix(this._center,this._radiusX,this._radiusY,this._rotation).inverted();return e.transposed().multiplyMatrix(x0).multiplyMatrix(e)}static deserialize(t){return assert&&assert(t.type==="EllipticalArc"),new _t(new c(t.centerX,t.centerY),t.radiusX,t.radiusY,t.rotation,t.startAngle,t.endAngle,t.anticlockwise)}static getOverlapType(t,e,s=1e-4){if(t._center.distance(e._center)<s){const i=Math.abs(t._radiusX-e._radiusX)<s&&Math.abs(t._radiusY-e._radiusY)<s,L=Math.abs(t._radiusX-e._radiusY)<s&&Math.abs(t._radiusY-e._radiusX)<s;if(i&&Math.abs(W.moduloBetweenDown(t._rotation-e._rotation+Math.PI/2,0,Math.PI)-Math.PI/2)<s)return xe.MATCHING_OVERLAP;if(L&&Math.abs(W.moduloBetweenDown(t._rotation-e._rotation,0,Math.PI)-Math.PI/2)<s)return xe.OPPOSITE_OVERLAP}return xe.NONE}static getOverlaps(t,e){return _t.getOverlapType(t,e)===xe.NONE?[]:tt.getAngularOverlaps(t._startAngle+t._rotation,t.getActualEndAngle()+t._rotation,e._startAngle+e._rotation,e.getActualEndAngle()+e._rotation)}static intersect(t,e,s=1e-10){if(_t.getOverlapType(t,e,s)===xe.NONE)return He.intersect(t,e);{const L=[],a=t.positionAt(0),o=t.positionAt(1),h=e.positionAt(0),l=e.positionAt(1);return a.equalsEpsilon(h,s)&&L.push(new Pt(a.average(h),0,0)),a.equalsEpsilon(l,s)&&L.push(new Pt(a.average(l),0,1)),o.equalsEpsilon(h,s)&&L.push(new Pt(o.average(h),1,0)),o.equalsEpsilon(l,s)&&L.push(new Pt(o.average(l),1,1)),L}}static computeUnitMatrix(t,e,s,i){return ie.translationFromVector(t).timesMatrix(ie.rotation2(i)).timesMatrix(ie.scaling(e,s))}static computeUnitTransform(t,e,s,i){return new Xn(_t.computeUnitMatrix(t,e,s,i))}}const se=class se extends Wi{};se.MATCHING_OVERLAP=new se,se.OPPOSITE_OVERLAP=new se,se.NONE=new se,se.enumeration=new Ji(se);let xe=se;Lt.register("EllipticalArc",_t);class Bt{constructor(t,e,s){if(this.segments=[],this.invalidatedEmitter=new Es,this._bounds=null,this._strokedSubpaths=null,this._strokedSubpathsComputed=!1,this._strokedStyles=null,this._invalidatingPoints=!1,this.points=e||(t&&t.length?_.map(t,i=>i.start).concat(t[t.length-1].end):[]),this.closed=!!s,this._invalidateListener=this.invalidate.bind(this),t)for(let i=0;i<t.length;i++)_.each(t[i].getNondegenerateSegments(),L=>{this.addSegmentDirectly(L)})}getBounds(){if(this._bounds===null){const t=gt.NOTHING.copy();_.each(this.segments,e=>{t.includeBounds(e.getBounds())}),this._bounds=t}return this._bounds}get bounds(){return this.getBounds()}getArcLength(t,e,s){let i=0;for(let L=0;L<this.segments.length;L++)i+=this.segments[L].getArcLength(t,e,s);return i}copy(){return new Bt(this.segments.slice(0),this.points.slice(0),this.closed)}invalidatePoints(){this._invalidatingPoints=!0;const t=this.segments.length;for(let e=0;e<t;e++)this.segments[e].invalidate();this._invalidatingPoints=!1,this.invalidate()}invalidate(){this._invalidatingPoints||(this._bounds=null,this._strokedSubpathsComputed=!1,this.invalidatedEmitter.emit())}addPoint(t){return this.points.push(t),this}addSegmentDirectly(t){return assert&&assert(t.start.isFinite(),"Segment start is infinite"),assert&&assert(t.end.isFinite(),"Segment end is infinite"),assert&&assert(t.startTangent.isFinite(),"Segment startTangent is infinite"),assert&&assert(t.endTangent.isFinite(),"Segment endTangent is infinite"),assert&&assert(t.bounds.isEmpty()||t.bounds.isFinite(),"Segment bounds is infinite and non-empty"),this.segments.push(t),t.invalidationEmitter.addListener(this._invalidateListener),this}addSegment(t){const s=t.getNondegenerateSegments().length;for(let i=0;i<s;i++)this.addSegmentDirectly(t);return this.invalidate(),this}addClosingSegment(){if(this.hasClosingSegment()){const t=this.getClosingSegment();this.addSegmentDirectly(t),this.invalidate(),this.addPoint(this.getFirstPoint()),this.closed=!0}}close(){this.closed=!0,this.addClosingSegment()}getLength(){return this.points.length}getFirstPoint(){return assert&&assert(this.points.length),_.first(this.points)}getLastPoint(){return assert&&assert(this.points.length),_.last(this.points)}getFirstSegment(){return assert&&assert(this.segments.length),_.first(this.segments)}getLastSegment(){return assert&&assert(this.segments.length),_.last(this.segments)}getFillSegments(){const t=this.segments.slice();return this.hasClosingSegment()&&t.push(this.getClosingSegment()),t}isDrawable(){return this.segments.length>0}isClosed(){return this.closed}hasClosingSegment(){return!this.getFirstPoint().equalsEpsilon(this.getLastPoint(),1e-9)}getClosingSegment(){return assert&&assert(this.hasClosingSegment(),"Implicit closing segment unnecessary on a fully closed path"),new D(this.getLastPoint(),this.getFirstPoint())}getClosestPoints(t){return pt.filterClosestToPointResult(_.flatten(this.segments.map(e=>e.getClosestPoints(t))))}writeToContext(t){if(this.isDrawable()){const e=this.getFirstSegment().start;t.moveTo(e.x,e.y);let s=this.segments.length;this.closed&&s>=2&&this.segments[s-1]instanceof D&&s--;for(let i=0;i<s;i++)this.segments[i].writeToContext(t);this.closed&&t.closePath()}}toPiecewiseLinear(t){return assert&&assert(!t.pointMap,"For use with pointMap, please use nonlinearTransformed"),new Bt(_.flatten(_.map(this.segments,e=>e.toPiecewiseLinearSegments(t))),void 0,this.closed)}transformed(t){return new Bt(_.map(this.segments,e=>e.transformed(t)),_.map(this.points,e=>t.timesVector2(e)),this.closed)}nonlinearTransformed(t){return new Bt(_.flatten(_.map(this.segments,e=>t.methodName&&e[t.methodName]?e[t.methodName](t):e.toPiecewiseLinearSegments(t))),void 0,this.closed)}getBoundsWithTransform(t){const e=gt.NOTHING.copy(),s=this.segments.length;for(let i=0;i<s;i++)e.includeBounds(this.segments[i].getBoundsWithTransform(t));return e}offset(t){if(!this.isDrawable())return new Bt([],void 0,this.closed);if(t===0)return new Bt(this.segments.slice(),void 0,this.closed);let e;const s=this.segments.slice(),i=[];for(e=0;e<s.length;e++)i.push(s[e].strokeLeft(2*t));let L=[];for(e=0;e<s.length;e++){if(this.closed||e>0){const a=(e>0?e:s.length)-1,o=s[e].start,h=s[a].endTangent,l=s[e].startTangent,u=h.perpendicular.negated().times(t).angle,f=l.perpendicular.negated().times(t).angle,d=h.perpendicular.dot(l)>0;L.push(new tt(o,Math.abs(t),u,f,d))}L=L.concat(i[e])}return new Bt(L,void 0,this.closed)}stroked(t){if(!this.isDrawable())return[];if(t===void 0&&(t=new O1),assert&&assert(!this._strokedSubpathsComputed||this._strokedStyles&&this._strokedSubpaths),this._strokedSubpathsComputed&&this._strokedStyles.equals(t))return this._strokedSubpaths;const e=t.lineWidth;let s,i=[],L=[];const a=this.getFirstSegment(),o=this.getLastSegment(),h=M=>{i=i.concat(M)},l=M=>{L=L.concat(M)},u=o.end.equals(a.start),f=u?null:new D(this.segments[this.segments.length-1].end,this.segments[0].start);for(s=0;s<this.segments.length;s++)s>0&&h(t.leftJoin(this.segments[s].start,this.segments[s-1].endTangent,this.segments[s].startTangent)),h(this.segments[s].strokeLeft(e));for(s=this.segments.length-1;s>=0;s--)s<this.segments.length-1&&l(t.rightJoin(this.segments[s].end,this.segments[s].endTangent,this.segments[s+1].startTangent)),l(this.segments[s].strokeRight(e));let d;return this.closed?(u?(h(t.leftJoin(o.end,o.endTangent,a.startTangent)),l(t.rightJoin(o.end,o.endTangent,a.startTangent))):(h(t.leftJoin(f.start,o.endTangent,f.startTangent)),h(f.strokeLeft(e)),h(t.leftJoin(f.end,f.endTangent,a.startTangent)),l(t.rightJoin(f.end,f.endTangent,a.startTangent)),l(f.strokeRight(e)),l(t.rightJoin(f.start,o.endTangent,f.startTangent))),d=[new Bt(i,void 0,!0),new Bt(L,void 0,!0)]):d=[new Bt(i.concat(t.cap(o.end,o.endTangent)).concat(L).concat(t.cap(a.start,a.startTangent.negated())),void 0,!0)],this._strokedSubpaths=d,this._strokedSubpathsComputed=!0,this._strokedStyles=t.copy(),d}dashed(t,e,s,i){const L=(h,l)=>{const u=h[h.length-1].concat(l[0]),f=h.slice(0,h.length-1).concat([u]).concat(l.slice(1));return assert&&assert(f.length===h.length+l.length-1),f},a=(h,l)=>{if(!h.hasRightFilled||!l.hasLeftFilled)return!1;const u=_.last(_.last(h.segmentArrays)),f=l.segmentArrays[0][0];return u.end.distance(f.start)<1e-5},o=[];for(let h=0;h<this.segments.length;h++){const l=this.segments[h],u=l.getDashValues(t,e,s,i);o.push(u),e+=u.arcLength;const f=[0].concat(u.values).concat([1]),d=u.initiallyInside;u.hasLeftFilled=d,u.hasRightFilled=f.length%2===0?d:!d,u.segmentArrays=[];for(let M=d?0:1;M<f.length-1;M+=2)f[M]!==f[M+1]&&u.segmentArrays.push([l.slice(f[M],f[M+1])])}for(let h=o.length-1;h>=1;h--){const l=o[h-1],u=o[h];a(l,u)&&o.splice(h-1,2,{segmentArrays:L(l.segmentArrays,u.segmentArrays),hasLeftFilled:l.hasLeftFilled,hasRightFilled:u.hasRightFilled})}if(o.length>1&&a(o[o.length-1],o[0])){const h=o.pop(),l=o.shift();o.push({segmentArrays:L(h.segmentArrays,l.segmentArrays),hasLeftFilled:h.hasLeftFilled,hasRightFilled:l.hasRightFilled})}return this.closed&&o.length===1&&o[0].segmentArrays.length===1&&o[0].hasLeftFilled&&o[0].hasRightFilled?[new Bt(o[0].segmentArrays[0],void 0,!0)]:_.flatten(o.map(h=>h.segmentArrays)).map(h=>new Bt(h))}serialize(){return{type:"Subpath",segments:this.segments.map(t=>t.serialize()),points:this.points.map(t=>({x:t.x,y:t.y})),closed:this.closed}}static deserialize(t){return assert&&assert(t.type==="Subpath"),new Bt(t.segments.map(pt.deserialize),t.points.map(e=>new c(e.x,e.y)),t.closed)}}Lt.register("Subpath",Bt);const Rt=Bt,A1=Math.random,ut=(n,t)=>new c(n,t),Qs=(n,t,e,s)=>e.copy().subtract(n).multiplyScalar((1-s)/6).add(t),Mt=class Mt{constructor(t,e){if(this.subpaths=[],this._invalidatingPoints=!1,this._immutable=!1,this.invalidatedEmitter=new Es,this.lastQuadraticControlPoint=null,this.lastCubicControlPoint=null,this._bounds=e?e.copy():null,this.resetControlPoints(),this._invalidateListener=this.invalidate.bind(this),typeof t=="object")for(let s=0;s<t.length;s++)this.addSubpath(t[s]);t&&typeof t!="object"&&_.each(M0.parse(t),s=>{assert&&assert(Mt.prototype[s.cmd]!==void 0,`method ${s.cmd} from parsed SVG does not exist`),this[s.cmd].apply(this,s.args)}),this.invalidate()}resetControlPoints(){this.lastQuadraticControlPoint=null,this.lastCubicControlPoint=null}setQuadraticControlPoint(t){this.lastQuadraticControlPoint=t,this.lastCubicControlPoint=null}setCubicControlPoint(t){this.lastQuadraticControlPoint=null,this.lastCubicControlPoint=t}moveTo(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.moveToPoint(ut(t,e))}moveToRelative(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.moveToPointRelative(ut(t,e))}moveToPointRelative(t){return this.moveToPoint(this.getRelativePoint().plus(t))}moveToPoint(t){return this.addSubpath(new Rt().addPoint(t)),this.resetControlPoints(),this}lineTo(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.lineToPoint(ut(t,e))}lineToRelative(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.lineToPointRelative(ut(t,e))}lineToPointRelative(t){return this.lineToPoint(this.getRelativePoint().plus(t))}lineToPoint(t){if(this.hasSubpaths()){const e=this.getLastSubpath().getLastPoint(),s=t,i=new D(e,s);this.getLastSubpath().addPoint(s),this.addSegmentAndBounds(i)}else this.ensure(t);return this.resetControlPoints(),this}horizontalLineTo(t){return this.lineTo(t,this.getRelativePoint().y)}horizontalLineToRelative(t){return this.lineToRelative(t,0)}verticalLineTo(t){return this.lineTo(this.getRelativePoint().x,t)}verticalLineToRelative(t){return this.lineToRelative(0,t)}zigZagTo(t,e,s,i,L){return this.zigZagToPoint(new c(t,e),s,i,L)}zigZagToPoint(t,e,s,i){assert&&assert(Number.isInteger(s),`numberZigZags must be an integer: ${s}`),this.ensure(t);const L=this.getLastPoint(),a=t.minus(L),o=a.normalized(),h=o.perpendicular.times(e);let l;i?l=a.magnitude/(s+.5):l=a.magnitude/s;for(let u=0;u<s;u++){const f=o.times(u*l).plus(L),d=f.plus(o.times(l/4)).plus(h),M=f.plus(o.times(3*l/4)).minus(h);this.lineToPoint(d),this.lineToPoint(M)}if(i){const f=o.times(s*l).plus(L).plus(o.times(l/4)).plus(h);this.lineToPoint(f)}return this.lineToPoint(t)}quadraticCurveTo(t,e,s,i){return assert&&assert(isFinite(t),`cpx must be a finite number: ${t}`),assert&&assert(isFinite(e),`cpy must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(i),`y must be a finite number: ${i}`),this.quadraticCurveToPoint(ut(t,e),ut(s,i))}quadraticCurveToRelative(t,e,s,i){return assert&&assert(isFinite(t),`cpx must be a finite number: ${t}`),assert&&assert(isFinite(e),`cpy must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(i),`y must be a finite number: ${i}`),this.quadraticCurveToPointRelative(ut(t,e),ut(s,i))}quadraticCurveToPointRelative(t,e){const s=this.getRelativePoint();return this.quadraticCurveToPoint(s.plus(t),s.plus(e))}smoothQuadraticCurveTo(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(),ut(t,e))}smoothQuadraticCurveToRelative(t,e){return assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(),ut(t,e).plus(this.getRelativePoint()))}quadraticCurveToPoint(t,e){this.ensure(t);const s=this.getLastSubpath().getLastPoint(),i=new Zt(s,t,e);this.getLastSubpath().addPoint(e);const L=i.getNondegenerateSegments();return _.each(L,a=>{this.addSegmentAndBounds(a)}),this.setQuadraticControlPoint(t),this}cubicCurveTo(t,e,s,i,L,a){return assert&&assert(isFinite(t),`cp1x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp1y must be a finite number: ${e}`),assert&&assert(isFinite(s),`cp2x must be a finite number: ${s}`),assert&&assert(isFinite(i),`cp2y must be a finite number: ${i}`),assert&&assert(isFinite(L),`x must be a finite number: ${L}`),assert&&assert(isFinite(a),`y must be a finite number: ${a}`),this.cubicCurveToPoint(ut(t,e),ut(s,i),ut(L,a))}cubicCurveToRelative(t,e,s,i,L,a){return assert&&assert(isFinite(t),`cp1x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp1y must be a finite number: ${e}`),assert&&assert(isFinite(s),`cp2x must be a finite number: ${s}`),assert&&assert(isFinite(i),`cp2y must be a finite number: ${i}`),assert&&assert(isFinite(L),`x must be a finite number: ${L}`),assert&&assert(isFinite(a),`y must be a finite number: ${a}`),this.cubicCurveToPointRelative(ut(t,e),ut(s,i),ut(L,a))}cubicCurveToPointRelative(t,e,s){const i=this.getRelativePoint();return this.cubicCurveToPoint(i.plus(t),i.plus(e),i.plus(s))}smoothCubicCurveTo(t,e,s,i){return assert&&assert(isFinite(t),`cp2x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp2y must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(i),`y must be a finite number: ${i}`),this.cubicCurveToPoint(this.getSmoothCubicControlPoint(),ut(t,e),ut(s,i))}smoothCubicCurveToRelative(t,e,s,i){return assert&&assert(isFinite(t),`cp2x must be a finite number: ${t}`),assert&&assert(isFinite(e),`cp2y must be a finite number: ${e}`),assert&&assert(isFinite(s),`x must be a finite number: ${s}`),assert&&assert(isFinite(i),`y must be a finite number: ${i}`),this.cubicCurveToPoint(this.getSmoothCubicControlPoint(),ut(t,e).plus(this.getRelativePoint()),ut(s,i).plus(this.getRelativePoint()))}cubicCurveToPoint(t,e,s){this.ensure(t);const i=this.getLastSubpath().getLastPoint(),a=new xt(i,t,e,s).getNondegenerateSegments();return _.each(a,o=>{this.addSegmentAndBounds(o)}),this.getLastSubpath().addPoint(s),this.setCubicControlPoint(e),this}arc(t,e,s,i,L,a){return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.arcPoint(ut(t,e),s,i,L,a)}arcPoint(t,e,s,i,L){L===void 0&&(L=!1);const a=new tt(t,e,s,i,L),o=a.getStart(),h=a.getEnd();return this.hasSubpaths()&&this.getLastSubpath().getLength()>0&&!o.equals(this.getLastSubpath().getLastPoint())&&this.addSegmentAndBounds(new D(this.getLastSubpath().getLastPoint(),o)),this.hasSubpaths()||this.addSubpath(new Rt),this.getLastSubpath().addPoint(o),this.getLastSubpath().addPoint(h),this.addSegmentAndBounds(a),this.resetControlPoints(),this}ellipticalArc(t,e,s,i,L,a,o,h){return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.ellipticalArcPoint(ut(t,e),s,i,L,a,o,h)}ellipticalArcPoint(t,e,s,i,L,a,o){o===void 0&&(o=!1);const h=new _t(t,e,s,i,L,a,o),l=h.start,u=h.end;return this.hasSubpaths()&&this.getLastSubpath().getLength()>0&&!l.equals(this.getLastSubpath().getLastPoint())&&this.addSegmentAndBounds(new D(this.getLastSubpath().getLastPoint(),l)),this.hasSubpaths()||this.addSubpath(new Rt),this.getLastSubpath().addPoint(l),this.getLastSubpath().addPoint(u),this.addSegmentAndBounds(h),this.resetControlPoints(),this}close(){if(this.hasSubpaths()){const t=this.getLastSubpath(),e=new Rt;t.close(),this.addSubpath(e),e.addPoint(t.getFirstPoint())}return this.resetControlPoints(),this}newSubpath(){return this.addSubpath(new Rt),this.resetControlPoints(),this}makeImmutable(){return this._immutable=!0,this.notifyInvalidationListeners(),this}isImmutable(){return this._immutable}ellipticalArcToRelative(t,e,s,i,L,a,o){const h=this.getRelativePoint();return this.ellipticalArcTo(t,e,s,i,L,a+h.x,o+h.y)}ellipticalArcTo(t,e,s,i,L,a,o){const h=new c(a,o);this.ensure(h);const l=this.getLastSubpath().getLastPoint();this.getLastSubpath().addPoint(h),t<0&&(t*=-1),e<0&&(e*=-1);let u=t*t,f=e*e;const d=l.minus(h).dividedScalar(2).rotated(-s),M=d.x*d.x,p=d.y*d.y;let A=new c(t*d.y/e,-e*d.x/t);const x=M/u+p/f;x>1&&(t*=Math.sqrt(x),e*=Math.sqrt(x),u=t*t,f=e*e,A=new c(t*d.y/e,-e*d.x/t)),A.multiplyScalar(Math.sqrt(Math.max(0,(u*f-u*p-f*M)/(u*p+f*M)))),i===L&&A.multiplyScalar(-1);const b=l.blend(h,.5).plus(A.rotated(s)),w=(C,F)=>(C.x*F.y-C.y*F.x>0?1:-1)*C.angleBetween(F),y=new c((d.x-A.x)/t,(d.y-A.y)/e),E=new c((-d.x-A.x)/t,(-d.y-A.y)/e),I=w(c.X_UNIT,y);let B=w(y,E)%(Math.PI*2);!L&&B>0&&(B-=Math.PI*2),L&&B<0&&(B+=Math.PI*2);const N=new _t(b,t,e,s,I,I+B,!L).getNondegenerateSegments();return _.each(N,C=>{this.addSegmentAndBounds(C)}),this}circle(t,e,s){if(typeof t=="object"){const i=t;return s=e,this.arcPoint(i,s,0,Math.PI*2,!1).close()}else return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.arcPoint(ut(t,e),s,0,Math.PI*2,!1).close()}ellipse(t,e,s,i,L){if(typeof t=="object"){const a=t;return L=i,i=s,s=e,this.ellipticalArcPoint(a,s,i,L||0,0,Math.PI*2,!1).close()}else return assert&&assert(isFinite(t),`centerX must be a finite number: ${t}`),assert&&assert(isFinite(e),`centerY must be a finite number: ${e}`),this.ellipticalArcPoint(ut(t,e),s,i,L||0,0,Math.PI*2,!1).close()}rect(t,e,s,i){assert&&assert(isFinite(t),`x must be a finite number: ${t}`),assert&&assert(isFinite(e),`y must be a finite number: ${e}`),assert&&assert(isFinite(s),`width must be a finite number: ${s}`),assert&&assert(isFinite(i),`height must be a finite number: ${i}`);const L=new Rt;return this.addSubpath(L),L.addPoint(ut(t,e)),L.addPoint(ut(t+s,e)),L.addPoint(ut(t+s,e+i)),L.addPoint(ut(t,e+i)),this.addSegmentAndBounds(new D(L.points[0],L.points[1])),this.addSegmentAndBounds(new D(L.points[1],L.points[2])),this.addSegmentAndBounds(new D(L.points[2],L.points[3])),L.close(),this.addSubpath(new Rt),this.getLastSubpath().addPoint(ut(t,e)),assert&&assert(!isNaN(this.bounds.getX())),this.resetControlPoints(),this}roundRect(t,e,s,i,L,a){const o=t+L,h=t+s-L,l=e+a,u=e+i-a;return L===a?this.arc(h,l,L,-Math.PI/2,0,!1).arc(h,u,L,0,Math.PI/2,!1).arc(o,u,L,Math.PI/2,Math.PI,!1).arc(o,l,L,Math.PI,Math.PI*3/2,!1).close():this.ellipticalArc(h,l,L,a,0,-Math.PI/2,0,!1).ellipticalArc(h,u,L,a,0,0,Math.PI/2,!1).ellipticalArc(o,u,L,a,0,Math.PI/2,Math.PI,!1).ellipticalArc(o,l,L,a,0,Math.PI,Math.PI*3/2,!1).close(),this}polygon(t){const e=t.length;if(e>0){this.moveToPoint(t[0]);for(let s=1;s<e;s++)this.lineToPoint(t[s])}return this.close()}cardinalSpline(t,e){const s=Ms()({tension:0,isClosedLineSegments:!1},e);assert&&assert(s.tension<1&&s.tension>-1," the tension goes from -1 to 1 ");const i=t.length,L=s.isClosedLineSegments?i:i-1;for(let a=0;a<L;a++){let o;a===0&&!s.isClosedLineSegments?o=[t[0],t[0],t[1],t[2]]:a===L-1&&!s.isClosedLineSegments?o=[t[a-1],t[a],t[a+1],t[a+1]]:o=[t[(a-1+i)%i],t[a%i],t[(a+1)%i],t[(a+2)%i]];const h=[o[1],Qs(o[0],o[1],o[2],s.tension),Qs(o[3],o[2],o[1],s.tension),o[2]];a===0&&(this.ensure(h[0]),this.getLastSubpath().addPoint(h[0])),this.cubicCurveToPoint(h[1],h[2],h[3])}return this}copy(){return new Mt(_.map(this.subpaths,t=>t.copy()),this.bounds)}writeToContext(t){const e=this.subpaths.length;for(let s=0;s<e;s++)this.subpaths[s].writeToContext(t)}getSVGPath(){let t="";const e=this.subpaths.length;for(let s=0;s<e;s++){const i=this.subpaths[s];if(i.isDrawable()){const L=i.segments[0].start;t+=`M ${j(L.x)} ${j(L.y)} `;for(let a=0;a<i.segments.length;a++)t+=`${i.segments[a].getSVGPathFragment()} `;i.isClosed()&&(t+="Z ")}}return t}transformed(t){const e=_.map(this.subpaths,i=>i.transformed(t)),s=_.reduce(e,(i,L)=>i.union(L.bounds),gt.NOTHING);return new Mt(e,s)}nonlinearTransformed(t){const e=Ys({minLevels:0,maxLevels:7,distanceEpsilon:.16,curveEpsilon:t&&t.includeCurvature?.002:null},t),s=_.map(this.subpaths,L=>L.nonlinearTransformed(e)),i=_.reduce(s,(L,a)=>L.union(a.bounds),gt.NOTHING);return new Mt(s,i)}polarToCartesian(t){return this.nonlinearTransformed(Ys({pointMap:e=>c.createPolar(e.y,e.x),methodName:"polarToCartesian"},t))}toPiecewiseLinear(t){return assert&&assert(!t||!t.pointMap,"No pointMap for toPiecewiseLinear allowed, since it could create non-linear segments"),assert&&assert(!t||!t.methodName,"No methodName for toPiecewiseLinear allowed, since it could create non-linear segments"),this.nonlinearTransformed(t)}containsPoint(t){const e=c.X_UNIT.copy();let s=0;for(;s<5&&(s++,_.some(this.subpaths,L=>_.some(L.segments,a=>{const o=a.start.minus(t),h=o.magnitude;return h!==0?(o.divideScalar(h),o.subtract(e),o.magnitudeSquared<1e-9):!1})));)e.rotate(Qi.nextDouble());return this.windingIntersection(new ce(t,e))!==0}intersection(t){let e=[];const s=this.subpaths.length;for(let i=0;i<s;i++){const L=this.subpaths[i];if(L.isDrawable()){const a=L.segments.length;for(let o=0;o<a;o++){const h=L.segments[o];e=e.concat(h.intersection(t))}L.hasClosingSegment()&&(e=e.concat(L.getClosingSegment().intersection(t)))}}return _.sortBy(e,i=>i.distance)}interiorIntersectsLineSegment(t,e){const s=t.blend(e,.5);if(this.containsPoint(s))return!0;const i=e.minus(t),L=i.magnitude;if(L===0)return!1;i.normalize();const a=this.intersection(new ce(t,i));for(let o=0;o<a.length;o++)if(a[o].distance<=L)return!0;return!1}windingIntersection(t){let e=0;const s=this.subpaths.length;for(let i=0;i<s;i++){const L=this.subpaths[i];if(L.isDrawable()){const a=L.segments.length;for(let o=0;o<a;o++)e+=L.segments[o].windingIntersection(t);L.hasClosingSegment()&&(e+=L.getClosingSegment().windingIntersection(t))}}return e}intersectsBounds(t){if(this.bounds.intersection(t).equals(this.bounds))return!0;const e=new ce(new c(t.minX,t.minY),new c(1,0)),s=new ce(new c(t.minX,t.minY),new c(0,1)),i=new ce(new c(t.maxX,t.maxY),new c(-1,0)),L=new ce(new c(t.maxX,t.maxY),new c(0,-1));let a,o;const h=this.intersection(e).concat(this.intersection(i));for(o=0;o<h.length;o++)if(a=h[o].point,a.x>=t.minX&&a.x<=t.maxX)return!0;const l=this.intersection(s).concat(this.intersection(L));for(o=0;o<l.length;o++)if(a=l[o].point,a.y>=t.minY&&a.y<=t.maxY)return!0;return!1}getStrokedShape(t){let e=[];const s=gt.NOTHING.copy();let i=this.subpaths.length;for(let L=0;L<i;L++){const o=this.subpaths[L].stroked(t);e=e.concat(o)}i=e.length;for(let L=0;L<i;L++)s.includeBounds(e[L].bounds);return new Mt(e,s)}getOffsetShape(t){const e=[],s=gt.NOTHING.copy();let i=this.subpaths.length;for(let L=0;L<i;L++)e.push(this.subpaths[L].offset(t));i=e.length;for(let L=0;L<i;L++)s.includeBounds(e[L].bounds);return new Mt(e,s)}getDashedShape(t,e,s){const i=Ms()({distanceEpsilon:1e-10,curveEpsilon:1e-8},s);return new Mt(_.flatten(this.subpaths.map(L=>L.dashed(t,e,i.distanceEpsilon,i.curveEpsilon))))}getBounds(){if(this._bounds===null){const t=gt.NOTHING.copy();_.each(this.subpaths,e=>{t.includeBounds(e.getBounds())}),this._bounds=t}return this._bounds}get bounds(){return this.getBounds()}getStrokedBounds(t){let e=!0;for(let s=0;s<this.subpaths.length;s++){const i=this.subpaths[s];if(i.isDrawable()&&!i.isClosed()){e=!1;break}for(let L=0;L<i.segments.length;L++)if(!i.segments[L].areStrokedBoundsDilated()){e=!1;break}}if(e)return this.bounds.dilated(t.lineWidth/2);{const s=this.bounds.copy();for(let i=0;i<this.subpaths.length;i++){const L=this.subpaths[i].stroked(t);for(let a=0;a<L.length;a++)s.includeBounds(L[a].bounds)}return s}}getSimplifiedAreaShape(){return Dt.simplifyNonZero(this)}getBoundsWithTransform(t,e){const s=gt.NOTHING.copy(),i=this.subpaths.length;for(let L=0;L<i;L++){const a=this.subpaths[L];s.includeBounds(a.getBoundsWithTransform(t))}return e&&s.includeBounds(this.getStrokedShape(e).getBoundsWithTransform(t)),s}getApproximateArea(t){const e=this.bounds.minX,s=this.bounds.minY,i=this.bounds.width,L=this.bounds.height,a=i*L;let o=0;const h=new c(0,0);for(let l=0;l<t;l++)h.x=e+A1()*i,h.y=s+A1()*L,this.containsPoint(h)&&o++;return a*o/t}getNonoverlappingArea(){return Math.abs(_.sum(this.subpaths.map(t=>_.sum(t.getFillSegments().map(e=>e.getSignedAreaFragment())))))}getArea(){return this.getSimplifiedAreaShape().getNonoverlappingArea()}getApproximateCentroid(t){const e=this.bounds.minX,s=this.bounds.minY,i=this.bounds.width,L=this.bounds.height;let a=0;const o=new c(0,0),h=new c(0,0);for(let l=0;l<t;l++)h.x=e+A1()*i,h.y=s+A1()*L,this.containsPoint(h)&&(o.add(h),a++);return o.dividedScalar(a)}getClosestPoints(t){return pt.filterClosestToPointResult(_.flatten(this.subpaths.map(e=>e.getClosestPoints(t))))}getClosestPoint(t){return this.getClosestPoints(t)[0].closestPoint}invalidatePoints(){this._invalidatingPoints=!0;const t=this.subpaths.length;for(let e=0;e<t;e++)this.subpaths[e].invalidatePoints();this._invalidatingPoints=!1,this.invalidate()}toString(){return`new phet.kite.Shape( '${this.getSVGPath()}' )`}invalidate(){assert&&assert(!this._immutable,"Attempt to modify an immutable Shape"),this._invalidatingPoints||(this._bounds=null,this.notifyInvalidationListeners())}notifyInvalidationListeners(){this.invalidatedEmitter.emit()}addSegmentAndBounds(t){this.getLastSubpath().addSegment(t),this.invalidate()}ensure(t){this.hasSubpaths()||(this.addSubpath(new Rt),this.getLastSubpath().addPoint(t))}addSubpath(t){return this.subpaths.push(t),t.invalidatedEmitter.addListener(this._invalidateListener),this.invalidate(),this}hasSubpaths(){return this.subpaths.length>0}getLastSubpath(){return assert&&assert(this.hasSubpaths(),"We should have a subpath if this is called"),_.last(this.subpaths)}getLastPoint(){return assert&&assert(this.hasSubpaths(),"We should have a subpath if this is called"),assert&&assert(this.getLastSubpath().getLastPoint(),"We should have a last point"),this.getLastSubpath().getLastPoint()}getLastSegment(){if(!this.hasSubpaths())return null;const t=this.getLastSubpath();return t.isDrawable()?t.getLastSegment():null}getSmoothQuadraticControlPoint(){const t=this.getLastPoint();return this.lastQuadraticControlPoint?t.plus(t.minus(this.lastQuadraticControlPoint)):t}getSmoothCubicControlPoint(){const t=this.getLastPoint();return this.lastCubicControlPoint?t.plus(t.minus(this.lastCubicControlPoint)):t}getRelativePoint(){let t=c.ZERO;if(this.hasSubpaths()){const e=this.getLastSubpath();e.points.length&&(t=e.getLastPoint())}return t}shapeUnion(t){return Dt.binaryResult(this,t,Dt.BINARY_NONZERO_UNION)}shapeIntersection(t){return Dt.binaryResult(this,t,Dt.BINARY_NONZERO_INTERSECTION)}shapeDifference(t){return Dt.binaryResult(this,t,Dt.BINARY_NONZERO_DIFFERENCE)}shapeXor(t){return Dt.binaryResult(this,t,Dt.BINARY_NONZERO_XOR)}shapeClip(t,e){return Dt.clipShape(t,this,e)}getArcLength(t,e,s){let i=0;for(let L=0;L<this.subpaths.length;L++)i+=this.subpaths[L].getArcLength(t,e,s);return i}serialize(){return{type:"Shape",subpaths:this.subpaths.map(t=>t.serialize())}}static deserialize(t){return assert&&assert(t.type==="Shape"),new Mt(t.subpaths.map(Rt.deserialize))}static rectangle(t,e,s,i){return new Mt().rect(t,e,s,i)}static roundRect(t,e,s,i,L,a){return new Mt().roundRect(t,e,s,i,L,a)}static roundedRectangleWithRadii(t,e,s,i,L){let a=L&&L.topLeft||0,o=L&&L.topRight||0,h=L&&L.bottomLeft||0,l=L&&L.bottomRight||0;assert&&assert(isFinite(t),"Non-finite x"),assert&&assert(isFinite(e),"Non-finite y"),assert&&assert(s>=0&&isFinite(s),"Negative or non-finite width"),assert&&assert(i>=0&&isFinite(i),"Negative or non-finite height"),assert&&assert(a>=0&&isFinite(a),"Invalid topLeft"),assert&&assert(o>=0&&isFinite(o),"Invalid topRight"),assert&&assert(h>=0&&isFinite(h),"Invalid bottomLeft"),assert&&assert(l>=0&&isFinite(l),"Invalid bottomRight");const u=a+o;u>s&&u>0&&(a=a/u*s,o=o/u*s);const f=h+l;f>s&&f>0&&(h=h/f*s,l=l/f*s);const d=a+h;d>i&&d>0&&(a=a/d*i,h=h/d*i);const M=o+l;M>i&&M>0&&(o=o/M*i,l=l/M*i),assert&&assert(a+o<=s,"Corner overlap on top edge"),assert&&assert(h+l<=s,"Corner overlap on bottom edge"),assert&&assert(a+h<=i,"Corner overlap on left edge"),assert&&assert(o+l<=i,"Corner overlap on right edge");const p=new Mt,A=t+s,x=e+i;return l>0?p.arc(A-l,x-l,l,0,Math.PI/2,!1):p.moveTo(A,x),h>0?p.arc(t+h,x-h,h,Math.PI/2,Math.PI,!1):p.lineTo(t,x),a>0?p.arc(t+a,e+a,a,Math.PI,3*Math.PI/2,!1):p.lineTo(t,e),o>0?p.arc(A-o,e+o,o,3*Math.PI/2,2*Math.PI,!1):p.lineTo(A,e),p.close(),p}static boundsOffsetWithRadii(t,e,s){const i=t.withOffsets(e.left,e.top,e.right,e.bottom);return Mt.roundedRectangleWithRadii(i.minX,i.minY,i.width,i.height,s)}static polygon(t){return new Mt().polygon(t)}static bounds(t){return new Mt().rect(t.minX,t.minY,t.maxX-t.minX,t.maxY-t.minY)}static lineSegment(t,e,s,i){return typeof t=="number"?new Mt().moveTo(t,e).lineTo(s,i):new Mt().moveToPoint(t).lineToPoint(e)}static regularPolygon(t,e){const s=new Mt;return _.each(_.range(t),i=>{const L=c.createPolar(e,2*Math.PI*i/t);i===0?s.moveToPoint(L):s.lineToPoint(L)}),s.close()}static circle(t,e,s){return e===void 0?new Mt().circle(0,0,t):new Mt().circle(t,e,s)}static ellipse(t,e,s,i,L){return i===void 0?new Mt().ellipse(0,0,t,e,s):new Mt().ellipse(t,e,s,i,L)}static arc(t,e,s,i,L,a){return new Mt().arc(t,e,s,i,L,a)}static union(t){return Dt.unionNonZero(t)}static intersection(t){return Dt.intersectionNonZero(t)}static xor(t){return Dt.xorNonZero(t)}static segments(t,e){if(assert)for(let s=1;s<t.length;s++)assert(t[s-1].end.equalsEpsilon(t[s].start,1e-6),"Mismatched start/end");return new Mt([new Rt(t,void 0,!!e)])}};Mt.rect=Mt.rectangle,Mt.roundRectangle=Mt.roundRect;let B1=Mt;Lt.register("Shape",B1);const Yt=B1;let v0=0;const i1=class i1{constructor(t,e){this.id=++v0,this.initialize(t,e)}initialize(t,e){return assert&&assert(t instanceof Lt.Edge),assert&&assert(typeof e=="boolean"),this.edge=t,this.face=null,this.isReversed=e,this.signedAreaFragment=t.signedAreaFragment*(e?-1:1),this.startVertex=null,this.endVertex=null,this.sortVector=this.sortVector||new c(0,0),this.data=null,this.updateReferences(),this}serialize(){return{type:"HalfEdge",id:this.id,edge:this.edge.id,face:this.face===null?null:this.face.id,isReversed:this.isReversed,signedAreaFragment:this.signedAreaFragment,startVertex:this.startVertex===null?null:this.startVertex.id,endVertex:this.endVertex===null?null:this.endVertex.id,sortVector:c.Vector2IO.toStateObject(this.sortVector),data:this.data}}dispose(){this.edge=null,this.face=null,this.startVertex=null,this.endVertex=null,this.data=null,this.freeToPool()}getNext(t){for(let e=1;;e++){let s=this.endVertex.incidentHalfEdges.indexOf(this)-e;s<0&&(s+=this.endVertex.incidentHalfEdges.length);const i=this.endVertex.incidentHalfEdges[s].getReversed();if(!(t&&!t(i.edge)))return assert&&assert(this.endVertex===i.startVertex),i}}updateReferences(){this.startVertex=this.isReversed?this.edge.endVertex:this.edge.startVertex,this.endVertex=this.isReversed?this.edge.startVertex:this.edge.endVertex,assert&&assert(this.startVertex),assert&&assert(this.endVertex)}getEndTangent(){return this.isReversed?this.edge.segment.startTangent:this.edge.segment.endTangent.negated()}getEndCurvature(){return this.isReversed?-this.edge.segment.curvatureAt(0):this.edge.segment.curvatureAt(1)}getReversed(){return this.isReversed?this.edge.forwardHalf:this.edge.reversedHalf}getDirectionalSegment(){return this.isReversed?this.edge.segment.reversed():this.edge.segment}freeToPool(){i1.pool.freeToPool(this)}};H(i1,"pool",new _e(i1));let l1=i1;Lt.register("HalfEdge",l1);function St(n){if(assert&&assert(!n||Array.isArray(n),"cleanArray either takes an Array"),n){for(;n.length;)n.pop();return n}else return[]}it.register("cleanArray",St);let b0=0;const Re=class Re{constructor(t){this.id=++b0,this.initialize(t)}initialize(t){return assert&&assert(t instanceof c),this.point=t,this.incidentHalfEdges=St(this.incidentHalfEdges),this.visited=!1,this.visitIndex=0,this.lowIndex=0,this.data=null,this.internalData={},this}serialize(){return{type:"Vertex",id:this.id,point:c.Vector2IO.toStateObject(this.point),incidentHalfEdges:this.incidentHalfEdges.map(t=>t.id),visited:this.visited,visitIndex:this.visitIndex,lowIndex:this.lowIndex}}dispose(){this.point=c.ZERO,St(this.incidentHalfEdges),this.freeToPool()}sortEdges(){const t=[];for(let i=0;i<this.incidentHalfEdges.length;i++){const L=this.incidentHalfEdges[i];t.push(L.sortVector.setXY(L.getEndTangent().angle,L.getEndCurvature()))}const e=-Math.PI+1e-4;let s=!1;for(;!s;){s=!0;for(let i=0;i<t.length;i++)t[i].x<e&&(s=!1);if(!s)for(let i=0;i<t.length;i++){const L=t[i];L.x-=1.62594024516,L.x<-Math.PI-1e-4&&(L.x+=Math.PI*2)}}this.incidentHalfEdges.sort(Re.edgeComparison)}static edgeComparison(t,e){const s=t.sortVector.x,i=e.sortVector.x;if(Math.abs(s-i)>1e-5||s!==i&&t.edge.segment instanceof D&&e.edge.segment instanceof D)return s<i?-1:1;{const L=t.sortVector.y,a=e.sortVector.y;if(Math.abs(L-a)>1e-5)return L<a?1:-1;{const h=t.getDirectionalSegment().subdivided(.999)[1].curvatureAt(0),l=e.getDirectionalSegment().subdivided(.999)[1].curvatureAt(0);return h<l?1:-1}}}freeToPool(){Re.pool.freeToPool(this)}};H(Re,"pool",new _e(Re));let kt=Re;Lt.register("Vertex",kt);let A0=0;const L1=class L1{constructor(t,e,s){this.id=++A0,this.initialize(t,e,s)}initialize(t,e,s){return assert&&assert(t instanceof pt),assert&&assert(e instanceof kt),assert&&assert(s instanceof kt),assert&&assert(t.start.distance(e.point)<.001),assert&&assert(t.end.distance(s.point)<.001),this.segment=t,this.startVertex=e,this.endVertex=s,this.signedAreaFragment=t.getSignedAreaFragment(),this.forwardHalf=l1.pool.create(this,!1),this.reversedHalf=l1.pool.create(this,!0),this.visited=!1,this.data=null,this.internalData={},this}serialize(){return{type:"Edge",id:this.id,segment:this.segment.serialize(),startVertex:this.startVertex===null?null:this.startVertex.id,endVertex:this.endVertex===null?null:this.endVertex.id,signedAreaFragment:this.signedAreaFragment,forwardHalf:this.forwardHalf.serialize(),reversedHalf:this.reversedHalf.serialize(),visited:this.visited,data:this.data}}dispose(){this.segment=null,this.startVertex=null,this.endVertex=null,this.forwardHalf.dispose(),this.reversedHalf.dispose(),this.forwardHalf=null,this.reversedHalf=null,this.data=null,this.freeToPool()}getOtherVertex(t){return assert&&assert(t===this.startVertex||t===this.endVertex),this.startVertex===t?this.endVertex:this.startVertex}updateReferences(){this.forwardHalf.updateReferences(),this.reversedHalf.updateReferences(),assert&&assert(!(this.segment instanceof D)||this.startVertex!==this.endVertex,"No line segments for same vertices")}freeToPool(){L1.pool.freeToPool(this)}};H(L1,"pool",new _e(L1));let bt=L1;Lt.register("Edge",bt);let E0=0;const r1=class r1{constructor(t){this.id=++E0,this.initialize(t)}initialize(t){return assert&&assert(t===null||t.isInner()),this.boundary=t,this.holes=St(this.holes),this.windingMap=null,this.filled=null,t&&this.addBoundaryFaceReferences(t),this}serialize(){return{type:"Face",id:this.id,boundary:this.boundary===null?null:this.boundary.id,holes:this.holes.map(t=>t.id),windingMap:this.windingMap,filled:this.filled}}dispose(){this.boundary=null,St(this.holes),this.windingMap=null,this.filled=null,this.freeToPool()}addBoundaryFaceReferences(t){for(let e=0;e<t.halfEdges.length;e++)assert&&assert(t.halfEdges[e].face===null),t.halfEdges[e].face=this}recursivelyAddHoles(t){assert&&assert(!t.isInner()),this.holes.push(t),this.addBoundaryFaceReferences(t);for(let e=0;e<t.childBoundaries.length;e++)this.recursivelyAddHoles(t.childBoundaries[e])}freeToPool(){r1.pool.freeToPool(this)}};H(r1,"pool",new _e(r1));let Ne=r1;Lt.register("Face",Ne);let y0=0;const a1=class a1{constructor(t,e){this.id=++y0,this.initialize(t,e)}initialize(t,e){return assert&&assert(typeof t=="number"),assert&&assert(typeof e=="boolean"),this.shapeId=t,this.closed=e,this.halfEdges=St(this.halfEdges),this}serialize(){return{type:"Loop",id:this.id,shapeId:this.shapeId,closed:this.closed,halfEdges:this.halfEdges.map(t=>t.id)}}toSubpath(){const t=[];for(let e=0;e<this.halfEdges.length;e++)t.push(this.halfEdges[e].getDirectionalSegment());return new Rt(t,void 0,this.closed)}dispose(){St(this.halfEdges),this.freeToPool()}freeToPool(){a1.pool.freeToPool(this)}};H(a1,"pool",new _e(a1));let h1=a1;Lt.register("Loop",h1);let S0=0;const o1=class o1{constructor(t){this.id=++S0,this.initialize(t)}initialize(t){return this.halfEdges=t,this.signedArea=this.computeSignedArea(),this.bounds=this.computeBounds(),this.childBoundaries=St(this.childBoundaries),this}serialize(){return{type:"Boundary",id:this.id,halfEdges:this.halfEdges.map(t=>t.id),signedArea:this.signedArea,bounds:gt.Bounds2IO.toStateObject(this.bounds),childBoundaries:this.childBoundaries.map(t=>t.id)}}dispose(){this.halfEdges=[],St(this.childBoundaries),this.freeToPool()}isInner(){return this.signedArea>0}computeSignedArea(){let t=0;for(let e=0;e<this.halfEdges.length;e++)t+=this.halfEdges[e].signedAreaFragment;return t}computeBounds(){const t=gt.NOTHING.copy();for(let e=0;e<this.halfEdges.length;e++)t.includeBounds(this.halfEdges[e].edge.segment.getBounds());return t}computeExtremePoint(t){assert&&assert(this.halfEdges.length>0,"There is no extreme point if we have no edges");const e=[];for(let i=0;i<this.halfEdges.length;i++)e.push(this.halfEdges[i].edge.segment.transformed(t.getMatrix()));const s=gt.NOTHING.copy();for(let i=0;i<e.length;i++)s.includeBounds(e[i].getBounds());for(let i=0;i<e.length;i++){const L=e[i];if(L.getBounds().top===s.top){let a=new c(0,Number.POSITIVE_INFINITY);const o=[0,1].concat(L.getInteriorExtremaTs());for(let h=0;h<o.length;h++){const l=L.positionAt(o[h]);l.y<a.y&&(a=l)}return t.inversePosition2(a)}}throw new Error("Should not reach here if we have segments")}computeExtremeRay(t){const e=this.computeExtremePoint(t),s=t.inverseDelta2(new c(0,-1)).normalized();return new ce(e.plus(s.timesScalar(1e-4)),s)}hasHalfEdge(t){for(let e=0;e<this.halfEdges.length;e++)if(this.halfEdges[e]===t)return!0;return!1}toSubpath(){const t=[];for(let e=0;e<this.halfEdges.length;e++)t.push(this.halfEdges[e].getDirectionalSegment());return new Rt(t,null,!0)}freeToPool(){o1.pool.freeToPool(this)}};H(o1,"pool",new _e(o1));let c1=o1;Lt.register("Boundary",c1);const Et=class Et{constructor(t,e,s,i,L,a,o,h,l,u){this.initialize(t,e,s,i,L,a,o,h,l,u)}initialize(t,e,s,i,L,a,o,h,l,u){return this.a=t,this.b=e,this.atMin=s,this.atMax=i,this.btMin=L,this.btMax=a,this.aMin=o,this.aMax=h,this.bMin=l,this.bMax=u,this}pushSubdivisions(t){const e=this,s=(e.atMax+e.atMin)/2,i=(e.btMax+e.btMin)/2;if(s===this.atMin||s===this.atMax||i===this.btMin||i===this.btMax){t.push(this);return}const L=e.a.positionAt(s),a=e.b.positionAt(i);Et.boxIntersects(e.aMin,L,e.bMin,a)&&t.push(Et.pool.create(e.a,e.b,e.atMin,s,e.btMin,i,e.aMin,L,e.bMin,a)),Et.boxIntersects(L,e.aMax,e.bMin,a)&&t.push(Et.pool.create(e.a,e.b,s,e.atMax,e.btMin,i,L,e.aMax,e.bMin,a)),Et.boxIntersects(e.aMin,L,a,e.bMax)&&t.push(Et.pool.create(e.a,e.b,e.atMin,s,i,e.btMax,e.aMin,L,a,e.bMax)),Et.boxIntersects(L,e.aMax,a,e.bMax)&&t.push(Et.pool.create(e.a,e.b,s,e.atMax,i,e.btMax,L,e.aMax,a,e.bMax)),this.freeToPool()}distance(t){const e=this.atMin-t.atMin,s=this.atMax-t.atMax,i=this.btMin-t.btMin,L=this.btMax-t.btMax;return e*e+s*s+i*i+L*L}clean(){this.a=null,this.b=null,this.aMin=null,this.aMax=null,this.bMin=null,this.bMax=null}static intersect(t,e){if(!t.bounds.intersectsBounds(e.bounds))return[];const s=Et.getIntersectionRanges(t,e),i=[];for(let a=0;a<s.length;a++){const o=s[a];let h=!1;t:for(let l=0;l<i.length;l++){const u=i[l];for(let f=0;f<u.length;f++){const d=u[f];if(o.distance(d)<1e-13){u.push(o),h=!0;break t}}}h||i.push([o])}const L=[];for(let a=0;a<i.length;a++){const o=i[a];let h=0,l=0;for(let d=0;d<o.length;d++)h+=o[d].atMin+o[d].atMax,l+=o[d].btMin+o[d].btMax;h/=2*o.length,l/=2*o.length;const u=t.positionAt(h),f=e.positionAt(l);assert&&assert(u.distance(f)<1e-10),L.push(new Pt(u.average(f),h,l))}for(let a=0;a<s.length;a++)s[a].freeToPool();return Et.cleanPool(),L}static getIntersectionRanges(t,e){const s=t.getInteriorExtremaTs(),i=e.getInteriorExtremaTs(),L=_.zip([0].concat(s),s.concat([1])),a=_.zip([0].concat(i),i.concat([1]));let o=[];for(let h=0;h<L.length;h++)for(let l=0;l<a.length;l++){const u=L[h][0],f=L[h][1],d=a[l][0],M=a[l][1],p=t.positionAt(u),A=t.positionAt(f),x=e.positionAt(d),b=e.positionAt(M);Et.boxIntersects(p,A,x,b)&&o.push(Et.pool.create(t,e,u,f,d,M,p,A,x,b))}for(let h=0;h<50;h++){const l=[];for(let u=o.length-1;u>=0;u--)o[u].pushSubdivisions(l);o=l}return o}static boxIntersects(t,e,s,i){const L=Math.max(Math.min(t.x,e.x),Math.min(s.x,i.x)),a=Math.max(Math.min(t.y,e.y),Math.min(s.y,i.y)),o=Math.min(Math.max(t.x,e.x),Math.max(s.x,i.x)),h=Math.min(Math.max(t.y,e.y),Math.max(s.y,i.y));return o-L>=0&&h-a>=0}static cleanPool(){Et.pool.forEach(t=>t.clean())}freeToPool(){Et.pool.freeToPool(this)}};Et.pool=new _e(Et);let He=Et;Lt.register("BoundsIntersection",He);let q0=1;const js=[];class qs{constructor(t=1e-6){this.rootNode=ds.pool.create(this,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY),this.rootNode.isBlack=!0,this.epsilon=t,this.items=new Set}query(t,e){const s=q0++;return this.rootNode?this.rootNode.query(t,this.getMinX(t,this.epsilon),this.getMaxX(t,this.epsilon),s,e):!1}addItem(t){const e=this.getMinX(t,this.epsilon),s=this.getMaxX(t,this.epsilon);this.rootNode.split(e,this),this.rootNode.split(s,this),this.rootNode.addItem(t,e,s),this.items.add(t)}removeItem(t){this.rootNode.removeItem(t,this.getMinX(t,this.epsilon),this.getMaxX(t,this.epsilon)),this.items.delete(t)}audit(){this.rootNode.audit(this.epsilon,this.items,[])}toString(){let t=0,e="";return function s(i){e+=`${_.repeat("  ",t)}${i.toString()}
`,t++,i.hasChildren()&&(s(i.left),s(i.right)),t--}(this.rootNode),e}}const ve=class ve{constructor(t,e,s){this.items=[],this.initialize(t,e,s)}initialize(t,e,s){return this.min=e,this.max=s,this.splitValue=null,this.left=null,this.right=null,this.parent=null,this.tree=t,this.isBlack=!1,St(this.items),this}contains(t){return t>=this.min&&t<=this.max}hasChildren(){return this.splitValue!==null}query(t,e,s,i,L){var o,h;let a=!1;if(this.min<=s&&this.max>=e){for(let l=0;l<this.items.length;l++){const u=this.items[l];if((!((o=u.internalData)!=null&&o.segmentId)||((h=u.internalData)==null?void 0:h.segmentId)<i)&&(u.internalData.segmentId=i,a=L(u),a))return!0}this.hasChildren()&&(a||(a=this.left.query(t,e,s,i,L)),a||(a=this.right.query(t,e,s,i,L)))}return a}swapChild(t,e){assert&&assert(this.left===t||this.right===t),this.left===t?this.left=e:this.right=e}hasChild(t){return this.left===t||this.right===t}otherChild(t){return assert&&assert(this.hasChild(t)),this.left===t?this.right:this.left}leftRotate(t){if(assert&&assert(this.hasChildren()&&this.right.hasChildren()),this.right.hasChildren()){const e=this.right,s=this.left,i=e.left,L=e.right;e.parent=this.parent,this.parent?this.parent.swapChild(this,e):t.rootNode=e,this.parent=e,i.parent=this,e.left=this,this.left=s,this.right=i,this.max=i.max,this.splitValue=s.max,e.min=this.min,e.splitValue=this.max;const a=St(js);a.push(...this.items),St(this.items);for(let o=s.items.length-1;o>=0;o--){const h=s.items[o],l=i.items.indexOf(h);l>=0&&(s.items.splice(o,1),i.items.splice(l,1),this.items.push(h))}i.items.push(...e.items),L.items.push(...e.items),St(e.items),e.items.push(...a)}}rightRotate(t){assert&&assert(this.hasChildren()&&this.left.hasChildren());const e=this.left,s=this.right,i=e.left,L=e.right;e.parent=this.parent,this.parent?this.parent.swapChild(this,e):t.rootNode=e,this.parent=e,L.parent=this,e.right=this,this.left=L,this.right=s,this.min=L.min,this.splitValue=s.min,e.max=this.max,e.splitValue=this.min;const a=St(js);a.push(...this.items),St(this.items);for(let o=s.items.length-1;o>=0;o--){const h=s.items[o],l=L.items.indexOf(h);l>=0&&(s.items.splice(o,1),L.items.splice(l,1),this.items.push(h))}i.items.push(...e.items),L.items.push(...e.items),St(e.items),e.items.push(...a)}fixRedBlack(t){if(assert&&assert(!this.isBlack),!this.parent)this.isBlack=!0;else{const e=this.parent;if(!e.isBlack){const s=e.parent,i=s.otherChild(e);i.isBlack?e===s.left?this===e.right?(e.leftRotate(t),e.parent.isBlack=!0,e.parent.parent.isBlack=!1,e.parent.parent.rightRotate(t)):(e.isBlack=!0,s.isBlack=!1,s.rightRotate(t)):this===e.left?(e.rightRotate(t),e.parent.isBlack=!0,e.parent.parent.isBlack=!1,e.parent.parent.leftRotate(t)):(e.isBlack=!0,s.isBlack=!1,s.leftRotate(t)):(e.isBlack=!0,i.isBlack=!0,s.isBlack=!1,s.fixRedBlack(t))}}}split(t,e){if(assert&&assert(this.contains(t)),!(t===this.min||t===this.max))if(this.hasChildren())this.splitValue!==t&&(t>this.splitValue?this.right:this.left).split(t,e);else{this.splitValue=t;const s=ve.pool.create(this.tree,this.min,t);s.parent=this,this.left=s;const i=ve.pool.create(this.tree,t,this.max);if(i.parent=this,this.right=i,!this.isBlack&&this.parent){const L=this.parent,a=L.otherChild(this);a.isBlack?(this===L.left?(L.rightRotate(e),s.isBlack=!0):(L.leftRotate(e),i.isBlack=!0),this.fixRedBlack(e)):(this.isBlack=!0,a.isBlack=!0,L.isBlack=!1,L.fixRedBlack(e))}}}addItem(t,e,s){this.min>s||this.max<e||(this.min>=e&&this.max<=s?this.items.push(t):this.hasChildren()&&(this.left.addItem(t,e,s),this.right.addItem(t,e,s)))}removeItem(t,e,s){this.min>s||this.max<e||(this.min>=e&&this.max<=s?(assert&&assert(this.items.includes(t)),he(this.items,t)):this.hasChildren()&&(this.left.removeItem(t,e,s),this.right.removeItem(t,e,s)))}audit(t,e,s=[]){if(assert){for(const i of s)assert(!this.items.includes(i));for(const i of this.items)assert(this.tree.getMinX(i,t)<=this.min),assert(this.tree.getMaxX(i,t)>=this.max);for(const i of s)this.tree.getMinX(i,t)<=this.min&&this.tree.getMaxX(i,t)>=this.max&&assert(e.has(i)||this.items.includes(i));if(assert(this.hasChildren()===(this.left!==null)),assert(this.hasChildren()===(this.right!==null)),assert(this.hasChildren()===(this.splitValue!==null)),assert(this.min<this.max),this.parent&&(assert(this.parent.hasChild(this)),assert(this.isBlack||this.parent.isBlack)),this.hasChildren()){assert(this.left.parent===this),assert(this.right.parent===this),assert(this.min===this.left.min),assert(this.max===this.right.max),assert(this.splitValue===this.left.max),assert(this.splitValue===this.right.min);for(const L of this.left.items)assert(!this.right.items.includes(L),"We shouldn't have two children with the same item");const i=[...s,...this.items];this.left.audit(t,e,i),this.right.audit(t,e,i)}}}toString(){return`[${this.min} ${this.max}] split:${this.splitValue} ${this.isBlack?"black":"red"} ${this.items}`}freeToPool(){ve.pool.freeToPool(this)}};ve.pool=new _e(ve);let ds=ve;Lt.register("SegmentTree",qs);class fs extends qs{getMinX(t,e){return t.segment.bounds.left-e}getMaxX(t,e){return t.segment.bounds.right+e}}Lt.register("EdgeSegmentTree",fs);class Wn extends qs{getMinX(t,e){return t.point.x-e}getMaxX(t,e){return t.point.x+e}}Lt.register("VertexSegmentTree",Wn);let T0=0,J1=0;const F1=1e-5,Ks=.1*F1,$s=.01*F1,E1=1e-6;class Ft{constructor(){this.vertices=[],this.edges=[],this.innerBoundaries=[],this.outerBoundaries=[],this.boundaries=[],this.shapeIds=[],this.loops=[],this.unboundedFace=Ne.pool.create(null),this.faces=[this.unboundedFace]}serialize(){return{type:"Graph",vertices:this.vertices.map(t=>t.serialize()),edges:this.edges.map(t=>t.serialize()),boundaries:this.boundaries.map(t=>t.serialize()),innerBoundaries:this.innerBoundaries.map(t=>t.id),outerBoundaries:this.outerBoundaries.map(t=>t.id),shapeIds:this.shapeIds,loops:this.loops.map(t=>t.serialize()),unboundedFace:this.unboundedFace.id,faces:this.faces.map(t=>t.serialize())}}static deserialize(t){const e=new Ft,s={},i={},L={},a={},o={},h={};return e.vertices=t.vertices.map(l=>{const u=new kt(c.Vector2IO.fromStateObject(l.point));return s[l.id]=u,u.visited=l.visited,u.visitIndex=l.visitIndex,u.lowIndex=l.lowIndex,u}),e.edges=t.edges.map(l=>{const u=new bt(pt.deserialize(l.segment),s[l.startVertex],s[l.endVertex]);i[l.id]=u,u.signedAreaFragment=l.signedAreaFragment;const f=(d,M)=>{L[M.id]=d,d.isReversed=M.isReversed,d.signedAreaFragment=M.signedAreaFragment,d.startVertex=s[M.startVertex.id],d.endVertex=s[M.endVertex.id],d.sortVector=c.Vector2IO.fromStateObject(M.sortVector),d.data=M.data};return f(u.forwardHalf,l.forwardHalf),f(u.reversedHalf,l.reversedHalf),u.visited=l.visited,u.data=l.data,u}),t.vertices.forEach((l,u)=>{const f=e.vertices[u];f.incidentHalfEdges=l.incidentHalfEdges.map(d=>L[d])}),e.boundaries=t.boundaries.map(l=>{const u=c1.pool.create(l.halfEdges.map(f=>L[f]));return a[l.id]=u,u.signedArea=l.signedArea,u.bounds=gt.Bounds2IO.fromStateObject(l.bounds),u}),t.boundaries.forEach((l,u)=>{const f=e.boundaries[u];f.childBoundaries=l.childBoundaries.map(d=>a[d])}),e.innerBoundaries=t.innerBoundaries.map(l=>a[l]),e.outerBoundaries=t.outerBoundaries.map(l=>a[l]),e.shapeIds=t.shapeIds,e.loops=t.loops.map(l=>{const u=new h1(l.shapeId,l.closed);return o[l.id]=u,u.halfEdges=l.halfEdges.map(f=>L[f]),u}),e.faces=t.faces.map((l,u)=>{const f=u===0?e.unboundedFace:new Ne(a[l.boundary]);return h[l.id]=f,f.holes=l.holes.map(d=>a[d]),f.windingMap=l.windingMap,f.filled=l.filled,f}),t.edges.forEach((l,u)=>{const f=e.edges[u];f.forwardHalf.face=l.forwardHalf.face===null?null:h[l.forwardHalf.face],f.reversedHalf.face=l.reversedHalf.face===null?null:h[l.reversedHalf.face]}),e}addShape(t,e,s){for(let i=0;i<e.subpaths.length;i++)this.addSubpath(t,e.subpaths[i],s)}addSubpath(t,e,s){if(assert&&assert(typeof t=="number"),assert&&assert(e instanceof Rt),s=us({ensureClosed:!0},s),this.shapeIds.indexOf(t)<0&&this.shapeIds.push(t),e.segments.length===0)return;const i=e.closed||s.ensureClosed,L=s.ensureClosed?e.getFillSegments():e.segments;let a;const o=[];for(a=0;a<L.length;a++){let l=a-1;l<0&&(l=L.length-1);let u=L[l].end;const f=L[a].start;!i&&a===0&&(u=f),f.equals(u)?o.push(kt.pool.create(f)):(assert&&assert(f.distance(u)<1e-5,"Inaccurate start/end points"),o.push(kt.pool.create(f.average(u))))}i||o.push(kt.pool.create(L[L.length-1].end));const h=h1.pool.create(t,i);for(a=0;a<L.length;a++){let l=a+1;i&&l===L.length&&(l=0);const u=bt.pool.create(L[a],o[a],o[l]);h.halfEdges.push(u.forwardHalf),this.addEdge(u)}this.loops.push(h),this.vertices.push(...o)}computeSimplifiedFaces(){this.eliminateOverlap(),this.eliminateSelfIntersection(),this.eliminateIntersection(),this.collapseVertices(),this.removeBridges(),this.removeLowOrderVertices(),this.orderVertexEdges(),this.extractFaces(),this.computeBoundaryTree(),this.computeWindingMap()}computeFaceInclusion(t){for(let e=0;e<this.faces.length;e++){const s=this.faces[e];s.filled=t(s.windingMap)}}createFilledSubGraph(){const t=new Ft,e={};for(let s=0;s<this.edges.length;s++){const i=this.edges[s];if(i.forwardHalf.face.filled!==i.reversedHalf.face.filled){if(!e[i.startVertex.id]){const o=kt.pool.create(i.startVertex.point);t.vertices.push(o),e[i.startVertex.id]=o}if(!e[i.endVertex.id]){const o=kt.pool.create(i.endVertex.point);t.vertices.push(o),e[i.endVertex.id]=o}const L=e[i.startVertex.id],a=e[i.endVertex.id];t.addEdge(bt.pool.create(i.segment,L,a))}}return t.collapseAdjacentEdges(),t.orderVertexEdges(),t.extractFaces(),t.computeBoundaryTree(),t.fillAlternatingFaces(),t}facesToShape(){const t=[];for(let e=0;e<this.faces.length;e++){const s=this.faces[e];if(s.filled){t.push(s.boundary.toSubpath());for(let i=0;i<s.holes.length;i++)t.push(s.holes[i].toSubpath())}}return new Lt.Shape(t)}dispose(){for(;this.boundaries.length;)this.boundaries.pop().dispose();for(St(this.innerBoundaries),St(this.outerBoundaries);this.loops.length;)this.loops.pop().dispose();for(;this.faces.length;)this.faces.pop().dispose();for(;this.vertices.length;)this.vertices.pop().dispose();for(;this.edges.length;)this.edges.pop().dispose()}addEdge(t){assert&&assert(t instanceof bt),assert&&assert(!_.includes(t.startVertex.incidentHalfEdges,t.reversedHalf),"Should not already be connected"),assert&&assert(!_.includes(t.endVertex.incidentHalfEdges,t.forwardHalf),"Should not already be connected"),this.edges.push(t),t.startVertex.incidentHalfEdges.push(t.reversedHalf),t.endVertex.incidentHalfEdges.push(t.forwardHalf)}removeEdge(t){assert&&assert(t instanceof bt),he(this.edges,t),he(t.startVertex.incidentHalfEdges,t.reversedHalf),he(t.endVertex.incidentHalfEdges,t.forwardHalf)}replaceEdgeInLoops(t,e){const s=[];for(let i=0;i<e.length;i++)s.push(e[e.length-1-i].getReversed());for(let i=0;i<this.loops.length;i++){const L=this.loops[i];for(let a=L.halfEdges.length-1;a>=0;a--){const o=L.halfEdges[a];if(o.edge===t){const h=o===t.forwardHalf?e:s;Array.prototype.splice.apply(L.halfEdges,[a,1].concat(h))}}}}collapseAdjacentEdges(){let t=!0;for(;t;){t=!1;for(let e=0;e<this.vertices.length;e++){const s=this.vertices[e];if(s.incidentHalfEdges.length===2){const i=s.incidentHalfEdges[0].edge,L=s.incidentHalfEdges[1].edge;let a=i.segment,o=L.segment;const h=i.getOtherVertex(s),l=L.getOtherVertex(s);if(assert&&assert(this.loops.length===0),i.startVertex===s&&(a=a.reversed()),L.endVertex===s&&(o=o.reversed()),a instanceof D&&o instanceof D&&a.tangentAt(0).normalized().distance(o.tangentAt(0).normalized())<1e-6){this.removeEdge(i),this.removeEdge(L),i.dispose(),L.dispose(),he(this.vertices,s),s.dispose();const u=new D(h.point,l.point);this.addEdge(new bt(u,h,l)),t=!0;break}}}}}eliminateOverlap(){const e=new self.FlatQueue,s=new fs(1e-4),i=J1++,L=h=>{const l=h.segment.bounds;e.push({start:!0,edge:h},l.minY-1e-4),e.push({start:!1,edge:h},l.maxY+1e-4)},a=h=>{h.internalData.removedId=i};for(let h=0;h<this.edges.length;h++)L(this.edges[h]);const o=[];for(;e.length;){const h=e.pop(),l=h.edge;if(l.internalData.removedId!==i)if(h.start){let u=!1,f,d;if(s.query(l,M=>{const p=l.segment.getOverlaps(M.segment);if(p!==null&&p.length)for(let A=0;A<p.length;A++){const x=p[A];if(Math.abs(x.t1-x.t0)>1e-5&&Math.abs(x.qt1-x.qt0)>1e-5)return d=this.splitOverlap(l,M,x),u=!0,f=M,!0}return!1}),u){s.removeItem(f),a(f),a(l);for(let M=0;M<d.length;M++)L(d[M]);o.push(l),o.push(f)}else s.addItem(l)}else s.removeItem(l)}for(let h=0;h<o.length;h++)o[h].dispose()}splitOverlap(t,e,s){const i=[],L=t.segment,a=e.segment;this.removeEdge(t),this.removeEdge(e);let o=s.t0,h=s.t1,l=s.qt0,u=s.qt1;o<1e-5&&(o=0),h>1-1e-5&&(h=1),l<1e-5&&(l=0),u>1-1e-5&&(u=1);const f=o>0?L.subdivided(o)[0]:null,d=l>0?a.subdivided(l)[0]:null,M=h<1?L.subdivided(h)[1]:null,p=u<1?a.subdivided(u)[1]:null;let A=L;o>0&&(A=A.subdivided(o)[1]),h<1&&(A=A.subdivided(W.linear(o,1,0,1,h))[0]);let x;f&&d?(x=kt.pool.create(A.start),this.vertices.push(x)):f?x=s.a>0?e.startVertex:e.endVertex:x=t.startVertex;let b;M&&p?(b=kt.pool.create(A.end),this.vertices.push(b)):M?b=s.a>0?e.endVertex:e.startVertex:b=t.endVertex;const w=bt.pool.create(A,x,b);i.push(w);let y,E,I,B;f&&(y=bt.pool.create(f,t.startVertex,x),i.push(y)),M&&(E=bt.pool.create(M,b,t.endVertex),i.push(E)),d&&(I=bt.pool.create(d,e.startVertex,s.a>0?x:b),i.push(I)),p&&(B=bt.pool.create(p,s.a>0?b:x,e.endVertex),i.push(B));for(let T=0;T<i.length;T++)this.addEdge(i[T]);const q=(f?[y]:[]).concat([w]).concat(M?[E]:[]),N=(d?[I]:[]).concat([w]).concat(p?[B]:[]),C=[],F=[];for(let T=0;T<q.length;T++)C.push(q[T].forwardHalf);for(let T=0;T<N.length;T++){const U=N[T]!==w||s.a>0;F.push(U?N[T].forwardHalf:N[T].reversedHalf)}return this.replaceEdgeInLoops(t,C),this.replaceEdgeInLoops(e,F),i}eliminateSelfIntersection(){assert&&assert(this.boundaries.length===0,"Only handles simpler level primitive splitting right now");for(let t=this.edges.length-1;t>=0;t--){const e=this.edges[t],s=e.segment;if(s instanceof xt){const i=s.getSelfIntersection();if(i){assert&&assert(i.aT<i.bT);const L=s.subdivisions([i.aT,i.bT]),a=kt.pool.create(i.point);this.vertices.push(a);const o=bt.pool.create(L[0],e.startVertex,a),h=bt.pool.create(L[1],a,a),l=bt.pool.create(L[2],a,e.endVertex);this.removeEdge(e),this.addEdge(o),this.addEdge(h),this.addEdge(l),this.replaceEdgeInLoops(e,[o.forwardHalf,h.forwardHalf,l.forwardHalf]),e.dispose()}}}}eliminateIntersection(){const e=new self.FlatQueue,s=new fs(1e-4),i=J1++,L=h=>{const l=h.segment.bounds;e.push({start:!0,edge:h},l.minY-1e-4),e.push({start:!1,edge:h},l.maxY+1e-4)},a=h=>{h.internalData.removedId=i};for(let h=0;h<this.edges.length;h++)L(this.edges[h]);const o=[];for(;e.length;){const h=e.pop(),l=h.edge;if(l.internalData.removedId!==i)if(h.start){let u=!1,f,d,M;if(s.query(l,p=>{const A=l.segment,x=p.segment;let b=pt.intersect(A,x);if(b=b.filter(w=>{const y=w.point;return Ft.isInternal(y,w.aT,A,Ks,E1)||Ft.isInternal(y,w.bT,x,Ks,E1)}),b.length){const w=b[0],y=this.simpleSplit(l,p,w.aT,w.bT,w.point);if(y)return u=!0,f=p,d=y.addedEdges,M=y.removedEdges,!0}return!1}),u){M.includes(l)?(a(l),o.push(l)):s.addItem(l),M.includes(f)&&(s.removeItem(f),a(f),o.push(f));for(let p=0;p<d.length;p++)L(d[p])}else s.addItem(l)}else s.removeItem(l)}for(let h=0;h<o.length;h++)o[h].dispose()}simpleSplit(t,e,s,i,L){const a=Ft.isInternal(L,s,t.segment,$s,E1),o=Ft.isInternal(L,i,e.segment,$s,E1);let h=null;a?o?(h=kt.pool.create(L),this.vertices.push(h)):h=i<.5?e.startVertex:e.endVertex:h=s<.5?t.startVertex:t.endVertex;let l=!1;const u=[],f=[];return a&&h!==t.startVertex&&h!==t.endVertex&&(u.push(...this.splitEdge(t,s,h)),f.push(t),l=!0),o&&h!==e.startVertex&&h!==e.endVertex&&(u.push(...this.splitEdge(e,i,h)),f.push(e),l=!0),l?{addedEdges:u,removedEdges:f}:null}splitEdge(t,e,s){assert&&assert(this.boundaries.length===0,"Only handles simpler level primitive splitting right now"),assert&&assert(t.startVertex!==s),assert&&assert(t.endVertex!==s);const i=t.segment.subdivided(e);assert&&assert(i.length===2);const L=bt.pool.create(i[0],t.startVertex,s),a=bt.pool.create(i[1],s,t.endVertex);return this.removeEdge(t),this.addEdge(L),this.addEdge(a),this.replaceEdgeInLoops(t,[L.forwardHalf,a.forwardHalf]),[L,a]}collapseVertices(){assert&&assert(_.every(this.edges,h=>_.includes(this.vertices,h.startVertex))),assert&&assert(_.every(this.edges,h=>_.includes(this.vertices,h.endVertex)));const t=10*F1,e=new self.FlatQueue,s=new Wn(t),i=J1++,L=h=>{e.push({start:!0,vertex:h},h.point.y-t),e.push({start:!1,vertex:h},h.point.y+t)},a=h=>{h.internalData.removedId=i};for(let h=0;h<this.vertices.length;h++)L(this.vertices[h]);const o=[];for(;e.length;){const h=e.pop(),l=h.vertex;if(l.internalData.removedId!==i)if(h.start){let u=!1,f,d;if(s.query(l,M=>{const p=l.point.distance(M.point);if(p<F1){const A=kt.pool.create(p===0?l.point:l.point.average(M.point));this.vertices.push(A),he(this.vertices,l),he(this.vertices,M);for(let x=this.edges.length-1;x>=0;x--){const b=this.edges[x],w=b.startVertex===l||b.startVertex===M,y=b.endVertex===l||b.endVertex===M;if(w&&y){if((b.segment.bounds.width>1e-5||b.segment.bounds.height>1e-5)&&(b.segment instanceof xt||b.segment instanceof tt||b.segment instanceof _t)){const E=bt.pool.create(b.segment,A,A);this.addEdge(E),this.replaceEdgeInLoops(b,[E.forwardHalf])}else this.replaceEdgeInLoops(b,[]);this.removeEdge(b),b.dispose()}else w?(b.startVertex=A,A.incidentHalfEdges.push(b.reversedHalf),b.updateReferences()):y&&(b.endVertex=A,A.incidentHalfEdges.push(b.forwardHalf),b.updateReferences())}return d=[A],u=!0,f=M,!0}return!1}),u){s.removeItem(f),a(f),a(l);for(let M=0;M<d.length;M++)L(d[M]);o.push(l),o.push(f)}else s.addItem(l)}else s.removeItem(l)}for(let h=0;h<o.length;h++)o[h].dispose();assert&&assert(_.every(this.edges,h=>_.includes(this.vertices,h.startVertex))),assert&&assert(_.every(this.edges,h=>_.includes(this.vertices,h.endVertex)))}markBridges(t,e){e.visited=!0,e.visitIndex=e.lowIndex=T0++;for(let s=0;s<e.incidentHalfEdges.length;s++){const i=e.incidentHalfEdges[s].edge,L=e.incidentHalfEdges[s].startVertex;L.visited?i.visited||(e.lowIndex=Math.min(e.lowIndex,L.visitIndex)):(i.visited=!0,L.parent=e,this.markBridges(t,L),e.lowIndex=Math.min(e.lowIndex,L.lowIndex),L.lowIndex>e.visitIndex&&t.push(i))}}removeBridges(){const t=[];for(let e=0;e<this.vertices.length;e++){const s=this.vertices[e];s.visited||this.markBridges(t,s)}for(let e=0;e<t.length;e++){const s=t[e];this.removeEdge(s),this.replaceEdgeInLoops(s,[]),s.dispose()}}removeLowOrderVertices(){assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.startVertex))),assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.endVertex)));let t=!0;for(;t;){t=!1;for(let e=this.vertices.length-1;e>=0;e--){const s=this.vertices[e];if(s.incidentHalfEdges.length<2){for(let i=0;i<s.incidentHalfEdges.length;i++){const L=s.incidentHalfEdges[i].edge;this.removeEdge(L),this.replaceEdgeInLoops(L,[]),L.dispose()}this.vertices.splice(e,1),s.dispose(),t=!0;break}}}assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.startVertex))),assert&&assert(_.every(this.edges,e=>_.includes(this.vertices,e.endVertex)))}orderVertexEdges(){for(let t=0;t<this.vertices.length;t++)this.vertices[t].sortEdges()}extractFaces(){const t=[];for(let e=0;e<this.edges.length;e++)t.push(this.edges[e].forwardHalf),t.push(this.edges[e].reversedHalf);for(;t.length;){const e=[];let s=t[0];const i=s;for(;s&&(he(t,s),e.push(s),s=s.getNext(),s!==i););const L=c1.pool.create(e);(L.signedArea>0?this.innerBoundaries:this.outerBoundaries).push(L),this.boundaries.push(L)}for(let e=0;e<this.innerBoundaries.length;e++)this.faces.push(Ne.pool.create(this.innerBoundaries[e]))}computeBoundaryTree(){const t=[],e=new Xn(ie.rotation2(1.5729657));for(let s=0;s<this.outerBoundaries.length;s++){const i=this.outerBoundaries[s],L=i.computeExtremeRay(e);let a=null,o=Number.POSITIVE_INFINITY,h=!1;for(let l=0;l<this.edges.length;l++){const u=this.edges[l],f=u.segment.intersection(L);for(let d=0;d<f.length;d++){const M=f[d];M.distance<o&&(a=u,o=M.distance,h=M.wind)}}if(a===null)t.push(i);else{const u=h<0?a.reversedHalf:a.forwardHalf;this.getBoundaryOfHalfEdge(u).childBoundaries.push(i)}}t.forEach(this.unboundedFace.recursivelyAddHoles.bind(this.unboundedFace));for(let s=0;s<this.faces.length;s++){const i=this.faces[s];i.boundary!==null&&i.boundary.childBoundaries.forEach(i.recursivelyAddHoles.bind(i))}}computeWindingMap(){const t=this.edges.slice(),e={};for(let s=0;s<this.shapeIds.length;s++)e[this.shapeIds[s]]=0;for(this.unboundedFace.windingMap=e;t.length;)for(let s=t.length-1;s>=0;s--){const i=t[s],L=i.forwardHalf,a=i.reversedHalf,o=L.face,h=a.face;assert&&assert(o!==h);const l=o.windingMap!==null,u=h.windingMap!==null;if(l&&u){if(t.splice(s,1),assert)for(let f=0;f<this.shapeIds.length;f++){const d=this.shapeIds[f];assert(o.windingMap[d]-h.windingMap[d]===this.computeDifferential(i,d))}}else{if(!l&&!u)continue;{const f=l?o:h,d=l?h:o,M={};for(let p=0;p<this.shapeIds.length;p++){const A=this.shapeIds[p],x=this.computeDifferential(i,A);M[A]=f.windingMap[A]+x*(l?-1:1)}d.windingMap=M}}}}computeDifferential(t,e){let s=0;for(let i=0;i<this.loops.length;i++){const L=this.loops[i];if(assert&&assert(L.closed,"This is only defined to work for closed loops"),L.shapeId===e)for(let a=0;a<L.halfEdges.length;a++){const o=L.halfEdges[a];o===t.forwardHalf?s++:o===t.reversedHalf&&s--}}return s}fillAlternatingFaces(){let t=0;for(let e=0;e<this.faces.length;e++)this.faces[e].filled=null,t++;for(this.unboundedFace.filled=!1,t--;t;)for(let e=0;e<this.edges.length;e++){const s=this.edges[e],i=s.forwardHalf.face,L=s.reversedHalf.face,a=i.filled===null,o=L.filled===null;a&&!o?(i.filled=!L.filled,t--):!a&&o&&(L.filled=!i.filled,t--)}}getBoundaryOfHalfEdge(t){for(let e=0;e<this.boundaries.length;e++){const s=this.boundaries[e];if(s.hasHalfEdge(t))return s}throw new Error("Could not find boundary")}static isInternal(t,e,s,i,L){return e>L&&e<1-L&&t.distance(s.start)>i&&t.distance(s.end)>i}static BINARY_NONZERO_UNION(t){return t[0]!==0||t[1]!==0}static BINARY_NONZERO_INTERSECTION(t){return t[0]!==0&&t[1]!==0}static BINARY_NONZERO_DIFFERENCE(t){return t[0]!==0&&t[1]===0}static BINARY_NONZERO_XOR(t){return(t[0]!==0^t[1]!==0)===1}static binaryResult(t,e,s){const i=new Ft;i.addShape(0,t),i.addShape(1,e),i.computeSimplifiedFaces(),i.computeFaceInclusion(s);const L=i.createFilledSubGraph(),a=L.facesToShape();return i.dispose(),L.dispose(),a}static unionNonZero(t){const e=new Ft;for(let L=0;L<t.length;L++)e.addShape(L,t[L]);e.computeSimplifiedFaces(),e.computeFaceInclusion(L=>{for(let a=0;a<t.length;a++)if(L[a]!==0)return!0;return!1});const s=e.createFilledSubGraph(),i=s.facesToShape();return e.dispose(),s.dispose(),i}static intersectionNonZero(t){const e=new Ft;for(let L=0;L<t.length;L++)e.addShape(L,t[L]);e.computeSimplifiedFaces(),e.computeFaceInclusion(L=>{for(let a=0;a<t.length;a++)if(L[a]===0)return!1;return!0});const s=e.createFilledSubGraph(),i=s.facesToShape();return e.dispose(),s.dispose(),i}static xorNonZero(t){const e=new Ft;for(let L=0;L<t.length;L++)e.addShape(L,t[L]);e.computeSimplifiedFaces(),e.computeFaceInclusion(L=>{let a=!1;for(let o=0;o<t.length;o++)L[o]!==0&&(a=!a);return a});const s=e.createFilledSubGraph(),i=s.facesToShape();return e.dispose(),s.dispose(),i}static simplifyNonZero(t){const e=new Ft;e.addShape(0,t),e.computeSimplifiedFaces(),e.computeFaceInclusion(L=>L[0]!==0);const s=e.createFilledSubGraph(),i=s.facesToShape();return e.dispose(),s.dispose(),i}static clipShape(t,e,s){let i,L,a;s=us({includeExterior:!1,includeBoundary:!0,includeInterior:!0},s);const l=Ft.simplifyNonZero(t),u=new Ft;for(u.addShape(0,e,{ensureClosed:!1}),u.addShape(1,l),u.eliminateOverlap(),u.eliminateSelfIntersection(),u.eliminateIntersection(),u.collapseVertices(),i=0;i<u.loops.length;i++)if(a=u.loops[i],a.shapeId===1)for(L=0;L<a.halfEdges.length;L++)a.halfEdges[L].edge.data=!0;const f=[];for(i=0;i<u.loops.length;i++)if(a=u.loops[i],a.shapeId===0){let d=[];for(L=0;L<a.halfEdges.length;L++){const M=a.halfEdges[L];(M.edge.data?s.includeBoundary:l.containsPoint(M.edge.segment.positionAt(.5))?s.includeInterior:s.includeExterior)?d.push(M.getDirectionalSegment()):d.length&&(f.push(new Rt(d,void 0,a.closed)),d=[])}d.length&&f.push(new Rt(d,void 0,a.closed))}return u.dispose(),new Lt.Shape(f)}}Lt.register("Graph",Ft);const Dt=Ft;function P0(n){return n.replace(/\u202a|\u202b|\u202c/g,"")}it.register("stripEmbeddingMarks",P0);function I0(n,t,e,s,i){assert&&assert(Array.isArray(n)&&_.uniq(n).length===n.length,"a is not an array of unique items"),assert&&assert(Array.isArray(t)&&_.uniq(t).length===t.length,"b is not an array of unique items"),e=e||[],s=s||[],i=i||[],assert&&assert(Array.isArray(e)&&e.length===0),assert&&assert(Array.isArray(s)&&s.length===0),assert&&assert(Array.isArray(i)&&i.length===0),Array.prototype.push.apply(e,n),Array.prototype.push.apply(s,t);t:for(let L=0;L<e.length;L++){const a=e[L];for(let o=0;o<s.length;o++){const h=s[o];if(a===h){if(i.push(a),e.splice(L,1),s.splice(o,1),o=0,L===e.length)break t;L-=1}}}return e}it.register("arrayDifference",I0);function C0(n){const t=new Map;return e=>{if(t.has(e))return t.get(e);{const s=n(e);return t.set(e,s),s}}}it.register("memoize",C0);const B0=(n,t)=>{assert&&n&&t.forEach(e=>{assert&&assert(Object.getOwnPropertyDescriptor(n,e)||_.some(ji(n.constructor).map(s=>Object.getOwnPropertyDescriptor(s.prototype,e))),`property not defined: ${e}`)})};it.register("assertHasProperties",B0);function F0(n){return n.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;").replace(/ /g,"&nbsp;")}it.register("escapeHTML",F0);function k0(n,...t){return _.each(t,e=>{if(e)for(const s in e){const i=Object.getOwnPropertyDescriptor(e,s);i&&(typeof i.get=="function"||e[s]!==void 0)&&Object.defineProperty(n,s,i)}}),n}it.register("extendDefined",k0);function R0(n,t,e){assert&&assert(n),assert&&assert(Array.isArray(t)),e&&(assert&&assert(Object.getPrototypeOf(e)===Object.prototype,"Extra prototype on options object is a code smell"),_.each(t,s=>{assert&&assert(!e.hasOwnProperty(s)||e[s]!==void 0,`Undefined not allowed for key: ${s}`),e[s]!==void 0&&(n[s]=e[s])}))}it.register("mutate",R0);class D1{constructor(t,e){this._map=new Map,this._enumeration=t,this._values=t.enumeration.values,this._values.forEach(s=>{assert&&assert(!this._map.has(s),"Enumeration key override problem"),this._map.set(s,e(s))})}get(t){return assert&&assert(this._values.includes(t)),assert&&assert(this._map.has(t)),this._map.get(t)}set(t,e){assert&&assert(this._values.includes(t)),this._map.set(t,e)}map(t){return new D1(this._enumeration,e=>t(this.get(e),e))}forEach(t){this._values.forEach(e=>t(this.get(e),e))}values(){return this._values.map(t=>this.get(t))}}it.register("EnumerationMap",D1);class t1 extends D1{constructor(t,e){super(Wt,s=>s===Wt.HORIZONTAL?t:e)}get horizontal(){return this.get(Wt.HORIZONTAL)}set horizontal(t){this.set(Wt.HORIZONTAL,t)}get vertical(){return this.get(Wt.VERTICAL)}set vertical(t){this.set(Wt.VERTICAL,t)}with(t,e){return new t1(t===Wt.HORIZONTAL?e:this.horizontal,t===Wt.VERTICAL?e:this.vertical)}static create(t){return new t1(t(Wt.HORIZONTAL),t(Wt.VERTICAL))}map(t){return new t1(t(this.horizontal,Wt.HORIZONTAL),t(this.vertical,Wt.VERTICAL))}}it.register("OrientationPair",t1);class N0{constructor(){this.pendingLocks=[],this.loadComplete=!1,this.listeners=[]}reset(){this.loadComplete=!1}addListener(t){this.listeners.push(t)}proceedIfReady(){this.pendingLocks.length===0&&(assert&&assert(!this.loadComplete,"cannot complete load twice"),this.loadComplete=!0,this.listeners.forEach(t=>t()))}createLock(t){return assert&&assert(!this.loadComplete,"Cannot create more locks after load-step has completed"),this.pendingLocks.push(t),()=>{assert&&assert(this.pendingLocks.includes(t),"invalid lock"),he(this.pendingLocks,t),this.proceedIfReady()}}}const Jn=new N0;it.register("asyncLoader",Jn);function z0(n){const t=[];return n(e=>{t.push(e)}),t}it.register("collect",z0);function Zs(n){if(Array.isArray(n))return n.map(Zs);if(typeof n!="object"||n===null)return n;const t={};return Object.keys(n).sort().forEach(e=>{const s=n[e];t[e]=Zs(s)}),t}it.register("copyWithSortedKeys",Zs);function O0(n,t,e){const s=[];function i(L,a){return a.forEach((o,h)=>{s.push(h),L===1?e(o,...s):i(L-1,o),s.pop()})}return i(n,t)}it.register("dimensionForEach",O0);function D0(n,t,e){const s=[];function i(L,a){return a.map((o,h)=>{s.push(h);const l=L===1?e(o,...s):i(L-1,o);return s.pop(),l})}return i(n,t)}it.register("dimensionMap",D0);class H0{constructor(t,e){this.eventModel=t,this.eventCallback=e,this.period=this.eventModel.getPeriodBeforeNextEvent(),this.timeBeforeNextEvent=this.period}step(t){for(;t>=this.timeBeforeNextEvent;)t-=this.timeBeforeNextEvent,this.period=this.eventModel.getPeriodBeforeNextEvent(),this.timeBeforeNextEvent=this.period,this.eventCallback(t);this.timeBeforeNextEvent-=t}getRatio(){return(this.period-this.timeBeforeNextEvent)/this.period}}class V0{constructor(t){this.rate=t,assert&&assert(t>0,"We need to have a strictly positive rate in order to prevent infinite loops.")}getPeriodBeforeNextEvent(){return 1/this.rate}}class Y0{constructor(t,e){this.rate=t,this.pseudoRandomNumberSource=e,assert&&assert(t>0,"We need to have a strictly positive rate in order to prevent infinite loops.")}getPeriodBeforeNextEvent(){const t=this.pseudoRandomNumberSource();return assert&&assert(t>=0&&t<1,`Our uniform random number is outside of its expected range with a value of ${t}`),t*2/this.rate}}class X0{constructor(t,e){this.rate=t,this.pseudoRandomNumberSource=e,assert&&assert(t>0,"We need to have a strictly positive poisson rate in order to prevent infinite loops.")}getPeriodBeforeNextEvent(){const t=this.pseudoRandomNumberSource();return assert&&assert(t>=0&&t<1,`Our uniform random number is outside of its expected range with a value of ${t}`),-Math.log(t)/this.rate}}it.register("PoissonEventModel",X0);it.register("UniformEventModel",Y0);it.register("ConstantEventModel",V0);it.register("EventTimer",H0);const Qn=n=>{assert&&assert(n.trim()===n,"path must be trimmed");const t=_.get(self,n);return t!==void 0?t:null};it.register("getGlobal",Qn);const G0=n=>{assert&&assert(n.split(".").length>1,"path must have multiple parts"),assert&&assert(n.trim()===n,"path must be trimmed");const t=n.split("."),e=t.pop(),s=_.get(self,t);return s?s[e].bind(s):null};it.register("gracefulBind",G0);function U0(n){return n}it.register("identity",U0);function W0(n,t){assert&&assert(Array.isArray(n));const e=[],s=n.length*2-1;for(let i=0;i<s;i++)i%2===0?e.push(n[i/2]):e.push(t((i-1)/2));return e}it.register("interleave",W0);function J0(n){const t=typeof n=="string"?{src:n}:n,e=t.src,s=t.callback,i=t.async===void 0?!0:t.async,L=t.cacheBust===void 0?!1:t.cacheBust;let a=!1;const o=document.createElement("script");o.type="text/javascript",o.async=i,o.onload=o.onreadystatechange=function(){const l=this.readyState;l&&l!=="complete"&&l!=="loaded"||a||(a=!0,s&&s())},o.src=e+(L?`?random=${Math.random().toFixed(10)}`:"");const h=document.getElementsByTagName("script")[0];h.parentNode.insertBefore(o,h)}it.register("loadScript",J0);function Q0(n){phet.log&&phet.log(`${n}: ${JSON.stringify(Qn(n),null,2)}`)}it.register("logGlobal",Q0);class j0{constructor(t,e,s){this.width=t,this.height=e,this.url=s,this.img=new Image;const i=Jn.createLock(this.img);this.img.onload=i,this.img.src=this.url,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height;const L=this.canvas.getContext("2d");this.updateCanvas=()=>{this.img.complete&&(typeof this.img.naturalWidth>"u"||this.img.naturalWidth>0)&&(L.drawImage(this.img,0,0),delete this.updateCanvas)}}}it.register("MipmapElement",j0);function K0(n){const t=[],e=n.length;if(e>1)for(let s=0;s<e-1;s++){const i=n[s];for(let L=s+1;L<e;L++)t.push([i,n[L]])}return t}it.register("pairs",K0);function $0(n,t){assert&&assert(Array.isArray(n));const e=[],s=[],i=n.length;for(let L=0;L<i;L++)t(n[L])?e.push(n[L]):s.push(n[L]);return[e,s]}it.register("partition",$0);const tL={GRAVITATIONAL_CONSTANT:66743e-15,GRAVITY_ON_EARTH:9.81};it.register("PhysicalConstants",tL);function eL(n){return assert&&assert(n!==void 0,"Required field is undefined."),n}it.register("required",eL);const Q1={};function sL(n,t,e){const s=Q1;let i=s,L=s;return n.hasOwnProperty(t)&&(i=n[t]),n.hasOwnProperty(e)&&(L=n[e]),i!==Q1?n[e]=i:delete n[e],L!==Q1?n[t]=L:delete n[t],n}it.register("swapObjectKeys",sL);const rt=self._,S=(n,...t)=>self.assert(n,...t),k=()=>!!self.assert;class nL{constructor(t,e){H(this,"incomingHalfEdges");H(this,"outgoingHalfEdges");H(this,"edges");H(this,"faces");this.logicalCoordinates=t,this.viewCoordinates=e,k()&&S(t),k()&&S(e)}getHalfEdgeTo(t){const e=this.outgoingHalfEdges.find(s=>s.end===t);return k()&&S(e),e}getHalfEdgeFrom(t){const e=this.incomingHalfEdges.find(s=>s.start===t);return k()&&S(e),e}getEdgeTo(t){const e=this.edges.find(s=>s.start===t||s.end===t);return k()&&S(e),e}}class iL{constructor(t,e){H(this,"halfEdges");H(this,"edges");H(this,"vertices");this.logicalCoordinates=t,this.viewCoordinates=e,k()&&S(t),k()&&S(e)}}class LL{constructor(t,e){H(this,"forwardHalf");H(this,"reversedHalf");H(this,"forwardFace");H(this,"reversedFace");H(this,"vertices");H(this,"faces");this.start=t,this.end=e,k()&&S(t),k()&&S(e)}getOtherVertex(t){return k()&&S(t===this.start||t===this.end,"vertex must be one of the two vertices of this edge"),t===this.start?this.end:this.start}getOtherFace(t){return k()&&S(t===this.forwardFace||t===this.reversedFace,"face must be one of the two faces of this edge"),t===this.forwardFace?this.reversedFace:this.forwardFace}}class rL{constructor(t,e,s){H(this,"edge");H(this,"reversed");H(this,"next");H(this,"previous");H(this,"face",null);this.start=t,this.end=e,this.isReversed=s,k()&&S(t),k()&&S(e)}}const k1=n=>{let t=0;for(let e=0;e<n.length;e++){const s=n[e],i=n[(e+1)%n.length];t+=(i.x+s.x)*(i.y-s.y)}return .5*t},aL=n=>Math.abs(k1(n)),jn=n=>{const t=k1(n);if(t===0)return n.reduce((i,L)=>i.plus(L),new c(0,0)).timesScalar(1/n.length);let e=0,s=0;for(let i=0;i<n.length;i++){const L=n[i],a=n[(i+1)%n.length],o=L.x*(2*L.y+a.y)+a.x*(L.y+2*a.y);e+=(L.x-a.x)*o,s+=(a.y-L.y)*o}return new c(e,s).timesScalar(1/(6*t))},M4=(n,t)=>{let e=0;for(let s=0;s<n.length;s++){const i=n[s],L=n[(s+1)%n.length],a=t[s],o=t[(s+1)%n.length];e+=(L.x+i.x)*(o.y-a.y)+(o.x-a.x)*(L.y-i.y)}return .5*e},Kn=(n,t)=>{const e=n.faces.map(a=>aL(a.vertices.map(o=>o.viewCoordinates))),s=t(e),i=n.vertices.map(a=>({logicalCoordinates:a.logicalCoordinates,viewCoordinates:a.viewCoordinates.timesScalar(s)})),L=new Map(i.map((a,o)=>[n.vertices[o],a]));return{vertices:i,faces:n.faces.map(a=>({logicalCoordinates:a.logicalCoordinates,vertices:a.vertices.map(o=>L.get(o))}))}},oL=(n,t)=>Kn(n,e=>Math.sqrt(t/(rt.sum(e)/e.length))),lL=(n,t)=>Kn(n,e=>Math.sqrt(t/Math.min(...e)));class hL{constructor(t,e){this.start=t,this.end=e}isCanonicalHalfEdge(){return this.start.x<this.end.x||this.start.x===this.end.x&&this.start.y<this.end.y}}class cL{constructor(){H(this,"identifiers",[]);H(this,"canonicalIdentifiers",[]);H(this,"map",new Map)}add(t,e){if(k()&&S(t.x!==e.x||t.y!==e.y),this.lookupAttempt(t,e)!==null)return;const s=(i,L)=>{let a;this.map.has(i)?a=this.map.get(i):(a=new Map,this.map.set(i,a));const o=new hL(i,L);a.set(L,o),this.identifiers.push(o),o.isCanonicalHalfEdge()&&this.canonicalIdentifiers.push(o)};s(t,e),s(e,t)}getAdjacentLocations(t){const e=this.map.get(t);return e?Array.from(e.keys()):[]}lookupAttempt(t,e){const s=this.map.get(t);return s?s.get(e)??null:null}lookup(t,e){const s=this.lookupAttempt(t,e);return k()&&S(s),s}lookupCanonical(t,e){const s=this.lookup(t,e);return s.isCanonicalHalfEdge()?s:this.lookup(e,t)}}const Ts=n=>{const t=n.vertices;let e=n.faces;e=e.map(w=>k1(w.vertices.map(y=>y.viewCoordinates))>0?w:{logicalCoordinates:w.logicalCoordinates,vertices:w.vertices.slice().reverse()});const s=new cL;e.forEach(w=>{for(let y=0;y<w.vertices.length;y++){const E=w.vertices[y].logicalCoordinates,I=w.vertices[(y+1)%w.vertices.length].logicalCoordinates;s.add(E,I)}});const i=new Map,L=new Map,a=new Map,o=new Map,h=w=>i.get(w)??null,l=w=>L.get(w)??null,u=(w,y)=>{const E=s.lookup(w,y);return o.get(E)??null},f=t.map(w=>new nL(w.logicalCoordinates,w.viewCoordinates));f.forEach(w=>i.set(w.logicalCoordinates,w));const d=e.map(w=>new iL(w.logicalCoordinates,jn(w.vertices.map(y=>y.viewCoordinates))));d.forEach(w=>L.set(w.logicalCoordinates,w));const M=s.canonicalIdentifiers.map(w=>new LL(h(w.start),h(w.end)));M.forEach(w=>a.set(s.lookupCanonical(w.start.logicalCoordinates,w.end.logicalCoordinates),w));const p=s.identifiers.map(w=>new rL(h(w.start),h(w.end),!w.isCanonicalHalfEdge()));p.forEach(w=>o.set(s.lookup(w.start.logicalCoordinates,w.end.logicalCoordinates),w)),M.forEach(w=>{const y=u(w.start.logicalCoordinates,w.end.logicalCoordinates),E=u(w.end.logicalCoordinates,w.start.logicalCoordinates);k()&&S(y),k()&&S(E),y.edge=w,E.edge=w,y.reversed=E,E.reversed=y,w.forwardHalf=y,w.reversedHalf=E,w.vertices=[w.start,w.end]}),e.forEach(w=>{const y=l(w.logicalCoordinates),E=w.vertices.map(q=>h(q.logicalCoordinates)),I=[],B=[];for(let q=0;q<E.length;q++){const N=w.vertices[q].logicalCoordinates,C=w.vertices[(q+1)%E.length].logicalCoordinates,F=w.vertices[(q+2)%E.length].logicalCoordinates,T=u(N,C);T.face=y;const U=u(C,F);T.next=U,U.previous=T,B.push(T),I.push(T.edge)}y.halfEdges=B,y.edges=I,y.vertices=E}),p.forEach(w=>{w.face===void 0&&(w.face=null)}),M.forEach(w=>{w.forwardFace=w.forwardHalf.face,w.reversedFace=w.reversedHalf.face,w.faces=[w.forwardFace,w.reversedFace].filter(y=>y!==null)});const A=new Set(p.filter(w=>w.face===null)),x=[],b=[];for(;A.size;){const w=A.values().next().value;A.delete(w);const y=B=>{k()&&S(B.face===null);const q=B.end.logicalCoordinates,F=s.getAdjacentLocations(q).filter(T=>T!==B.start.logicalCoordinates).map(T=>u(q,T)).filter(T=>T.face===null);return k()&&S(F.length===1),F[0]},E=[w];let I=y(w);for(w.next=I,I.previous=w;I!==w;){E.push(I),A.delete(I);const B=I;I=y(I),B.next=I,I.previous=B}k1(E.map(B=>B.start.viewCoordinates))<0?x.push(E):b.push(E)}return k()&&S(x.length===1),f.forEach(w=>{const y=s.getAdjacentLocations(w.logicalCoordinates),E=u(y[0],w.logicalCoordinates);let I=E;const B=[E];for(;I.reversed.previous!==E;)k()&&S(I.reversed.previous),I=I.reversed.previous,B.push(I);w.incomingHalfEdges=B,w.outgoingHalfEdges=B.map(q=>q.reversed),w.edges=B.map(q=>q.edge),w.faces=B.map(q=>q.face).filter(q=>q!==null)}),{edges:M,vertices:f,faces:d,halfEdges:p,outerBoundary:x[0],innerBoundaries:b}};class ze{constructor(t,e,s,i,L,a,o){H(this,"isAutomorphism");H(this,"isIdentityAutomorphism");H(this,"vertexInverseMap");H(this,"edgeInverseMap");H(this,"sectorInverseMap");H(this,"faceInverseMap");this.sourcePatternBoard=t,this.targetPatternBoard=e,this.vertexMap=s,this.nonExitEdgeMap=i,this.exitEdgeMap=L,this.sectorMap=a,this.faceMap=o,this.isAutomorphism=t===e,this.isAutomorphism&&(this.vertexInverseMap=new Map(Array.from(s).map(([h,l])=>[l,h])),this.sectorInverseMap=new Map(Array.from(a).map(([h,l])=>[l,h])),this.faceInverseMap=new Map(Array.from(o).map(([h,l])=>[l,h])),this.edgeInverseMap=new Map([...Array.from(i).map(([h,l])=>[l,h]),...Array.from(L).map(([h,l])=>(k()&&S(l.length===1),[l[0],h]))])),this.isIdentityAutomorphism=this.computeIsIdentityAutomorphism()}static fromMaps(t,e,s,i,L,a,o){return new ze(t,e,s,i,L,a,o)}getVertexMap(){return this.vertexMap}getNonExitEdgeMap(){return this.nonExitEdgeMap}getExitEdgeMap(){return this.exitEdgeMap}getSectorMap(){return this.sectorMap}getFaceMap(){return this.faceMap}mapVertex(t){const e=this.vertexMap.get(t);return k()&&S(e),e}mapNonExitEdge(t){const e=this.nonExitEdgeMap.get(t);return k()&&S(e),e}mapExitEdges(t){const e=this.exitEdgeMap.get(t);return k()&&S(e),e}mapSector(t){const e=this.sectorMap.get(t);return k()&&S(e),e}mapFace(t){const e=this.faceMap.get(t);return k()&&S(e),e}inverseMapVertex(t){const e=this.vertexInverseMap.get(t);return k()&&S(e),e}inverseMapEdge(t){const e=this.edgeInverseMap.get(t);return k()&&S(e),e}inverseMapSector(t){const e=this.sectorInverseMap.get(t);return k()&&S(e),e}inverseMapFace(t){const e=this.faceInverseMap.get(t);return k()&&S(e),e}equals(t){return this.vertexMap.size===t.vertexMap.size&&this.nonExitEdgeMap.size===t.nonExitEdgeMap.size&&this.exitEdgeMap.size===t.exitEdgeMap.size&&this.sectorMap.size===t.sectorMap.size&&this.faceMap.size===t.faceMap.size&&Array.from(this.vertexMap).every(([e,s])=>t.vertexMap.get(e)===s)&&Array.from(this.nonExitEdgeMap).every(([e,s])=>t.nonExitEdgeMap.get(e)===s)&&Array.from(this.exitEdgeMap).every(([e,s])=>t.exitEdgeMap.get(e)===s)&&Array.from(this.sectorMap).every(([e,s])=>t.sectorMap.get(e)===s)&&Array.from(this.faceMap).every(([e,s])=>t.faceMap.get(e)===s)}toString(){return`Embedding(
  vertexMap: ${[...this.vertexMap].map(t=>`${t[0].index} ${t[0].isExit?"->":"=>"} ${t[1].index}`).join(", ")}
  nonExitEdgeMap: ${[...this.nonExitEdgeMap].map(t=>`${t[0].index} => ${t[1].index}`).join(", ")}
  exitEdgeMap: ${[...this.exitEdgeMap].map(t=>`${t[0].index} => [${t[1].map(e=>e.index).join(", ")}]`).join(", ")}
  sectorMap: ${[...this.sectorMap].map(t=>`${t[0].index} => ${t[1].index}`).join(", ")}
  faceMap: ${[...this.faceMap].map(t=>`${t[0].index} ${t[0].isExit?"->":"=>"} ${t[1].index}`).join(", ")}
)`}computeIsIdentityAutomorphism(){if(this.sourcePatternBoard!==this.targetPatternBoard)return!1;for(const t of this.vertexMap.keys())if(this.vertexMap.get(t)!==t)return!1;for(const t of this.nonExitEdgeMap.keys())if(this.nonExitEdgeMap.get(t)!==t)return!1;for(const t of this.exitEdgeMap.keys())if(this.exitEdgeMap.get(t).length!==1||this.exitEdgeMap.get(t)[0]!==t)return!1;for(const t of this.sectorMap.keys())if(this.sectorMap.get(t)!==t)return!1;for(const t of this.faceMap.keys())if(this.faceMap.get(t)!==t)return!1;return!0}serialize(){return{vertexMapping:this.sourcePatternBoard.vertices.map(t=>(k()&&S(this.vertexMap.has(t)),this.vertexMap.get(t).index)),edgeMapping:this.sourcePatternBoard.edges.map(t=>t.isExit?(k()&&S(this.exitEdgeMap.has(t)),this.exitEdgeMap.get(t).map(e=>e.index)):(k()&&S(this.nonExitEdgeMap.has(t)),this.nonExitEdgeMap.get(t).index)),sectorMapping:this.sourcePatternBoard.sectors.map(t=>(k()&&S(this.sectorMap.has(t)),this.sectorMap.get(t).index)),faceMapping:this.sourcePatternBoard.faces.map(t=>(k()&&S(this.faceMap.has(t)),this.faceMap.get(t).index))}}static deserialize(t,e,s){return new ze(t,e,new Map(t.vertices.map(i=>[i,e.vertices[s.vertexMapping[i.index]]])),new Map(t.edges.filter(i=>!i.isExit).map(i=>[i,e.edges[s.edgeMapping[i.index]]])),new Map(t.edges.filter(i=>i.isExit).map(i=>[i,s.edgeMapping[i.index].map(L=>e.edges[L])])),new Map(t.sectors.map(i=>[i,e.sectors[s.sectorMapping[i.index]]])),new Map(t.faces.map(i=>[i,e.faces[s.faceMapping[i.index]]])))}}const uL=(n,t,e=!1)=>{if(n.faces.filter(L=>!L.isExit).length>t.faces.filter(L=>!L.isExit).length||n.sectors.length>t.sectors.length||n.edges.filter(L=>!L.isExit).length>t.edges.filter(L=>!L.isExit).length||n.vertices.length>t.vertices.length)return[];const s=[],i=n.faces.filter(L=>!L.isExit);if(i.length){const L=i[0],a=[L],o=[],h=[],l=new Set(i.slice(1)),u=new Set(L.edges),f=new Set(L.vertices);for(;l.size;){const M=rt.maxBy([...l],p=>{let A=0;for(const x of p.edges)u.has(x)&&(A+=5);for(const x of p.vertices)f.has(x)&&(A+=1);return A});k()&&S(M),a.push(M),o.push(rt.findIndex(M.edges,p=>u.has(p))),h.push(rt.findIndex(M.vertices,p=>f.has(p))),l.delete(M);for(const p of M.edges)u.add(p);for(const p of M.vertices)f.add(p)}const d=(M,p,A)=>{if(M.edges.length!==p.edges.length)return!1;for(let x=0;x<M.edges.length;x++){const b=M.edges[x],w=p.edges[A.mapEdgeIndex(x)];k()&&S(b.faces.includes(M)),k()&&S(w.faces.includes(p));const y=b.faces[0]===M?b.faces[1]:b.faces[0];if(!y.isExit){const E=w.faces[0]===p?w.faces[1]:w.faces[0];if(E.isExit||y.edges.length!==E.edges.length)return!1}}return!0};for(const M of t.faces)if(!M.isExit&&M.edges.length===L.edges.length)for(const p of Oe.allForOrder(M.edges.length)){if(!d(L,M,p))continue;const A=new Map,x=new Map,b=new Map,w=new Map,y=new Map;A.set(L,p),x.set(L,M),b.set(M,L);for(let I=0;I<L.vertices.length;I++){const B=L.vertices[I],q=M.vertices[p.mapVertexIndex(I)];w.set(B,q),y.set(q,B)}const E=(I,B,q,N,C,F)=>{if(k()&&S(C.size===F.size),I===a.length){k()&&S(C.size===n.vertices.length);const T=new Map,U=new Set;for(const[V,K]of q){const G=B.get(V);for(let st=0;st<V.edges.length;st++){const $=V.edges[st],J=K.edges[G.mapEdgeIndex(st)];k()&&T.has($)&&S(T.get($)===J),T.set($,J),U.add(J)}}k()&&S(T.size===n.edges.filter(V=>!V.isExit).length);const mt=new Map;for(const V of n.edges.filter(K=>K.isExit)){const K=V.exitVertex;k()&&S(K);const G=C.get(K);k()&&S(G),mt.set(V,G.edges.filter(st=>!U.has(st)))}for(const V of n.faces.filter(K=>K.isExit)){const K=V.edges[0];k()&&S(K&&V.edges.length===1);const G=T.get(K),st=K.faces[0]===V?K.faces[1]:K.faces[0],$=q.get(st),J=G.faces[0]===$?G.faces[1]:G.faces[0];k()&&S(J),q.set(V,J)}const Y=new Map;for(const V of n.sectors){const K=V.face,G=q.get(K);k()&&S(G);const st=V.edges[0],$=V.edges[1],J=T.get(st),Q=T.get($);k()&&S(J&&Q);const ht=G.sectors.find(X=>X.edges.includes(J)&&X.edges.includes(Q));k()&&S(ht),Y.set(V,ht)}if(s.push(ze.fromMaps(n,t,C,T,mt,Y,q)),e)return}else{const T=a[I],U=o[I-1],mt=h[I-1];if(U>=0){const Y=T.edges[U],V=Y.vertices[0],K=Y.vertices[1],G=C.get(V),st=C.get(K),$=Y.faces[0]===T?Y.faces[1]:Y.faces[0],J=q.get($);k()&&S(J);const Q=J.edges.find(Gt=>Gt.vertices.includes(G)&&Gt.vertices.includes(st));k()&&S(Q);const ht=Q.faces[0]===J?Q.faces[1]:Q.faces[0];if(ht.isExit||N.has(ht))return;const X=T.vertices.indexOf(V),ct=T.vertices.indexOf(K),lt=ht.vertices.indexOf(G),dt=ht.vertices.indexOf(st),vt=(X+1)%T.vertices.length===ct,At=(lt+1)%ht.vertices.length===dt,wt=vt===At?1:-1,qt=(lt-X*wt+T.vertices.length)%T.vertices.length,O=new Oe(T.vertices.length,qt,wt);if(k()&&S(O.mapVertexIndex(X)===lt),k()&&S(O.mapVertexIndex(ct)===dt),!d(T,ht,O)||(q.set(T,ht),N.set(ht,T),q.size!==N.size))return;for(let Gt=0;Gt<T.vertices.length;Gt++){const Nt=T.vertices[Gt],Ct=ht.vertices[O.mapVertexIndex(Gt)];if(C.has(Nt)){if(C.get(Nt)!==Ct)return}else C.set(Nt,Ct);if(F.has(Ct)){if(F.get(Ct)!==Nt)return}else F.set(Ct,Nt);k()&&S(C.size===F.size)}if(B.set(T,O),E(I+1,B,q,N,C,F),e&&s.length)return}else{k()&&S(mt>=0,"If this is not satisfied, we have disconnected components OR orderedFaces order is bad");const Y=T.vertices[mt],V=C.get(Y),K=V.faces.filter(G=>!G.isExit&&!N.has(G));for(const G of K){const st=T.vertices.indexOf(Y),$=G.vertices.indexOf(V);k()&&S(st>=0),k()&&S($>=0);for(const J of[1,-1]){const Q=($-st*J+T.vertices.length)%T.vertices.length,ht=new Oe(T.vertices.length,Q,J);if(!d(T,G,ht))continue;let X=!0;const ct=new Map(C),lt=new Map(F);for(let wt=0;wt<T.vertices.length;wt++){const qt=T.vertices[wt],O=G.vertices[ht.mapVertexIndex(wt)];if(ct.has(qt)){if(ct.get(qt)!==O){X=!1;break}}else ct.set(qt,O);if(lt.has(O)){if(lt.get(O)!==qt){X=!1;break}}else lt.set(O,qt);k()&&S(ct.size===lt.size)}if(!X)continue;const dt=new Map(q),vt=new Map(N);if(dt.set(T,G),vt.set(G,T),dt.size!==vt.size)continue;const At=new Map(B);if(At.set(T,ht),E(I+1,At,dt,vt,ct,lt),e&&s.length)return}}}}};if(E(1,A,x,b,w,y),e&&s.length)return s}}else if(n.vertices.length===1){const L=n.vertices[0];k()&&S(L.edges.length===n.edges.length);const a=L.edges.filter(u=>!u.isExit),o=L.edges.filter(u=>!u.isExit).length,h=L.isExit,l=rt.range(0,o).map(u=>{const f=a[u],d=a.slice(0,u+1);return L.sectors.filter(M=>M.edges.includes(f)&&M.edges.every(p=>d.includes(p)))});if(k()&&S(l.flat().length===L.sectors.length),k()&&!L.isExit){S(L.sectors.length===o);for(let u=0;u<o;u++){const f=L.edges[u],d=L.edges[(u+1)%o],M=L.sectors[u],p=L.faces[u];S(M.edges.includes(f)),S(M.edges.includes(d)),S(M.face===p)}}for(const u of t.vertices){if(h){if(u.edges.length<o||u.sectors.length<L.sectors.length)continue}else{if(u.isExit||u.edges.length!==o)continue;k()&&S(u.sectors.length===o)}const f=new Map([[L,u]]),d=(M,p,A,x)=>{if(M===o){k()&&S(p.size===a.length),k()&&S(A.size===n.sectors.length);const b=h?new Map([[L.exitEdge,u.edges.filter(y=>!x.has(y))]]):new Map,w=new Map([...A.keys()].map(y=>[y.face,A.get(y).face]));if(L.sectors.length===0)for(const[y,E]of p){const I=y.faces[0],B=y.faces[1];k()&&S(I.isExit&&B.isExit),w.set(I,E.faces[0]),w.set(B,E.faces[1])}else if(h){for(const y of n.faces.filter(E=>E.isExit))if(y.edges.length===1){const E=y.edges[0];k()&&S(E&&y.edges.length===1);const I=p.get(E);k()&&S(I);const B=E.faces[0]===y?E.faces[1]:E.faces[0],q=w.get(B);k()&&S(q);const N=I.faces[0]===q?I.faces[1]:I.faces[0];k()&&S(N),w.set(y,N)}}else for(const y of n.sectors){const E=y.face,B=A.get(y).face;w.set(E,B)}if(s.push(ze.fromMaps(n,t,f,p,b,A,w)),e)return}else{const b=a[M],w=l[M];for(const y of u.edges){if(y.isExit||x.has(y))continue;const E=[];let I=!0;for(const B of w){const q=B.edges[0],N=B.edges[1],C=q===b?y:p.get(q),F=N===b?y:p.get(N);k()&&S(C&&F);const T=u.sectors.find(U=>U.edges.includes(C)&&U.edges.includes(F)&&(o>2||!E.includes(U)))??null;if(T)E.push(T);else{I=!1;break}}if(I){const B=new Map(p);B.set(b,y);const q=new Map(A);for(let C=0;C<w.length;C++)q.set(w[C],E[C]);const N=new Set(x);N.add(y),d(M+1,B,q,N)}}}};d(0,new Map,new Map,new Set)}}else if(n.vertices.length===0&&n.edges.length===1){const L=n.edges[0];for(const a of t.edges.filter(o=>!o.isExit))if(s.push(ze.fromMaps(n,t,new Map,new Map([[L,a]]),new Map,new Map,new Map([[L.faces[0],a.faces[0]],[L.faces[1],a.faces[1]]]))),e)return s}else throw new Error("pattern search not implemented generally yet");return k()&&n===t&&S(s.filter(L=>L.isIdentityAutomorphism).length===1),s};class Oe{constructor(t,e,s){this.edgeCount=t,this.offset=e,this.direction=s,k()&&S(s===1||s===-1)}mapVertexIndex(t){return(this.offset+t*this.direction+this.edgeCount)%this.edgeCount}mapEdgeIndex(t){return this.direction===1?(this.offset+t)%this.edgeCount:(this.offset-t-1+2*this.edgeCount)%this.edgeCount}toString(){return`FaceMapping( edgeCount=${this.edgeCount}, offset=${this.offset}, direction=${this.direction} )`}toDetailedString(t,e){return`FaceMapping( vertices: ${rt.range(0,this.edgeCount).map(s=>`${t.vertices[s].index} => ${e.vertices[this.mapVertexIndex(s)].index}`).join(", ")}, edges: ${rt.range(0,this.edgeCount).map(s=>{const i=t.edges[s],L=e.edges[this.mapEdgeIndex(s)];return`#${i.index} (${i.vertices.map(a=>a.index).join(",")}) => #${L.index} (${L.vertices.map(a=>a.index).join(",")})`}).join(", ")} )`}static allForOrder(t){return[...rt.range(0,t).map(e=>new Oe(t,e,1)),...rt.range(0,t).map(e=>new Oe(t,e,-1))]}}const tn=new WeakMap,en=(n,t)=>{k()&&S(n),k()&&S(t);let e=tn.get(n)??null;e||(e=new WeakMap,tn.set(n,e));let s=e.get(t)??null;return s||(s=uL(n,t),e.set(t,s)),s},ML=(n,t)=>{if(n.numNonExitVertices!==t.numNonExitVertices||n.numExitVertices!==t.numExitVertices||n.type!==t.type)return!1;if(n.type==="faces"&&t.type==="faces"){if(n.vertexLists.length!==t.vertexLists.length)return!1;for(let e=0;e<n.vertexLists.length;e++){if(n.vertexLists[e].length!==t.vertexLists[e].length)return!1;for(let s=0;s<n.vertexLists[e].length;s++)if(n.vertexLists[e][s]!==t.vertexLists[e][s])return!1}}if(n.type==="non-exit-vertex"&&t.type==="non-exit-vertex"&&n.edgeCount!==t.edgeCount)return!1;if(n.type==="exit-vertex"&&t.type==="exit-vertex"){if(n.edgeCount!==t.edgeCount||n.spans.length!==t.spans.length)return!1;for(let e=0;e<n.spans.length;e++)if(n.spans[e]!==t.spans[e])return!1}return!0},$n=n=>{const t=[];t.push(n.numNonExitVertices),t.push(n.numExitVertices),t.push(n.type),n.type==="faces"?t.push(n.vertexLists):(n.type==="non-exit-vertex"||n.type==="exit-vertex")&&(t.push(n.edgeCount),n.type==="exit-vertex"&&t.push(n.spans));const e=JSON.stringify(t);return k()&&S(ML(Ps(e),n)),e},Ps=n=>{const t=JSON.parse(n),e=t.shift(),s=t.shift(),i=t.shift();return i==="faces"?{numNonExitVertices:e,numExitVertices:s,type:i,vertexLists:t.shift()}:i==="non-exit-vertex"?{numNonExitVertices:e,numExitVertices:s,type:i,edgeCount:t.shift()}:i==="exit-vertex"?{numNonExitVertices:e,numExitVertices:s,type:i,edgeCount:t.shift(),spans:t.shift()}:{numNonExitVertices:e,numExitVertices:s,type:i}};class sn{constructor(t,e){H(this,"exitEdge",null);H(this,"edges",[]);H(this,"sectors",[]);H(this,"faces",[]);this.index=t,this.isExit=e}}class Be{constructor(t,e,s=null){H(this,"vertices");H(this,"sectors",[]);H(this,"faces",[]);this.index=t,this.isExit=e,this.exitVertex=s,this.vertices=s?[s]:[]}}class j1{constructor(t,e,s){H(this,"face");this.index=t,this.vertex=e,this.edges=s}}class Jt{constructor(t,e,s,i,L){this.index=t,this.isExit=e,this.vertices=s,this.edges=i,this.sectors=L}}class Is{constructor(t,e){H(this,"name");H(this,"vertices");H(this,"edges");H(this,"sectors");H(this,"faces");this.descriptor=t;const s=[...rt.range(0,t.numNonExitVertices).map(o=>new sn(o,!1)),...rt.range(0,t.numExitVertices).map(o=>new sn(o+t.numNonExitVertices,!0))];let i=[],L=[],a=[];if(t.type==="faces"){for(const o of t.vertexLists){const h=o.map(d=>s[d]),l=h.map((d,M)=>{const p=h[(M+1)%h.length],A=d.edges.find(x=>x.vertices.includes(p));if(A)return A;{const x=new Be(i.length,!1),b=d.index<p.index?d:p,w=d.index<p.index?p:d;return x.vertices.push(b),x.vertices.push(w),i.push(x),d.edges.push(x),p.edges.push(x),x}}),u=l.map((d,M)=>{const p=l[(M+1)%l.length],A=d.vertices.find(b=>p.vertices.includes(b));k()&&S(A);const x=new j1(L.length,A,[d,p]);return L.push(x),d.sectors.push(x),p.sectors.push(x),A.sectors.push(x),x}),f=new Jt(a.length,!1,h,l,u);a.push(f),h.forEach(d=>{d.faces.push(f)}),u.forEach(d=>{d.face=f}),l.forEach(d=>{d.faces.push(f)})}i.forEach(o=>{if(o.faces.length<2){k()&&S(o.faces.length===1);const h=new Jt(a.length,!0,o.vertices,[o],[]);a.push(h),o.faces.push(h),o.vertices.forEach(l=>{l.faces.push(h)})}}),s.forEach(o=>{if(o.isExit){const h=new Be(i.length,!0,o);i.push(h),o.edges.push(h),o.exitEdge=h}})}else if(t.type==="edge"){k()&&S(s.length===0);const o=new Be(0,!1,null);i.push(o);const h=new Jt(0,!0,[],[o],[]);a.push(h);const l=new Jt(1,!0,[],[o],[]);a.push(l),o.faces.push(h),o.faces.push(l)}else if(t.type==="non-exit-vertex"){k()&&S(s.length===1&&!s[0].isExit);const o=s[0];i.push(...rt.range(0,t.edgeCount).map(h=>{const l=new Be(h,!1);return o.edges.push(l),l.vertices.push(o),l})),L.push(...rt.range(0,t.edgeCount).map(h=>{const l=new j1(h,o,[i[h],i[(h+1)%t.edgeCount]]);return l.edges.forEach(u=>{u.sectors.push(l)}),o.sectors.push(l),l})),a.push(...rt.range(0,t.edgeCount).map(h=>{const l=L[h],u=new Jt(h,!0,[o],[i[h],i[(h+1)%t.edgeCount]],[l]);return o.faces.push(u),u.edges.forEach(f=>{f.faces.push(u)}),l.face=u,u}))}else if(t.type==="exit-vertex"){k()&&S(s.length===1&&s[0].isExit);const o=s[0];i.push(...rt.range(0,t.edgeCount).map(l=>{const u=new Be(l,!1);return o.edges.push(u),u.vertices.push(o),u}));const h=new Be(i.length,!0,o);if(i.push(h),o.edges.push(h),o.exitEdge=h,t.spans.length){const l=[];let u=0;t.spans.forEach((f,d)=>{const M=u,p=M+f;u=p+1,l.push(rt.range(M,p+1).map(A=>i[A]))}),k()&&S(u===t.edgeCount),l.forEach(f=>{for(let d=0;d<f.length-1;d++){const M=f[d],p=f[d+1],A=new j1(L.length,o,[M,p]);L.push(A),M.sectors.push(A),p.sectors.push(A),o.sectors.push(A);const x=new Jt(a.length,!0,[o],[M,p],[A]);a.push(x),o.faces.push(x),M.faces.push(x),p.faces.push(x),A.face=x}}),l.forEach(f=>{const d=f[0],M=f[f.length-1],p=new Jt(a.length,!0,[o],[d],[]);a.push(p),d.faces.push(p),o.faces.push(p);const A=new Jt(a.length,!0,[o],[M],[]);a.push(A),M.faces.push(A),o.faces.push(A)})}else{k()&&S(t.edgeCount===2);const l=i[0],u=i[1],f=new Jt(a.length,!0,[o],[l],[]);a.push(f),l.faces.push(f),o.faces.push(f);const d=new Jt(a.length,!0,[o],[l],[]);a.push(d),l.faces.push(d),o.faces.push(d);const M=new Jt(a.length,!0,[o],[u],[]);a.push(M),u.faces.push(M),o.faces.push(M);const p=new Jt(a.length,!0,[o],[u],[]);a.push(p),u.faces.push(p),o.faces.push(p)}}else throw new Error(`Invalid descriptor: ${t}`);this.vertices=s,this.edges=i,this.sectors=L,this.faces=a,e&&(this.name=e)}serialize(){return $n(this.descriptor)}static deserialize(t){return new Is(Ps(t))}}const ti=new WeakMap,dL=n=>{if(k()){const h=l=>{S(l.every(u=>u.index<l.length))};h([...n.vertexMap.keys()]),h([...n.edgeMap.keys()]),h([...n.sectorMap.keys()]),h([...n.faceMap.keys()])}const t=rt.sortBy([...n.vertexMap.keys()],h=>h.index),e=rt.sortBy([...n.edgeMap.keys()],h=>h.index),s=rt.sortBy([...n.sectorMap.keys()],h=>h.index),i=rt.sortBy([...n.faceMap.keys()],h=>h.index),L=h=>[h.x,h.y],a=h=>{for(let l=0;l<t.length;l++)if(n.vertexMap.get(t[l]).equals(h))return l;return L(h)},o=JSON.stringify([t.map(h=>L(n.vertexMap.get(h))),e.map(h=>n.edgeMap.get(h).map(a)),s.map(h=>n.sectorMap.get(h).map(L)),i.map(h=>n.faceMap.get(h).map(L))]);if(k()){const h=ei(o,{vertices:t,edges:e,sectors:s,faces:i,descriptor:{}}),l=(u,f)=>{if(u.length!==f.length)return!1;for(let d=0;d<u.length;d++)if(!u[d].equals(f[d]))return!1;return!0};t.forEach(u=>S(n.vertexMap.get(u).equals(h.vertexMap.get(u)))),e.forEach(u=>S(l(n.edgeMap.get(u),h.edgeMap.get(u)))),s.forEach(u=>S(l(n.sectorMap.get(u),h.sectorMap.get(u)))),i.forEach(u=>S(l(n.faceMap.get(u),h.faceMap.get(u))))}return o},ei=(n,t)=>{const e=JSON.parse(n),s=e[0],i=e[1],L=e[2],a=e[3],o=new Map,h=new Map,l=new Map,u=new Map;s.forEach((d,M)=>{o.set(t.vertices[M],new c(d[0],d[1]))});const f=d=>typeof d=="number"?o.get(t.vertices[d]):new c(d[0],d[1]);return i.forEach((d,M)=>{h.set(t.edges[M],[f(d[0]),f(d[1])])}),L.forEach((d,M)=>{l.set(t.sectors[M],[f(d[0]),f(d[1]),f(d[2])])}),a.forEach((d,M)=>{u.set(t.faces[M],d.map(p=>new c(p[0],p[1])))}),{vertexMap:o,edgeMap:h,sectorMap:l,faceMap:u}},fL=(n,t)=>n.vertices.length!==t.vertices.length||n.edges.length!==t.edges.length||n.faces.length!==t.faces.length||n.sectors.length!==t.sectors.length||n.vertices.filter(e=>e.isExit).length!==t.vertices.filter(e=>e.isExit).length||n.edges.filter(e=>e.isExit).length!==t.edges.filter(e=>e.isExit).length||n.faces.filter(e=>e.isExit).length!==t.faces.filter(e=>e.isExit).length?!1:en(n,t).length>0&&en(t,n).length>0;class Cs{constructor(t){H(this,"edges");H(this,"vertices");H(this,"faces");H(this,"halfEdges");H(this,"outerBoundary");H(this,"innerBoundaries");this.boardDescriptor=t,this.edges=t.edges,this.vertices=t.vertices,this.faces=t.faces,this.halfEdges=t.halfEdges,this.outerBoundary=t.outerBoundary,this.innerBoundaries=t.innerBoundaries}}const nn=(n,t)=>{const e=rt.sortBy(n),s=[];let i=[];for(let a=0;a<e.length;a++){const o=e[a];i.length===0||Math.abs(i[i.length-1]-o)<=t?i.push(o):(s.push(i),i=[o])}i.length>0&&s.push(i);const L=new Map;return s.forEach(a=>{const o=rt.sum(a)/a.length;a.forEach(h=>L.set(h,o))}),L};class ZL extends Cs{constructor(t,e){const s=t.flatMap(f=>f.map(d=>d.x)),i=t.flatMap(f=>f.map(d=>d.y)),L=nn(s,1e-4),a=nn(i,1e-4),o=[],h=new Map,l=f=>{const d=L.get(f.x),M=a.get(f.y);k()&&S(d!==void 0&&M!==void 0);const p=`${d},${M}`;if(!h.has(p)){const A={logicalCoordinates:new c(0,h.size),viewCoordinates:new c(d,M).timesScalar(e)};h.set(p,A),o.push(A)}return h.get(p)},u=t.map((f,d)=>({logicalCoordinates:new c(d,0),vertices:f.map(l)}));super(Ts(lL({vertices:o,faces:u},e))),this.polygons=t,this.scale=e}}const d4={name:"Square Tiling",basisA:new c(1,0),basisB:new c(0,1),polygons:[[new c(0,0),new c(0,1),new c(1,1),new c(1,0)]],translation:new c(1,1)},f4={name:"Hexagonal Tiling",basisA:new c(1,0),basisB:new c(.5,Math.sqrt(3)/2),polygons:[[new c(0,1/Math.sqrt(3)),new c(.5,Math.sqrt(3)/2),new c(1,1/Math.sqrt(3)),new c(1,0),new c(.5,-(1/(2*Math.sqrt(3)))),new c(0,0)]],translation:new c(3/2,Math.sqrt(3)/2)},gL={name:"Triangular",basisA:new c(1,0),basisB:new c(.5,Math.sqrt(3)/2),polygons:[[new c(0,0),new c(1,0),new c(.5,Math.sqrt(3)/2)],[new c(.5,Math.sqrt(3)/2),new c(3/2,Math.sqrt(3)/2),new c(1,0)]],translation:new c(3/2,Math.sqrt(3)/2)},pL={name:"Trihexagonal",basisA:new c(2,0),basisB:new c(1,Math.sqrt(3)),polygons:[[new c(1/2,Math.sqrt(3)/2),new c(1,0),new c(1/2,-(Math.sqrt(3)/2)),new c(-1/2,-(Math.sqrt(3)/2)),new c(-1,0),new c(-1/2,Math.sqrt(3)/2)],[new c(1/2,Math.sqrt(3)/2),new c(1,0),new c(3/2,Math.sqrt(3)/2)],[new c(1/2,-(Math.sqrt(3)/2)),new c(1,0),new c(3/2,-(Math.sqrt(3)/2))]],translation:new c(3,Math.sqrt(3))},mL={name:"Rhombitrihexagonal",basisA:new c(.5*(3+Math.sqrt(3)),.5*(1+Math.sqrt(3))),basisB:new c(.5*(3+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),polygons:[[new c(1/2,Math.sqrt(3)/2),new c(1,0),new c(1/2,-(Math.sqrt(3)/2)),new c(-1/2,-(Math.sqrt(3)/2)),new c(-1,0),new c(-1/2,Math.sqrt(3)/2)],[new c(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new c(1/2,-(Math.sqrt(3)/2)),new c(1,0),new c(1/2*(2+Math.sqrt(3)),-1/2)],[new c(1+Math.sqrt(3)/2,1/2),new c(1,0),new c(1+Math.sqrt(3)/2,-1/2)],[new c(1+Math.sqrt(3)/2,1/2),new c(1,0),new c(1/2,Math.sqrt(3)/2),new c(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3)))],[new c(1/2,1/2*(2+Math.sqrt(3))),new c(1/2,Math.sqrt(3)/2),new c(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3)))],[new c(1/2,1/2*(2+Math.sqrt(3))),new c(1/2,Math.sqrt(3)/2),new c(-1/2,Math.sqrt(3)/2),new c(-1/2,1/2*(2+Math.sqrt(3)))]],translation:new c(3+Math.sqrt(3),.5*(-1-Math.sqrt(3))+.5*(1+Math.sqrt(3)))},Z4={name:"Truncated Square",basisA:new c(2+Math.sqrt(2),0),basisB:new c(.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2)),polygons:[[new c(.5,.5*(1+Math.sqrt(2))),new c(.5*(1+Math.sqrt(2)),.5),new c(.5*(1+Math.sqrt(2)),-.5),new c(.5,.5*(-1-Math.sqrt(2))),new c(-.5,.5*(-1-Math.sqrt(2))),new c(.5*(-1-Math.sqrt(2)),-.5),new c(.5*(-1-Math.sqrt(2)),.5),new c(-.5,.5*(1+Math.sqrt(2)))],[new c(.5*(1+Math.sqrt(2)),.5),new c(.5*(1+Math.sqrt(2)),-.5),new c(3/2+1/Math.sqrt(2),-.5),new c(3/2+1/Math.sqrt(2),.5)]],translation:new c(2+Math.sqrt(2)+.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2))},wL={name:"Snub Square",basisA:new c(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),basisB:new c(1/2*(-1-Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),polygons:[[new c(1/2,0),new c(0,-(Math.sqrt(3)/2)),new c(-(1/2),0)],[new c(1/2,0),new c(0,Math.sqrt(3)/2),new c(-(1/2),0)],[new c(1/2*(1+Math.sqrt(3)),1/2),new c(1/2,0),new c(0,Math.sqrt(3)/2),new c(Math.sqrt(3)/2,1/2*(1+Math.sqrt(3)))],[new c(Math.sqrt(3)/2,1/2*(1+Math.sqrt(3))),new c(0,Math.sqrt(3)/2),new c(0,1/2*(2+Math.sqrt(3)))],[new c(-(Math.sqrt(3)/2),1/2*(1+Math.sqrt(3))),new c(0,Math.sqrt(3)/2),new c(0,1/2*(2+Math.sqrt(3)))],[new c(1/2*(-1-Math.sqrt(3)),1/2),new c(-(1/2),0),new c(0,Math.sqrt(3)/2),new c(-(Math.sqrt(3)/2),1/2*(1+Math.sqrt(3)))]],translation:new c(1/2*(-1-Math.sqrt(3))+1/2*(1+Math.sqrt(3)),-1-Math.sqrt(3))},g4={name:"Truncated Hexagonal",basisA:new c(2+Math.sqrt(3),0),basisB:new c(.5*(2+Math.sqrt(3)),3/2+Math.sqrt(3)),polygons:[[new c(1/2,1/2*(2+Math.sqrt(3))),new c(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new c(1/2*(2+Math.sqrt(3)),1/2),new c(1/2*(2+Math.sqrt(3)),-(1/2)),new c(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new c(1/2,1/2*(-2-Math.sqrt(3))),new c(-(1/2),1/2*(-2-Math.sqrt(3))),new c(1/2*(-1-Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new c(1/2*(-2-Math.sqrt(3)),-(1/2)),new c(1/2*(-2-Math.sqrt(3)),1/2),new c(1/2*(-1-Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new c(-(1/2),1/2*(2+Math.sqrt(3)))],[new c(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new c(1/2*(3+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new c(1/2*(2+Math.sqrt(3)),1/2)],[new c(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new c(1/2*(3+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new c(1/2*(2+Math.sqrt(3)),-(1/2))]],translation:new c(2+Math.sqrt(3)+.5*(2+Math.sqrt(3)),3/2+Math.sqrt(3))},_L={name:"Elongated Triangular",basisA:new c(1,0),basisB:new c(.5,.5*(2+Math.sqrt(3))),polygons:[[new c(-(1/2),-(1/2)),new c(-(1/2),1/2),new c(1/2,1/2),new c(1/2,-(1/2))],[new c(1/2,1/2),new c(0,1/2*(1+Math.sqrt(3))),new c(-(1/2),1/2)],[new c(1/2,-(1/2)),new c(0,1/2*(-1-Math.sqrt(3))),new c(-(1/2),-(1/2))]],translation:new c(3/2,.5*(2+Math.sqrt(3)))},p4={name:"Great Rhombitrihexagonal",basisA:new c(3+Math.sqrt(3),0),basisB:new c(.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3))),polygons:[[new c(1/2,1/2*(2+Math.sqrt(3))),new c(1/2*(1+Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new c(1/2*(2+Math.sqrt(3)),1/2),new c(1/2*(2+Math.sqrt(3)),-(1/2)),new c(1/2*(1+Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new c(1/2,1/2*(-2-Math.sqrt(3))),new c(-(1/2),1/2*(-2-Math.sqrt(3))),new c(1/2*(-1-Math.sqrt(3)),1/2*(-1-Math.sqrt(3))),new c(1/2*(-2-Math.sqrt(3)),-(1/2)),new c(1/2*(-2-Math.sqrt(3)),1/2),new c(1/2*(-1-Math.sqrt(3)),1/2*(1+Math.sqrt(3))),new c(-(1/2),1/2*(2+Math.sqrt(3)))],[new c(1,1+Math.sqrt(3)),new c(.5*(2+Math.sqrt(3)),.5*(1+2*Math.sqrt(3))),new c(.5*(1+Math.sqrt(3)),.5*(1+Math.sqrt(3))),new c(.5,.5*(2+Math.sqrt(3)))],[new c(.5*(1+Math.sqrt(3)),.5*(1+Math.sqrt(3))),new c(.5*(2+Math.sqrt(3)),.5),new c(1+.5*(2+Math.sqrt(3)),.5),new c(.5*(5+Math.sqrt(3)),.5*(1+Math.sqrt(3))),new c(.5*(4+Math.sqrt(3)),.5*(1+2*Math.sqrt(3))),new c(.5*(2+Math.sqrt(3)),.5*(1+2*Math.sqrt(3)))],[new c(1+.5*(2+Math.sqrt(3)),.5),new c(1+.5*(2+Math.sqrt(3)),-(1/2)),new c(.5*(2+Math.sqrt(3)),-(1/2)),new c(.5*(2+Math.sqrt(3)),.5)],[new c(.5*(1+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new c(.5*(2+Math.sqrt(3)),-(1/2)),new c(1+.5*(2+Math.sqrt(3)),-(1/2)),new c(.5*(5+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new c(.5*(4+Math.sqrt(3)),.5*(-1-2*Math.sqrt(3))),new c(.5*(2+Math.sqrt(3)),.5*(-1-2*Math.sqrt(3)))],[new c(.5*(2+Math.sqrt(3)),.5*(-1-2*Math.sqrt(3))),new c(1,-1-Math.sqrt(3)),new c(.5,.5*(-2-Math.sqrt(3))),new c(.5*(1+Math.sqrt(3)),.5*(-1-Math.sqrt(3)))]],translation:new c(3+Math.sqrt(3)+.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3)))},m4={name:"Snub Hexagonal",basisA:new c(5/2,-Math.sqrt(3)/2),basisB:new c(-1/2,3*Math.sqrt(3)/2),polygons:[[new c(1/2,Math.sqrt(3)/2),new c(1,0),new c(1/2,-(Math.sqrt(3)/2)),new c(-(1/2),-(Math.sqrt(3)/2)),new c(-1,0),new c(-(1/2),Math.sqrt(3)/2)],[new c(-1,0),new c(-3/2,-(Math.sqrt(3)/2)),new c(-2,0)],[new c(-(1/2),-(Math.sqrt(3)/2)),new c(-1,0),new c(-3/2,-(Math.sqrt(3)/2))],[new c(1/2,Math.sqrt(3)/2),new c(1,0),new c(3/2,Math.sqrt(3)/2)],[new c(1,0),new c(3/2,Math.sqrt(3)/2),new c(2,0)],[new c(-1,0),new c(-(1/2),Math.sqrt(3)/2),new c(-(3/2),Math.sqrt(3)/2)],[new c(1/2,-(Math.sqrt(3)/2)),new c(-(1/2),-(Math.sqrt(3)/2)),new c(0,-Math.sqrt(3))],[new c(1,0),new c(1/2,-(Math.sqrt(3)/2)),new c(3/2,-(Math.sqrt(3)/2))],[new c(-(1/2),Math.sqrt(3)/2),new c(1/2,Math.sqrt(3)/2),new c(0,Math.sqrt(3))]],translation:new c(2,Math.sqrt(3))},xL={name:"Rhombille",basisA:new c(2,0),basisB:new c(1,Math.sqrt(3)),polygons:[[new c(5,5/Math.sqrt(3)),new c(4,2*Math.sqrt(3)),new c(5,7/Math.sqrt(3)),new c(6,2*Math.sqrt(3))],[new c(5,5/Math.sqrt(3)),new c(6,2*Math.sqrt(3)),new c(6,4/Math.sqrt(3)),new c(5,Math.sqrt(3))],[new c(5,5/Math.sqrt(3)),new c(5,Math.sqrt(3)),new c(4,4/Math.sqrt(3)),new c(4,2*Math.sqrt(3))]],translation:new c(3,Math.sqrt(3))},vL={name:"Deltoidal Trihexagonal",basisA:new c(.5*(3+Math.sqrt(3)),.5*(1+Math.sqrt(3))),basisB:new c(.5*(3+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),polygons:[[new c(1/3*(12+4*Math.sqrt(3)),0),new c(1/4*(15+5*Math.sqrt(3)),.25*(-1-Math.sqrt(3))),new c(3+Math.sqrt(3),0),new c(1/4*(15+5*Math.sqrt(3)),.25*(1+Math.sqrt(3)))],[new c(1/3*(12+4*Math.sqrt(3)),0),new c(1/4*(15+5*Math.sqrt(3)),.25*(1+Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),.5*(1+Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),0)],[new c(1/3*(12+4*Math.sqrt(3)),0),new c(.5*(9+3*Math.sqrt(3)),0),new c(.5*(9+3*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new c(1/4*(15+5*Math.sqrt(3)),.25*(-1-Math.sqrt(3)))],[new c(1/3*(15+5*Math.sqrt(3)),0),new c(.5*(9+3*Math.sqrt(3)),0),new c(.5*(9+3*Math.sqrt(3)),.5*(1+Math.sqrt(3))),new c(1/4*(21+7*Math.sqrt(3)),.25*(1+Math.sqrt(3)))],[new c(1/3*(15+5*Math.sqrt(3)),0),new c(1/4*(21+7*Math.sqrt(3)),.25*(1+Math.sqrt(3))),new c(6+2*Math.sqrt(3),0),new c(1/4*(21+7*Math.sqrt(3)),.25*(-1-Math.sqrt(3)))],[new c(1/3*(15+5*Math.sqrt(3)),0),new c(1/4*(21+7*Math.sqrt(3)),.25*(-1-Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),0)]],translation:new c(3+Math.sqrt(3),.5*(-1-Math.sqrt(3))+.5*(1+Math.sqrt(3)))},w4={name:"Tetrakis Square",basisA:new c(2+Math.sqrt(2),0),basisB:new c(.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2)),polygons:[[new c(4+2*Math.sqrt(2),.5*(2+Math.sqrt(2))),new c(4+2*Math.sqrt(2),2+Math.sqrt(2)),new c(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2)))],[new c(.5*(10+5*Math.sqrt(2)),2+Math.sqrt(2)),new c(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2))),new c(4+2*Math.sqrt(2),2+Math.sqrt(2))],[new c(.5*(10+5*Math.sqrt(2)),2+Math.sqrt(2)),new c(6+3*Math.sqrt(2),2+Math.sqrt(2)),new c(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2)))],[new c(6+3*Math.sqrt(2),2+Math.sqrt(2)),new c(6+3*Math.sqrt(2),.5*(2+Math.sqrt(2))),new c(.5*(10+5*Math.sqrt(2)),.5*(2+Math.sqrt(2)))]],translation:new c(2+Math.sqrt(2)+.5*(2+Math.sqrt(2)),1+1/Math.sqrt(2))},bL={name:"Cairo Pentagonal",basisA:new c(.5*(1+Math.sqrt(3)),.5*(-1-Math.sqrt(3))),basisB:new c(.5*(-1-Math.sqrt(3)),.5*(-1-Math.sqrt(3))),polygons:[[new c(0,1/6*(-6-5*Math.sqrt(3))),new c(.25*(-1-Math.sqrt(3)),.25*(-3-3*Math.sqrt(3))),new c(-1/(2*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new c(1/(2*Math.sqrt(3)),.5*(-1-Math.sqrt(3))),new c(.25*(1+Math.sqrt(3)),.25*(-3-3*Math.sqrt(3)))],[new c(0,1/6*(-6-5*Math.sqrt(3))),new c(.25*(1+Math.sqrt(3)),.25*(-3-3*Math.sqrt(3))),new c(1/6*(3+2*Math.sqrt(3)),-1-Math.sqrt(3)),new c(.25*(1+Math.sqrt(3)),.25*(-5-5*Math.sqrt(3))),new c(0,1/6*(-6-7*Math.sqrt(3)))],[new c(0,1/6*(-6-7*Math.sqrt(3))),new c(.25*(-1-Math.sqrt(3)),.25*(-5-5*Math.sqrt(3))),new c(1/6*(-3-2*Math.sqrt(3)),-1-Math.sqrt(3)),new c(.25*(-1-Math.sqrt(3)),.25*(-3-3*Math.sqrt(3))),new c(0,1/6*(-6-5*Math.sqrt(3)))],[new c(0,1/6*(-6-7*Math.sqrt(3))),new c(.25*(1+Math.sqrt(3)),.25*(-5-5*Math.sqrt(3))),new c(1/(2*Math.sqrt(3)),.5*(-3-3*Math.sqrt(3))),new c(-1/(2*Math.sqrt(3)),.5*(-3-3*Math.sqrt(3))),new c(.25*(-1-Math.sqrt(3)),.25*(-5-5*Math.sqrt(3)))]],translation:new c(.5*(-1-Math.sqrt(3))+.5*(1+Math.sqrt(3)),-1-Math.sqrt(3))},_4={name:"Triakis Triangular",basisA:new c(2+Math.sqrt(3),0),basisB:new c(.5*(2+Math.sqrt(3)),1.5+Math.sqrt(3)),polygons:[[new c(4+2*Math.sqrt(3),1/3*(6+4*Math.sqrt(3))),new c(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3))),new c(.5*(6+3*Math.sqrt(3)),.5*(3+2*Math.sqrt(3)))],[new c(4+2*Math.sqrt(3),1/3*(6+4*Math.sqrt(3))),new c(.5*(6+3*Math.sqrt(3)),.5*(3+2*Math.sqrt(3))),new c(4+2*Math.sqrt(3),3+2*Math.sqrt(3))],[new c(4+2*Math.sqrt(3),1/3*(6+4*Math.sqrt(3))),new c(4+2*Math.sqrt(3),3+2*Math.sqrt(3)),new c(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3)))],[new c(.5*(10+5*Math.sqrt(3)),1/6*(15+10*Math.sqrt(3))),new c(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3))),new c(4+2*Math.sqrt(3),3+2*Math.sqrt(3))],[new c(.5*(10+5*Math.sqrt(3)),1/6*(15+10*Math.sqrt(3))),new c(4+2*Math.sqrt(3),3+2*Math.sqrt(3)),new c(6+3*Math.sqrt(3),3+2*Math.sqrt(3))],[new c(.5*(10+5*Math.sqrt(3)),1/6*(15+10*Math.sqrt(3))),new c(6+3*Math.sqrt(3),3+2*Math.sqrt(3)),new c(.5*(10+5*Math.sqrt(3)),.5*(3+2*Math.sqrt(3)))]],translation:new c(2+Math.sqrt(3)+.5*(2+Math.sqrt(3)),1.5+Math.sqrt(3))},AL={name:"Prismatic Pentagonal",basisA:new c(1,0),basisB:new c(.5,.5*(2+Math.sqrt(3))),polygons:[[new c(2,1/6*(9+5*Math.sqrt(3))),new c(2.5,1/6*(9+4*Math.sqrt(3))),new c(2.5,.5*(2+Math.sqrt(3))),new c(1.5,.5*(2+Math.sqrt(3))),new c(1.5,1/6*(9+4*Math.sqrt(3)))],[new c(2.5,1/6*(9+4*Math.sqrt(3))),new c(2,1/6*(9+5*Math.sqrt(3))),new c(2,2+Math.sqrt(3)),new c(3,2+Math.sqrt(3)),new c(3,1/6*(9+5*Math.sqrt(3)))]],translation:new c(1.5,.5*(2+Math.sqrt(3)))},x4={name:"Bisected Hexagonal",basisA:new c(3+Math.sqrt(3),0),basisB:new c(.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3))),polygons:[[new c(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new c(6+2*Math.sqrt(3),2+2*Math.sqrt(3)),new c(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new c(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new c(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new c(6+2*Math.sqrt(3),1+Math.sqrt(3))],[new c(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new c(6+2*Math.sqrt(3),1+Math.sqrt(3)),new c(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new c(6+2*Math.sqrt(3),.5*(3+3*Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new c(6+2*Math.sqrt(3),2+2*Math.sqrt(3))],[new c(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(6+2*Math.sqrt(3),2+2*Math.sqrt(3)),new c(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new c(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),.5*(5+5*Math.sqrt(3)))],[new c(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(.5*(9+3*Math.sqrt(3)),.5*(5+5*Math.sqrt(3))),new c(6+2*Math.sqrt(3),3+3*Math.sqrt(3))],[new c(.25*(21+7*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(6+2*Math.sqrt(3),3+3*Math.sqrt(3)),new c(6+2*Math.sqrt(3),2+2*Math.sqrt(3))],[new c(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(6+2*Math.sqrt(3),2+2*Math.sqrt(3)),new c(6+2*Math.sqrt(3),3+3*Math.sqrt(3))],[new c(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(6+2*Math.sqrt(3),3+3*Math.sqrt(3)),new c(.5*(15+5*Math.sqrt(3)),.5*(5+5*Math.sqrt(3)))],[new c(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(.5*(15+5*Math.sqrt(3)),.5*(5+5*Math.sqrt(3))),new c(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3)))],[new c(.25*(27+9*Math.sqrt(3)),.25*(9+9*Math.sqrt(3))),new c(.5*(15+5*Math.sqrt(3)),.5*(3+3*Math.sqrt(3))),new c(6+2*Math.sqrt(3),2+2*Math.sqrt(3))]],translation:new c(3+Math.sqrt(3)+.5*(3+Math.sqrt(3)),1.5*(1+Math.sqrt(3)))},EL={name:"Floret Pentagonal",basisA:new c(2.5,-Math.sqrt(3)/2),basisB:new c(-.5,3*Math.sqrt(3)/2),polygons:[[new c(2,Math.sqrt(3)),new c(3,4/Math.sqrt(3)),new c(3.5,7/(2*Math.sqrt(3))),new c(3.5,5/(2*Math.sqrt(3))),new c(3,2/Math.sqrt(3))],[new c(2,Math.sqrt(3)),new c(3,2/Math.sqrt(3)),new c(3,1/Math.sqrt(3)),new c(2.5,1/(2*Math.sqrt(3))),new c(2,1/Math.sqrt(3))],[new c(2,Math.sqrt(3)),new c(2,1/Math.sqrt(3)),new c(1.5,1/(2*Math.sqrt(3))),new c(1,1/Math.sqrt(3)),new c(1,2/Math.sqrt(3))],[new c(2,Math.sqrt(3)),new c(1,2/Math.sqrt(3)),new c(.5,5/(2*Math.sqrt(3))),new c(.5,7/(2*Math.sqrt(3))),new c(1,4/Math.sqrt(3))],[new c(2,Math.sqrt(3)),new c(1,4/Math.sqrt(3)),new c(1,5/Math.sqrt(3)),new c(1.5,11/(2*Math.sqrt(3))),new c(2,5/Math.sqrt(3))],[new c(2,Math.sqrt(3)),new c(2,5/Math.sqrt(3)),new c(2.5,11/(2*Math.sqrt(3))),new c(3,5/Math.sqrt(3)),new c(3,4/Math.sqrt(3))]],translation:new c(2,Math.sqrt(3))},yL={name:"Portugal",basisA:new c(2,2),basisB:new c(-2,2),polygons:[[new c(0,0),new c(1,0),new c(2,1),new c(2,2),new c(1,2),new c(0,1)],[new c(2,2),new c(3,2),new c(4,1),new c(4,0),new c(3,0),new c(2,1)],[new c(1,0),new c(2,1),new c(3,0),new c(2,-1)]],translation:new c(0,4)},v4={name:"Trihex and Hex",basisA:new c(2,0),basisB:new c(1,Math.sqrt(3)),polygons:[[new c(-1,0),new c(-1,1/Math.sqrt(3)),new c(-.5,Math.sqrt(3)/2),new c(0,1/Math.sqrt(3)),new c(.5,Math.sqrt(3)/2),new c(1,1/Math.sqrt(3)),new c(1,0),new c(.5,-1/(2*Math.sqrt(3))),new c(.5,-Math.sqrt(3)/2),new c(0,-2/Math.sqrt(3)),new c(-.5,-Math.sqrt(3)/2),new c(-.5,-1/(2*Math.sqrt(3)))],[new c(-.5,5/(2*Math.sqrt(3))),new c(0,Math.sqrt(3)),new c(.5,5/(2*Math.sqrt(3))),new c(.5,Math.sqrt(3)/2),new c(0,1/Math.sqrt(3)),new c(-.5,Math.sqrt(3)/2)]],translation:new c(3,Math.sqrt(3))},b4={name:"Penrose6",thinShape:new Yt("M726,577 L759,475 L672,538 L640,640 Z M726,702 L640,640 L672,741 L759,804 Z M500,538 L414,475 L447,577 L533,640 Z M500,538 L533,437 L566,538 L533,640 Z M500,741 L533,640 L566,741 L533,842 Z M500,741 L533,640 L447,702 L414,804 Z M619,374 L726,374 L640,437 L533,437 Z M619,374 L726,374 L640,311 L533,311 Z M447,374 L360,311 L327,210 L414,272 Z M447,374 L340,374 L254,311 L360,311 Z M726,374 L759,272 L845,210 L812,311 Z M726,374 L832,374 L919,311 L812,311 Z M1005,374 L919,311 L952,413 L1038,475 Z M1005,374 L1038,272 L1071,374 L1038,475 Z M845,210 L759,147 L726,46 L812,108 Z M812,108 L919,108 L832,46 L726,46 Z M533,108 L639,108 L726,46 L619,46 Z M533,311 L566,210 L533,108 L500,210 Z M414,147 L447,46 L360,108 L327,210 Z M134,475 L167,374 L134,272 L101,374 Z M221,413 L254,311 L167,374 L134,475 Z M101,577 L134,475 L48,538 L15,640 Z M188,640 L221,538 L254,640 L221,741 Z M101,702 L15,640 L48,741 L134,804 Z M134,804 L101,905 L134,1007 L167,905 Z M221,866 L134,804 L167,905 L254,968 Z M414,1132 L327,1069 L360,1171 L447,1233 Z M447,905 L414,1007 L327,1069 L360,968 Z M447,905 L340,905 L254,968 L360,968 Z M414,804 L307,804 L221,741 L327,741 Z M533,968 L500,1069 L533,1171 L566,1069 Z M619,905 L726,905 L640,968 L533,968 Z M619,905 L726,905 L640,842 L533,842 Z M726,905 L812,968 L845,1069 L759,1007 Z M726,905 L832,905 L919,968 L812,968 Z M1038,804 L1071,702 L1157,639 L1124,741 Z M1038,804 L1145,804 L1231,741 L1124,741 Z M1005,905 L1038,804 L1071,905 L1038,1007 Z M1005,905 L1038,804 L952,866 L919,968 Z M1038,475 L1124,538 L1157,639 L1071,577 Z M1038,475 L1145,475 L1231,538 L1124,538 Z M919,640 L952,538 L985,640 L952,741 Z M845,538 L952,538 L865,475 L759,475 Z M845,741 L952,741 L865,804 L759,804 Z M845,1069 L812,1171 L726,1233 L759,1132 Z M812,1171 L919,1171 L832,1233 L726,1233 Z M533,1171 L640,1171 L726,1233 L619,1233 Z M414,475 L307,475 L221,538 L327,538 Z "),thickShape:new Yt("M533,640 L447,577 L360,640 L447,702 Z M533,640 L640,640 L672,741 L566,741 Z M533,640 L640,640 L672,538 L566,538 Z M500,538 L533,437 L447,374 L414,475 Z M500,741 L414,804 L447,905 L533,842 Z M533,437 L640,437 L672,538 L566,538 Z M619,374 L533,311 L447,374 L533,437 Z M726,374 L640,437 L672,538 L759,475 Z M726,374 L759,272 L672,210 L640,311 Z M726,374 L832,374 L865,475 L759,475 Z M812,311 L919,311 L952,210 L845,210 Z M759,272 L672,210 L759,147 L845,210 Z M832,374 L919,311 L952,413 L865,475 Z M1005,374 L1038,272 L952,210 L919,311 Z M1038,272 L1145,272 L1178,374 L1071,374 Z M845,210 L952,210 L919,108 L812,108 Z M672,210 L759,147 L726,46 L639,108 Z M566,210 L672,210 L639,108 L533,108 Z M533,311 L447,374 L414,272 L500,210 Z M533,311 L640,311 L672,210 L566,210 Z M500,210 L414,147 L327,210 L414,272 Z M500,210 L533,108 L447,46 L414,147 Z M360,311 L254,311 L221,210 L327,210 Z M254,311 L167,374 L134,272 L221,210 Z M188,640 L101,702 L134,804 L221,741 Z M188,640 L101,577 L15,640 L101,702 Z M188,640 L221,538 L134,475 L101,577 Z M254,968 L221,1069 L134,1007 L167,905 Z M360,968 L254,968 L221,1069 L327,1069 Z M414,804 L447,702 L360,640 L327,741 Z M414,804 L307,804 L340,905 L447,905 Z M533,842 L640,842 L672,741 L566,741 Z M533,968 L500,1069 L414,1007 L447,905 Z M533,968 L640,968 L672,1069 L566,1069 Z M307,804 L221,866 L254,968 L340,905 Z M307,804 L221,741 L134,804 L221,866 Z M566,1069 L672,1069 L640,1171 L533,1171 Z M619,905 L533,842 L447,905 L533,968 Z M500,1069 L414,1132 L447,1233 L533,1171 Z M500,1069 L414,1007 L327,1069 L414,1132 Z M672,1069 L640,1171 L726,1233 L759,1132 Z M726,905 L640,968 L672,1069 L759,1007 Z M726,905 L759,804 L672,741 L640,842 Z M726,905 L832,905 L865,804 L759,804 Z M759,1007 L845,1069 L759,1132 L672,1069 Z M812,968 L919,968 L952,1069 L845,1069 Z M832,905 L865,804 L952,866 L919,968 Z M952,741 L1038,804 L952,866 L865,804 Z M952,741 L985,640 L1071,702 L1038,804 Z M1038,804 L1145,804 L1178,905 L1071,905 Z M1124,741 L1231,741 L1264,639 L1157,639 Z M1005,905 L919,968 L952,1069 L1038,1007 Z M1124,538 L1231,538 L1264,639 L1157,639 Z M1038,475 L1145,475 L1178,374 L1071,374 Z M985,640 L1071,702 L1157,639 L1071,577 Z M952,538 L1038,475 L1071,577 L985,640 Z M952,538 L865,475 L952,413 L1038,475 Z M812,640 L726,702 L759,804 L845,741 Z M812,640 L726,577 L640,640 L726,702 Z M812,640 L845,538 L759,475 L726,577 Z M812,640 L919,640 L952,741 L845,741 Z M812,640 L919,640 L952,538 L845,538 Z M1038,1007 L1145,1007 L1178,905 L1071,905 Z M845,1069 L952,1069 L919,1171 L812,1171 Z M327,741 L221,741 L254,640 L360,640 Z M327,538 L221,538 L254,640 L360,640 Z M414,475 L327,538 L360,640 L447,577 Z M414,475 L307,475 L340,374 L447,374 Z M307,475 L221,413 L134,475 L221,538 Z M307,475 L340,374 L254,311 L221,413 Z ")},A4={name:"Penrose10",thinShape:new Yt("M691,602 L711,541 L659,579 L640,640 Z M691,677 L640,640 L659,700 L711,738 Z M556,579 L504,541 L524,602 L576,640 Z M556,579 L576,518 L595,579 L576,640 Z M556,700 L576,640 L595,700 L576,761 Z M556,700 L576,640 L524,677 L504,738 Z M627,480 L691,480 L640,518 L576,518 Z M627,480 L691,480 L640,443 L576,443 Z M524,480 L472,443 L452,382 L504,419 Z M524,480 L460,480 L408,443 L472,443 Z M691,480 L711,419 L763,382 L743,443 Z M691,480 L755,480 L807,443 L743,443 Z M859,480 L807,443 L827,503 L879,541 Z M859,480 L879,419 L898,480 L879,541 Z M807,321 L827,260 L879,222 L859,283 Z M879,344 L898,283 L879,222 L859,283 Z M879,419 L943,419 L994,382 L930,382 Z M763,382 L711,344 L691,283 L743,321 Z M743,321 L807,321 L755,283 L691,283 Z M576,321 L640,321 L691,283 L627,283 Z M576,443 L595,382 L576,321 L556,382 Z M504,344 L524,283 L472,321 L452,382 Z M524,283 L460,283 L408,321 L472,321 Z M504,222 L524,161 L575,124 L556,185 Z M504,222 L440,222 L388,185 L452,185 Z M576,246 L595,185 L575,124 L556,185 Z M408,321 L356,283 L336,222 L388,260 Z M336,419 L272,419 L221,382 L285,382 Z M336,344 L356,283 L336,222 L317,283 Z M336,344 L272,344 L221,382 L285,382 Z M253,283 L272,222 L221,260 L201,321 Z M221,382 L157,382 L105,419 L169,419 Z M201,443 L221,382 L169,419 L149,480 Z M65,541 L85,480 L33,518 L14,579 Z M221,579 L169,541 L149,480 L201,518 Z M336,541 L356,480 L336,419 L317,480 Z M336,541 L272,541 L221,579 L285,579 Z M388,503 L408,443 L356,480 L336,541 Z M317,602 L336,541 L285,579 L265,640 Z M368,640 L388,579 L408,640 L388,700 Z M317,677 L265,640 L285,700 L336,738 Z M336,738 L317,799 L336,860 L356,799 Z M336,738 L272,738 L221,700 L285,700 Z M388,776 L336,738 L356,799 L408,836 Z M221,700 L201,761 L149,799 L169,738 Z M201,836 L149,799 L169,860 L221,897 Z M65,738 L14,700 L33,761 L85,799 Z M85,677 L65,738 L85,799 L105,738 Z M201,640 L137,640 L85,677 L149,677 Z M201,640 L137,640 L85,602 L149,602 Z M85,602 L105,541 L85,480 L65,541 Z M253,996 L201,958 L221,1019 L272,1057 Z M221,897 L157,897 L105,860 L169,860 Z M336,860 L272,860 L221,897 L285,897 Z M336,935 L317,996 L336,1057 L356,996 Z M336,935 L272,935 L221,897 L285,897 Z M388,1094 L368,1155 L388,1216 L408,1155 Z M368,1155 L317,1118 L336,1178 L388,1216 Z M576,1155 L556,1216 L504,1254 L524,1193 Z M640,1155 L691,1193 L711,1254 L659,1216 Z M711,1057 L691,1118 L640,1155 L659,1094 Z M711,1057 L775,1057 L827,1094 L763,1094 Z M827,1094 L807,1155 L827,1216 L847,1155 Z M763,1216 L827,1216 L775,1254 L711,1254 Z M898,1118 L879,1178 L827,1216 L847,1155 Z M898,1118 L962,1118 L1014,1155 L950,1155 Z M943,1057 L994,1094 L1014,1155 L962,1118 Z M1014,958 L994,1019 L943,1057 L962,996 Z M1014,958 L1078,958 L1130,996 L1066,996 Z M994,897 L1014,836 L1066,799 L1046,860 Z M994,897 L1058,897 L1110,860 L1046,860 Z M879,935 L859,996 L879,1057 L898,996 Z M930,897 L994,897 L943,935 L879,935 Z M807,958 L859,996 L879,1057 L827,1019 Z M743,958 L807,958 L755,996 L691,996 Z M763,897 L743,958 L691,996 L711,935 Z M691,799 L743,836 L763,897 L711,860 Z M691,799 L755,799 L807,836 L743,836 Z M576,836 L556,897 L576,958 L595,897 Z M576,958 L640,958 L691,996 L627,996 Z M524,996 L460,996 L408,958 L472,958 Z M627,996 L691,996 L640,1033 L576,1033 Z M576,1033 L556,1094 L576,1155 L595,1094 Z M504,935 L452,897 L472,958 L524,996 Z M504,1057 L556,1094 L576,1155 L524,1118 Z M504,1057 L440,1057 L388,1094 L452,1094 Z M408,958 L388,1019 L336,1057 L356,996 Z M524,799 L504,860 L452,897 L472,836 Z M524,799 L460,799 L408,836 L472,836 Z M504,738 L440,738 L388,700 L452,700 Z M504,541 L440,541 L388,579 L452,579 Z M627,799 L691,799 L640,836 L576,836 Z M627,799 L691,799 L640,761 L576,761 Z M879,738 L898,677 L950,640 L930,700 Z M879,738 L943,738 L994,700 L930,700 Z M859,799 L879,738 L898,799 L879,860 Z M859,799 L879,738 L827,776 L807,836 Z M994,700 L1046,738 L1066,799 L1014,761 Z M1014,640 L1078,640 L1130,602 L1066,602 Z M1014,640 L1078,640 L1130,677 L1066,677 Z M994,579 L1014,518 L1066,480 L1046,541 Z M1110,738 L1130,677 L1150,738 L1130,799 Z M1130,799 L1150,738 L1201,700 L1182,761 Z M1110,860 L1162,897 L1182,958 L1130,921 Z M1162,897 L1182,836 L1201,897 L1182,958 Z M1130,480 L1182,518 L1201,579 L1150,541 Z M1110,419 L1130,358 L1182,321 L1162,382 Z M1110,541 L1130,480 L1150,541 L1130,602 Z M994,382 L1046,419 L1066,480 L1014,443 Z M994,382 L1058,382 L1110,419 L1046,419 Z M879,541 L930,579 L950,640 L898,602 Z M879,541 L943,541 L994,579 L930,579 Z M807,640 L827,579 L847,640 L827,700 Z M763,579 L827,579 L775,541 L711,541 Z M763,700 L827,700 L775,738 L711,738 Z M1014,321 L962,283 L943,222 L994,260 Z M1014,321 L1078,321 L1130,283 L1066,283 Z M930,382 L994,382 L943,344 L879,344 Z M1162,382 L1182,321 L1201,382 L1182,443 Z M943,222 L962,161 L1014,124 L994,185 Z M898,161 L847,124 L827,63 L879,101 Z M898,161 L962,161 L1014,124 L950,124 Z M827,185 L847,124 L827,63 L807,124 Z M711,222 L659,185 L639,124 L691,161 Z M711,222 L775,222 L827,185 L763,185 Z M639,124 L659,63 L711,25 L691,86 Z M575,124 L524,86 L504,25 L556,63 Z M763,63 L827,63 L775,25 L711,25 Z M388,185 L408,124 L388,63 L368,124 Z M368,124 L388,63 L336,101 L317,161 Z M879,860 L943,860 L994,897 L930,897 Z M627,283 L691,283 L640,246 L576,246 Z "),thickShape:new Yt("M576,640 L524,602 L472,640 L524,677 Z M576,640 L640,640 L659,700 L595,700 Z M576,640 L640,640 L659,579 L595,579 Z M556,579 L576,518 L524,480 L504,541 Z M556,700 L504,738 L524,799 L576,761 Z M576,518 L640,518 L659,579 L595,579 Z M627,480 L576,443 L524,480 L576,518 Z M691,480 L640,518 L659,579 L711,541 Z M691,480 L711,419 L659,382 L640,443 Z M691,480 L755,480 L775,541 L711,541 Z M743,443 L807,443 L827,382 L763,382 Z M711,419 L659,382 L711,344 L763,382 Z M755,480 L807,443 L827,503 L775,541 Z M859,480 L879,419 L827,382 L807,443 Z M827,382 L879,344 L859,283 L807,321 Z M807,321 L827,260 L775,222 L755,283 Z M879,344 L943,344 L962,283 L898,283 Z M879,419 L827,382 L879,344 L930,382 Z M879,419 L943,419 L962,480 L898,480 Z M763,382 L827,382 L807,321 L743,321 Z M691,283 L711,222 L659,185 L640,246 Z M691,283 L755,283 L775,222 L711,222 Z M659,382 L711,344 L691,283 L640,321 Z M595,382 L659,382 L640,321 L576,321 Z M576,321 L524,283 L576,246 L627,283 Z M576,443 L524,480 L504,419 L556,382 Z M576,443 L640,443 L659,382 L595,382 Z M556,382 L504,344 L452,382 L504,419 Z M556,382 L576,321 L524,283 L504,344 Z M452,382 L388,382 L408,321 L472,321 Z M524,283 L576,246 L556,185 L504,222 Z M524,283 L460,283 L440,222 L504,222 Z M504,222 L524,161 L472,124 L452,185 Z M576,246 L640,246 L659,185 L595,185 Z M460,283 L408,321 L388,260 L440,222 Z M440,222 L388,185 L336,222 L388,260 Z M388,382 L336,344 L285,382 L336,419 Z M388,382 L408,321 L356,283 L336,344 Z M408,443 L356,480 L336,419 L388,382 Z M336,344 L272,344 L253,283 L317,283 Z M317,283 L253,283 L272,222 L336,222 Z M272,344 L221,382 L201,321 L253,283 Z M221,382 L157,382 L137,321 L201,321 Z M201,321 L221,260 L169,222 L149,283 Z M157,382 L105,419 L85,358 L137,321 Z M149,480 L85,480 L105,419 L169,419 Z M169,541 L105,541 L85,480 L149,480 Z M253,480 L201,443 L149,480 L201,518 Z M253,480 L272,419 L221,382 L201,443 Z M272,541 L221,579 L201,518 L253,480 Z M317,480 L253,480 L272,419 L336,419 Z M336,541 L272,541 L253,480 L317,480 Z M265,640 L201,640 L221,700 L285,700 Z M265,640 L201,640 L221,579 L285,579 Z M368,640 L317,677 L336,738 L388,700 Z M368,640 L317,602 L265,640 L317,677 Z M368,640 L388,579 L336,541 L317,602 Z M336,738 L272,738 L253,799 L317,799 Z M317,799 L253,799 L272,860 L336,860 Z M272,738 L253,799 L201,761 L221,700 Z M253,799 L201,836 L221,897 L272,860 Z M253,799 L201,761 L149,799 L201,836 Z M149,799 L85,799 L105,860 L169,860 Z M169,738 L105,738 L85,799 L149,799 Z M85,677 L65,738 L14,700 L33,640 Z M137,640 L85,602 L33,640 L85,677 Z M149,677 L85,677 L105,738 L169,738 Z M201,640 L149,677 L169,738 L221,700 Z M201,640 L221,579 L169,541 L149,602 Z M149,602 L85,602 L105,541 L169,541 Z M85,602 L33,640 L14,579 L65,541 Z M157,897 L137,958 L85,921 L105,860 Z M201,958 L149,996 L169,1057 L221,1019 Z M221,897 L157,897 L137,958 L201,958 Z M272,935 L253,996 L201,958 L221,897 Z M336,935 L272,935 L253,996 L317,996 Z M388,897 L336,935 L356,996 L408,958 Z M388,897 L336,860 L285,897 L336,935 Z M317,996 L253,996 L272,1057 L336,1057 Z M336,1057 L272,1057 L253,1118 L317,1118 Z M388,1094 L368,1155 L317,1118 L336,1057 Z M272,1057 L221,1019 L169,1057 L221,1094 Z M472,1155 L452,1216 L504,1254 L524,1193 Z M472,1155 L408,1155 L388,1216 L452,1216 Z M452,1094 L388,1094 L408,1155 L472,1155 Z M524,1118 L576,1155 L524,1193 L472,1155 Z M576,1155 L640,1155 L659,1216 L595,1216 Z M595,1094 L659,1094 L640,1155 L576,1155 Z M691,1118 L743,1155 L691,1193 L640,1155 Z M711,1057 L691,1118 L743,1155 L763,1094 Z M691,996 L640,1033 L659,1094 L711,1057 Z M691,996 L755,996 L775,1057 L711,1057 Z M763,1094 L827,1094 L807,1155 L743,1155 Z M827,1019 L879,1057 L827,1094 L775,1057 Z M879,1057 L827,1094 L847,1155 L898,1118 Z M879,1057 L943,1057 L962,1118 L898,1118 Z M743,1155 L691,1193 L711,1254 L763,1216 Z M743,1155 L807,1155 L827,1216 L763,1216 Z M994,1019 L1046,1057 L994,1094 L943,1057 Z M1066,996 L1130,996 L1110,1057 L1046,1057 Z M1078,958 L1130,996 L1182,958 L1130,921 Z M1058,897 L1110,860 L1130,921 L1078,958 Z M1014,958 L994,1019 L1046,1057 L1066,996 Z M994,897 L943,935 L962,996 L1014,958 Z M994,897 L1058,897 L1078,958 L1014,958 Z M898,996 L962,996 L943,1057 L879,1057 Z M879,935 L943,935 L962,996 L898,996 Z M827,897 L807,958 L859,996 L879,935 Z M807,958 L755,996 L775,1057 L827,1019 Z M763,897 L827,897 L807,958 L743,958 Z M743,836 L807,836 L827,897 L763,897 Z M711,860 L763,897 L711,935 L659,897 Z M691,799 L640,836 L659,897 L711,860 Z M691,799 L711,738 L659,700 L640,761 Z M691,799 L755,799 L775,738 L711,738 Z M659,897 L640,958 L691,996 L711,935 Z M595,897 L659,897 L640,958 L576,958 Z M576,836 L556,897 L504,860 L524,799 Z M576,836 L640,836 L659,897 L595,897 Z M576,958 L627,996 L576,1033 L524,996 Z M556,897 L504,935 L524,996 L576,958 Z M556,897 L504,860 L452,897 L504,935 Z M524,996 L504,1057 L556,1094 L576,1033 Z M524,996 L460,996 L440,1057 L504,1057 Z M576,1033 L640,1033 L659,1094 L595,1094 Z M504,1057 L452,1094 L472,1155 L524,1118 Z M460,996 L440,1057 L388,1019 L408,958 Z M440,1057 L388,1019 L336,1057 L388,1094 Z M452,897 L388,897 L408,958 L472,958 Z M472,836 L408,836 L388,897 L452,897 Z M408,836 L388,897 L336,860 L356,799 Z M440,738 L388,776 L408,836 L460,799 Z M440,738 L388,700 L336,738 L388,776 Z M504,738 L524,677 L472,640 L452,700 Z M504,738 L440,738 L460,799 L524,799 Z M452,700 L388,700 L408,640 L472,640 Z M452,579 L388,579 L408,640 L472,640 Z M504,541 L452,579 L472,640 L524,602 Z M504,541 L440,541 L460,480 L524,480 Z M440,541 L388,503 L336,541 L388,579 Z M440,541 L460,480 L408,443 L388,503 Z M576,761 L640,761 L659,700 L595,700 Z M627,799 L576,761 L524,799 L576,836 Z M755,799 L775,738 L827,776 L807,836 Z M827,700 L879,738 L827,776 L775,738 Z M827,700 L847,640 L898,677 L879,738 Z M879,738 L943,738 L962,799 L898,799 Z M930,700 L994,700 L1014,640 L950,640 Z M859,799 L807,836 L827,897 L879,860 Z M943,738 L994,700 L1014,761 L962,799 Z M962,799 L1014,836 L1066,799 L1014,761 Z M994,700 L1014,640 L1066,677 L1046,738 Z M1046,738 L1110,738 L1130,799 L1066,799 Z M1046,738 L1110,738 L1130,677 L1066,677 Z M994,579 L1046,541 L1066,602 L1014,640 Z M1078,640 L1130,677 L1182,640 L1130,602 Z M1130,602 L1150,541 L1201,579 L1182,640 Z M1130,677 L1182,640 L1201,700 L1150,738 Z M1182,640 L1246,640 L1265,700 L1201,700 Z M1182,640 L1246,640 L1265,579 L1201,579 Z M1130,799 L1182,836 L1233,799 L1182,761 Z M1182,761 L1201,700 L1253,738 L1233,799 Z M1110,860 L1130,799 L1182,836 L1162,897 Z M1046,860 L1110,860 L1130,799 L1066,799 Z M1182,518 L1233,480 L1253,541 L1201,579 Z M1130,480 L1182,518 L1233,480 L1182,443 Z M1110,419 L1162,382 L1182,443 L1130,480 Z M1046,419 L1110,419 L1130,480 L1066,480 Z M1046,541 L1110,541 L1130,602 L1066,602 Z M1046,541 L1110,541 L1130,480 L1066,480 Z M994,382 L1014,321 L962,283 L943,344 Z M994,382 L1058,382 L1078,321 L1014,321 Z M962,480 L1014,518 L1066,480 L1014,443 Z M943,419 L994,382 L1014,443 L962,480 Z M943,541 L962,480 L1014,518 L994,579 Z M879,541 L943,541 L962,480 L898,480 Z M827,579 L879,541 L898,602 L847,640 Z M827,579 L775,541 L827,503 L879,541 Z M930,579 L994,579 L1014,640 L950,640 Z M847,640 L898,677 L950,640 L898,602 Z M743,640 L691,677 L711,738 L763,700 Z M743,640 L691,602 L640,640 L691,677 Z M743,640 L763,579 L711,541 L691,602 Z M743,640 L807,640 L827,700 L763,700 Z M743,640 L807,640 L827,579 L763,579 Z M1014,321 L1066,283 L1046,222 L994,260 Z M1058,382 L1078,321 L1130,358 L1110,419 Z M1078,321 L1130,358 L1182,321 L1130,283 Z M1066,283 L1130,283 L1110,222 L1046,222 Z M994,260 L943,222 L994,185 L1046,222 Z M879,222 L898,161 L847,124 L827,185 Z M879,222 L943,222 L962,161 L898,161 Z M898,283 L962,283 L943,222 L879,222 Z M827,260 L775,222 L827,185 L879,222 Z M763,185 L827,185 L807,124 L743,124 Z M743,124 L763,63 L711,25 L691,86 Z M743,124 L807,124 L827,63 L763,63 Z M711,222 L763,185 L743,124 L691,161 Z M691,161 L639,124 L691,86 L743,124 Z M595,185 L659,185 L639,124 L575,124 Z M575,124 L639,124 L659,63 L595,63 Z M524,161 L472,124 L524,86 L575,124 Z M472,124 L524,86 L504,25 L452,63 Z M472,124 L408,124 L388,63 L452,63 Z M452,185 L388,185 L408,124 L472,124 Z M388,185 L336,222 L317,161 L368,124 Z M336,222 L272,222 L253,161 L317,161 Z M272,222 L221,185 L169,222 L221,260 Z M943,860 L962,799 L1014,836 L994,897 Z M879,860 L930,897 L879,935 L827,897 Z M879,860 L943,860 L962,799 L898,799 Z M472,443 L408,443 L388,382 L452,382 Z ")},E4={name:"Penrose11",thinShape:new Yt("M687,605 L705,550 L657,584 L640,640 Z M687,674 L640,640 L657,695 L705,729 Z M563,584 L516,550 L534,605 L581,640 Z M563,584 L581,529 L599,584 L581,640 Z M563,695 L581,640 L599,695 L581,750 Z M563,695 L581,640 L534,674 L516,729 Z M628,495 L687,495 L640,529 L581,529 Z M628,495 L687,495 L640,460 L581,460 Z M534,495 L487,460 L469,405 L516,439 Z M534,495 L476,495 L429,460 L487,460 Z M687,495 L705,439 L752,405 L734,460 Z M687,495 L745,495 L792,460 L734,460 Z M839,495 L792,460 L810,516 L857,550 Z M839,495 L857,439 L875,495 L857,550 Z M792,350 L810,294 L857,260 L839,316 Z M857,371 L875,316 L857,260 L839,316 Z M857,439 L915,439 L962,405 L904,405 Z M752,405 L705,371 L687,316 L734,350 Z M734,350 L792,350 L745,316 L687,316 Z M581,350 L640,350 L687,316 L628,316 Z M581,460 L599,405 L581,350 L563,405 Z M516,371 L534,316 L487,350 L469,405 Z M534,316 L476,316 L429,350 L487,350 Z M516,260 L534,205 L581,171 L563,226 Z M516,260 L458,260 L411,226 L469,226 Z M581,281 L599,226 L581,171 L563,226 Z M429,350 L382,316 L364,260 L411,294 Z M364,439 L306,439 L259,405 L317,405 Z M364,371 L382,316 L364,260 L346,316 Z M364,371 L306,371 L259,405 L317,405 Z M288,316 L306,260 L259,294 L241,350 Z M259,405 L201,405 L153,439 L212,439 Z M241,350 L183,350 L135,316 L194,316 Z M241,460 L259,405 L212,439 L194,495 Z M153,439 L106,405 L88,350 L135,384 Z M88,460 L106,405 L88,350 L70,405 Z M117,550 L135,495 L88,529 L70,584 Z M259,584 L212,550 L194,495 L241,529 Z M364,550 L382,495 L364,439 L346,495 Z M364,550 L306,550 L259,584 L317,584 Z M411,516 L429,460 L382,495 L364,550 Z M346,605 L364,550 L317,584 L299,640 Z M393,640 L411,584 L429,640 L411,695 Z M346,674 L299,640 L317,695 L364,729 Z M364,729 L346,784 L364,840 L382,784 Z M364,729 L306,729 L259,695 L317,695 Z M411,763 L364,729 L382,784 L429,819 Z M259,695 L241,750 L194,784 L212,729 Z M241,819 L194,784 L212,840 L259,874 Z M117,729 L70,695 L88,750 L135,784 Z M153,840 L135,895 L88,929 L106,874 Z M88,819 L70,874 L88,929 L106,874 Z M135,674 L117,729 L135,784 L153,729 Z M241,640 L183,640 L135,674 L194,674 Z M241,640 L183,640 L135,605 L194,605 Z M135,605 L153,550 L135,495 L117,550 Z M241,929 L183,929 L135,963 L194,963 Z M288,963 L241,929 L259,985 L306,1019 Z M259,874 L201,874 L153,840 L212,840 Z M364,840 L306,840 L259,874 L317,874 Z M364,908 L346,963 L364,1019 L382,963 Z M364,908 L306,908 L259,874 L317,874 Z M411,1053 L393,1108 L411,1164 L429,1108 Z M346,1074 L288,1074 L241,1108 L299,1108 Z M306,1019 L288,1074 L241,1108 L259,1053 Z M411,1164 L458,1198 L476,1253 L429,1219 Z M393,1108 L346,1074 L364,1129 L411,1164 Z M469,1164 L411,1164 L458,1198 L516,1198 Z M581,1108 L563,1164 L581,1219 L599,1164 Z M581,1108 L563,1164 L516,1198 L534,1142 Z M640,1108 L687,1142 L705,1198 L657,1164 Z M705,1019 L687,1074 L640,1108 L657,1053 Z M705,1019 L763,1019 L810,1053 L752,1053 Z M810,1053 L792,1108 L810,1164 L828,1108 Z M810,1164 L792,1219 L745,1253 L763,1198 Z M752,1164 L810,1164 L763,1198 L705,1198 Z M581,1219 L640,1219 L687,1253 L628,1253 Z M904,1164 L962,1164 L915,1198 L857,1198 Z M1027,1074 L1085,1074 L1038,1108 L980,1108 Z M1085,963 L1067,1019 L1085,1074 L1103,1019 Z M1114,874 L1132,819 L1150,874 L1132,929 Z M1132,819 L1191,819 L1238,784 L1179,784 Z M1085,784 L1103,729 L1150,695 L1132,750 Z M1067,729 L1085,674 L1103,729 L1085,784 Z M1067,840 L1114,874 L1132,929 L1085,895 Z M962,874 L980,819 L1027,784 L1009,840 Z M962,874 L1020,874 L1067,840 L1009,840 Z M980,929 L962,985 L915,1019 L933,963 Z M980,929 L1038,929 L1085,963 L1027,963 Z M904,874 L962,874 L915,908 L857,908 Z M857,908 L839,963 L857,1019 L875,963 Z M857,840 L915,840 L962,874 L904,874 Z M839,784 L857,729 L875,784 L857,840 Z M839,784 L857,729 L810,763 L792,819 Z M857,729 L875,674 L922,640 L904,695 Z M857,729 L915,729 L962,695 L904,695 Z M962,695 L1009,729 L1027,784 L980,750 Z M980,640 L1038,640 L1085,605 L1027,605 Z M980,640 L1038,640 L1085,674 L1027,674 Z M857,550 L904,584 L922,640 L875,605 Z M857,550 L915,550 L962,584 L904,584 Z M792,640 L810,584 L828,640 L810,695 Z M752,695 L810,695 L763,729 L705,729 Z M687,784 L734,819 L752,874 L705,840 Z M687,784 L745,784 L792,819 L734,819 Z M628,784 L687,784 L640,819 L581,819 Z M628,784 L687,784 L640,750 L581,750 Z M581,819 L563,874 L581,929 L599,874 Z M534,784 L516,840 L469,874 L487,819 Z M534,784 L476,784 L429,819 L487,819 Z M516,729 L458,729 L411,695 L469,695 Z M581,929 L640,929 L687,963 L628,963 Z M516,908 L469,874 L487,929 L534,963 Z M534,963 L476,963 L429,929 L487,929 Z M581,998 L563,1053 L581,1108 L599,1053 Z M516,1019 L563,1053 L581,1108 L534,1074 Z M516,1019 L458,1019 L411,1053 L469,1053 Z M429,929 L411,985 L364,1019 L382,963 Z M628,963 L687,963 L640,998 L581,998 Z M752,874 L734,929 L687,963 L705,908 Z M734,929 L792,929 L745,963 L687,963 Z M792,929 L839,963 L857,1019 L810,985 Z M516,550 L458,550 L411,584 L469,584 Z M752,584 L810,584 L763,550 L705,550 Z M962,584 L980,529 L1027,495 L1009,550 Z M1085,495 L1132,529 L1150,584 L1103,550 Z M1067,439 L1085,384 L1132,350 L1114,405 Z M1132,460 L1191,460 L1238,495 L1179,495 Z M1067,550 L1085,495 L1103,550 L1085,605 Z M1150,695 L1209,695 L1256,729 L1197,729 Z M1150,584 L1209,584 L1256,550 L1197,550 Z M1191,640 L1238,674 L1256,729 L1209,695 Z M1191,640 L1209,584 L1256,550 L1238,605 Z M1085,316 L1103,260 L1085,205 L1067,260 Z M1114,405 L1132,350 L1150,405 L1132,460 Z M1027,205 L1085,205 L1038,171 L980,171 Z M915,260 L933,205 L980,171 L962,226 Z M810,226 L828,171 L810,115 L792,171 Z M875,205 L828,171 L810,115 L857,150 Z M875,205 L933,205 L980,171 L922,171 Z M810,115 L763,81 L745,26 L792,60 Z M752,115 L810,115 L763,81 L705,81 Z M639,171 L657,115 L705,81 L687,137 Z M581,171 L534,137 L516,81 L563,115 Z M581,171 L599,115 L581,60 L563,115 Z M581,60 L639,60 L687,26 L628,26 Z M411,115 L429,60 L476,26 L458,81 Z M393,171 L411,115 L364,150 L346,205 Z M469,115 L411,115 L458,81 L516,81 Z M411,226 L429,171 L411,115 L393,171 Z M346,205 L288,205 L241,171 L299,171 Z M306,260 L259,226 L241,171 L288,205 Z M705,260 L657,226 L639,171 L687,205 Z M705,260 L763,260 L810,226 L752,226 Z M904,115 L962,115 L915,81 L857,81 Z M980,350 L933,316 L915,260 L962,294 Z M980,350 L1038,350 L1085,316 L1027,316 Z M962,405 L1009,439 L1027,495 L980,460 Z M962,405 L1020,405 L1067,439 L1009,439 Z M904,405 L962,405 L915,371 L857,371 Z M915,1019 L962,1053 L980,1108 L933,1074 Z M875,1074 L857,1129 L810,1164 L828,1108 Z M875,1074 L933,1074 L980,1108 L922,1108 Z M628,316 L687,316 L640,281 L581,281 Z "),thickShape:new Yt("M581,640 L534,605 L487,640 L534,674 Z M581,640 L640,640 L657,695 L599,695 Z M581,640 L640,640 L657,584 L599,584 Z M563,584 L581,529 L534,495 L516,550 Z M563,695 L516,729 L534,784 L581,750 Z M581,529 L640,529 L657,584 L599,584 Z M628,495 L581,460 L534,495 L581,529 Z M687,495 L640,529 L657,584 L705,550 Z M687,495 L705,439 L657,405 L640,460 Z M687,495 L745,495 L763,550 L705,550 Z M734,460 L792,460 L810,405 L752,405 Z M705,439 L657,405 L705,371 L752,405 Z M745,495 L792,460 L810,516 L763,550 Z M839,495 L857,439 L810,405 L792,460 Z M810,405 L857,371 L839,316 L792,350 Z M792,350 L810,294 L763,260 L745,316 Z M857,371 L915,371 L933,316 L875,316 Z M857,439 L810,405 L857,371 L904,405 Z M857,439 L915,439 L933,495 L875,495 Z M752,405 L810,405 L792,350 L734,350 Z M687,316 L705,260 L657,226 L640,281 Z M687,316 L745,316 L763,260 L705,260 Z M657,405 L705,371 L687,316 L640,350 Z M599,405 L657,405 L640,350 L581,350 Z M581,350 L534,316 L581,281 L628,316 Z M581,460 L534,495 L516,439 L563,405 Z M581,460 L640,460 L657,405 L599,405 Z M563,405 L516,371 L469,405 L516,439 Z M563,405 L581,350 L534,316 L516,371 Z M469,405 L411,405 L429,350 L487,350 Z M534,316 L581,281 L563,226 L516,260 Z M534,316 L476,316 L458,260 L516,260 Z M516,260 L534,205 L487,171 L469,226 Z M581,281 L640,281 L657,226 L599,226 Z M476,316 L429,350 L411,294 L458,260 Z M458,260 L411,226 L364,260 L411,294 Z M411,405 L364,371 L317,405 L364,439 Z M411,405 L429,350 L382,316 L364,371 Z M429,460 L382,495 L364,439 L411,405 Z M364,371 L306,371 L288,316 L346,316 Z M346,316 L288,316 L306,260 L364,260 Z M306,371 L259,405 L241,350 L288,316 Z M259,405 L201,405 L183,350 L241,350 Z M241,350 L259,294 L212,260 L194,316 Z M201,405 L153,439 L135,384 L183,350 Z M183,350 L135,316 L88,350 L135,384 Z M135,495 L88,460 L41,495 L88,529 Z M135,495 L153,439 L106,405 L88,460 Z M194,495 L135,495 L153,439 L212,439 Z M212,550 L153,550 L135,495 L194,495 Z M288,495 L241,460 L194,495 L241,529 Z M288,495 L306,439 L259,405 L241,460 Z M306,550 L259,584 L241,529 L288,495 Z M346,495 L288,495 L306,439 L364,439 Z M364,550 L306,550 L288,495 L346,495 Z M299,640 L241,640 L259,695 L317,695 Z M299,640 L241,640 L259,584 L317,584 Z M393,640 L346,674 L364,729 L411,695 Z M393,640 L346,605 L299,640 L346,674 Z M393,640 L411,584 L364,550 L346,605 Z M364,729 L306,729 L288,784 L346,784 Z M346,784 L288,784 L306,840 L364,840 Z M306,729 L288,784 L241,750 L259,695 Z M288,784 L241,819 L259,874 L306,840 Z M288,784 L241,750 L194,784 L241,819 Z M194,784 L135,784 L153,840 L212,840 Z M212,729 L153,729 L135,784 L194,784 Z M135,784 L88,819 L106,874 L153,840 Z M135,784 L88,750 L41,784 L88,819 Z M135,674 L117,729 L70,695 L88,640 Z M183,640 L135,605 L88,640 L135,674 Z M88,640 L30,640 L12,584 L70,584 Z M88,640 L30,640 L12,695 L70,695 Z M194,674 L135,674 L153,729 L212,729 Z M241,640 L194,674 L212,729 L259,695 Z M241,640 L259,584 L212,550 L194,605 Z M194,605 L135,605 L153,550 L212,550 Z M135,605 L88,640 L70,584 L117,550 Z M70,584 L88,529 L41,495 L23,550 Z M70,695 L23,729 L41,784 L88,750 Z M183,929 L135,895 L88,929 L135,963 Z M194,963 L135,963 L153,1019 L212,1019 Z M241,929 L194,963 L212,1019 L259,985 Z M259,874 L201,874 L183,929 L241,929 Z M306,908 L288,963 L241,929 L259,874 Z M201,874 L183,929 L135,895 L153,840 Z M364,908 L306,908 L288,963 L346,963 Z M411,874 L364,908 L382,963 L429,929 Z M411,874 L364,840 L317,874 L364,908 Z M346,963 L288,963 L306,1019 L364,1019 Z M364,1019 L306,1019 L288,1074 L346,1074 Z M411,1053 L393,1108 L346,1074 L364,1019 Z M346,1074 L299,1108 L317,1164 L364,1129 Z M306,1019 L259,985 L212,1019 L259,1053 Z M259,1053 L241,1108 L194,1074 L212,1019 Z M411,1164 L364,1129 L317,1164 L364,1198 Z M516,1198 L458,1198 L476,1253 L534,1253 Z M487,1108 L469,1164 L516,1198 L534,1142 Z M487,1108 L429,1108 L411,1164 L469,1164 Z M469,1053 L411,1053 L429,1108 L487,1108 Z M534,1074 L581,1108 L534,1142 L487,1108 Z M581,1108 L640,1108 L657,1164 L599,1164 Z M599,1164 L657,1164 L640,1219 L581,1219 Z M563,1164 L516,1198 L534,1253 L581,1219 Z M599,1053 L657,1053 L640,1108 L581,1108 Z M657,1164 L640,1219 L687,1253 L705,1198 Z M687,1074 L734,1108 L687,1142 L640,1108 Z M705,1019 L687,1074 L734,1108 L752,1053 Z M687,963 L640,998 L657,1053 L705,1019 Z M687,963 L745,963 L763,1019 L705,1019 Z M752,1053 L810,1053 L792,1108 L734,1108 Z M810,985 L857,1019 L810,1053 L763,1019 Z M857,1019 L810,1053 L828,1108 L875,1074 Z M857,1019 L915,1019 L933,1074 L875,1074 Z M734,1108 L687,1142 L705,1198 L752,1164 Z M734,1108 L792,1108 L810,1164 L752,1164 Z M705,1198 L763,1198 L745,1253 L687,1253 Z M857,1129 L904,1164 L857,1198 L810,1164 Z M922,1108 L980,1108 L962,1164 L904,1164 Z M1085,963 L1132,929 L1150,985 L1103,1019 Z M1132,929 L1191,929 L1209,874 L1150,874 Z M1132,819 L1191,819 L1209,874 L1150,874 Z M1179,784 L1238,784 L1256,729 L1197,729 Z M1085,784 L1132,819 L1179,784 L1132,750 Z M1132,750 L1150,695 L1197,729 L1179,784 Z M1067,840 L1085,784 L1132,819 L1114,874 Z M1009,729 L1067,729 L1085,784 L1027,784 Z M1009,729 L1067,729 L1085,674 L1027,674 Z M1009,840 L1067,840 L1085,784 L1027,784 Z M962,874 L915,908 L933,963 L980,929 Z M962,874 L1020,874 L1038,929 L980,929 Z M980,929 L962,985 L1009,1019 L1027,963 Z M915,840 L933,784 L980,819 L962,874 Z M1020,874 L1067,840 L1085,895 L1038,929 Z M1038,929 L1085,963 L1132,929 L1085,895 Z M857,908 L915,908 L933,963 L875,963 Z M857,840 L904,874 L857,908 L810,874 Z M857,840 L915,840 L933,784 L875,784 Z M839,784 L792,819 L810,874 L857,840 Z M810,874 L792,929 L839,963 L857,908 Z M857,729 L915,729 L933,784 L875,784 Z M933,784 L980,819 L1027,784 L980,750 Z M915,729 L962,695 L980,750 L933,784 Z M962,695 L980,640 L1027,674 L1009,729 Z M904,695 L962,695 L980,640 L922,640 Z M904,584 L962,584 L980,640 L922,640 Z M857,550 L915,550 L933,495 L875,495 Z M828,640 L875,674 L922,640 L875,605 Z M810,584 L857,550 L875,605 L828,640 Z M810,584 L763,550 L810,516 L857,550 Z M810,695 L857,729 L810,763 L763,729 Z M810,695 L828,640 L875,674 L857,729 Z M734,640 L687,674 L705,729 L752,695 Z M734,640 L687,605 L640,640 L687,674 Z M734,640 L752,584 L705,550 L687,605 Z M734,640 L792,640 L810,695 L752,695 Z M734,640 L792,640 L810,584 L752,584 Z M687,784 L640,819 L657,874 L705,840 Z M687,784 L705,729 L657,695 L640,750 Z M687,784 L745,784 L763,729 L705,729 Z M705,840 L752,874 L705,908 L657,874 Z M734,819 L792,819 L810,874 L752,874 Z M628,784 L581,750 L534,784 L581,819 Z M745,784 L763,729 L810,763 L792,819 Z M581,819 L563,874 L516,840 L534,784 Z M581,819 L640,819 L657,874 L599,874 Z M581,750 L640,750 L657,695 L599,695 Z M516,729 L534,674 L487,640 L469,695 Z M516,729 L458,729 L476,784 L534,784 Z M487,819 L429,819 L411,874 L469,874 Z M458,729 L411,763 L429,819 L476,784 Z M458,729 L411,695 L364,729 L411,763 Z M429,819 L411,874 L364,840 L382,784 Z M469,874 L411,874 L429,929 L487,929 Z M563,874 L516,908 L534,963 L581,929 Z M563,874 L516,840 L469,874 L516,908 Z M581,929 L628,963 L581,998 L534,963 Z M534,963 L516,1019 L563,1053 L581,998 Z M534,963 L476,963 L458,1019 L516,1019 Z M581,998 L640,998 L657,1053 L599,1053 Z M516,1019 L469,1053 L487,1108 L534,1074 Z M476,963 L458,1019 L411,985 L429,929 Z M458,1019 L411,985 L364,1019 L411,1053 Z M599,874 L657,874 L640,929 L581,929 Z M657,874 L640,929 L687,963 L705,908 Z M752,874 L810,874 L792,929 L734,929 Z M792,929 L745,963 L763,1019 L810,985 Z M469,695 L411,695 L429,640 L487,640 Z M469,584 L411,584 L429,640 L487,640 Z M516,550 L469,584 L487,640 L534,605 Z M516,550 L458,550 L476,495 L534,495 Z M458,550 L411,516 L364,550 L411,584 Z M458,550 L476,495 L429,460 L411,516 Z M915,550 L933,495 L980,529 L962,584 Z M962,584 L1009,550 L1027,605 L980,640 Z M933,495 L980,529 L1027,495 L980,460 Z M915,439 L962,405 L980,460 L933,495 Z M1009,439 L1067,439 L1085,495 L1027,495 Z M1009,550 L1067,550 L1085,605 L1027,605 Z M1009,550 L1067,550 L1085,495 L1027,495 Z M1085,495 L1132,529 L1179,495 L1132,460 Z M1067,439 L1114,405 L1132,460 L1085,495 Z M1132,460 L1191,460 L1209,405 L1150,405 Z M1132,529 L1179,495 L1197,550 L1150,584 Z M1085,605 L1103,550 L1150,584 L1132,640 Z M1038,640 L1085,674 L1132,640 L1085,605 Z M1132,640 L1191,640 L1209,695 L1150,695 Z M1132,640 L1191,640 L1209,584 L1150,584 Z M1085,674 L1132,640 L1150,695 L1103,729 Z M1179,495 L1238,495 L1256,550 L1197,550 Z M1132,350 L1191,350 L1209,405 L1150,405 Z M1085,316 L1103,260 L1150,294 L1132,350 Z M1009,260 L1027,205 L980,171 L962,226 Z M1009,260 L1067,260 L1085,205 L1027,205 Z M1027,316 L1085,316 L1067,260 L1009,260 Z M962,294 L915,260 L962,226 L1009,260 Z M857,260 L875,205 L828,171 L810,226 Z M857,260 L915,260 L933,205 L875,205 Z M875,316 L933,316 L915,260 L857,260 Z M810,294 L763,260 L810,226 L857,260 Z M875,205 L922,171 L904,115 L857,150 Z M857,150 L810,115 L857,81 L904,115 Z M922,171 L980,171 L962,115 L904,115 Z M705,81 L763,81 L745,26 L687,26 Z M734,171 L752,115 L705,81 L687,137 Z M734,171 L792,171 L810,115 L752,115 Z M752,226 L810,226 L792,171 L734,171 Z M687,205 L639,171 L687,137 L734,171 Z M657,115 L705,81 L687,26 L639,60 Z M581,171 L639,171 L657,115 L599,115 Z M563,115 L581,60 L534,26 L516,81 Z M599,226 L657,226 L639,171 L581,171 Z M534,205 L487,171 L534,137 L581,171 Z M599,115 L657,115 L639,60 L581,60 Z M516,81 L458,81 L476,26 L534,26 Z M411,115 L364,81 L317,115 L364,150 Z M487,171 L534,137 L516,81 L469,115 Z M487,171 L429,171 L411,115 L469,115 Z M469,226 L411,226 L429,171 L487,171 Z M411,226 L364,260 L346,205 L393,171 Z M364,260 L306,260 L288,205 L346,205 Z M346,205 L364,150 L317,115 L299,171 Z M306,260 L259,226 L212,260 L259,294 Z M259,226 L212,260 L194,205 L241,171 Z M194,316 L135,316 L153,260 L212,260 Z M705,260 L752,226 L734,171 L687,205 Z M980,350 L1027,316 L1009,260 L962,294 Z M962,405 L980,350 L933,316 L915,371 Z M962,405 L1020,405 L1038,350 L980,350 Z M1020,405 L1038,350 L1085,384 L1067,439 Z M1038,350 L1085,384 L1132,350 L1085,316 Z M875,963 L933,963 L915,1019 L857,1019 Z M962,985 L1009,1019 L962,1053 L915,1019 Z M1009,1019 L962,1053 L980,1108 L1027,1074 Z M1009,1019 L1067,1019 L1085,1074 L1027,1074 Z M1027,963 L1085,963 L1067,1019 L1009,1019 Z M875,1074 L857,1129 L904,1164 L922,1108 Z M487,460 L429,460 L411,405 L469,405 Z ")},y4={name:"Penrose13",thinShape:new Yt("M679,611 L695,564 L655,593 L640,640 Z M679,668 L640,640 L655,686 L695,715 Z M575,593 L535,564 L550,611 L590,640 Z M575,593 L590,546 L605,593 L590,640 Z M575,686 L590,640 L605,686 L590,733 Z M575,686 L590,640 L550,668 L535,715 Z M630,517 L679,517 L640,546 L590,546 Z M630,517 L679,517 L640,488 L590,488 Z M550,517 L511,488 L495,441 L535,470 Z M550,517 L501,517 L461,488 L511,488 Z M679,517 L695,470 L734,441 L719,488 Z M679,517 L729,517 L768,488 L719,488 Z M808,517 L768,488 L784,535 L823,564 Z M808,517 L823,470 L839,517 L823,564 Z M768,394 L784,348 L823,319 L808,365 Z M823,412 L839,365 L823,319 L808,365 Z M823,470 L873,470 L912,441 L863,441 Z M734,441 L695,412 L679,365 L719,394 Z M719,394 L768,394 L729,365 L679,365 Z M590,394 L640,394 L679,365 L630,365 Z M590,488 L605,441 L590,394 L575,441 Z M535,412 L550,365 L511,394 L495,441 Z M550,365 L501,365 L461,394 L511,394 Z M535,319 L550,272 L590,243 L575,290 Z M535,319 L486,319 L446,290 L495,290 Z M590,336 L605,290 L590,243 L575,290 Z M461,394 L422,365 L406,319 L446,348 Z M406,470 L357,470 L317,441 L367,441 Z M406,412 L422,365 L406,319 L391,365 Z M406,412 L357,412 L317,441 L367,441 Z M342,365 L357,319 L317,348 L302,394 Z M317,441 L268,441 L228,470 L277,470 Z M302,394 L253,394 L213,365 L262,365 Z M302,488 L317,441 L277,470 L262,517 Z M228,470 L188,441 L173,394 L213,423 Z M173,488 L188,441 L173,394 L158,441 Z M173,488 L124,488 L84,517 L133,517 Z M198,564 L213,517 L173,546 L158,593 Z M317,593 L277,564 L262,517 L302,546 Z M406,564 L422,517 L406,470 L391,517 Z M406,564 L357,564 L317,593 L367,593 Z M446,535 L461,488 L422,517 L406,564 Z M391,611 L406,564 L367,593 L351,640 Z M431,640 L446,593 L461,640 L446,686 Z M391,668 L351,640 L367,686 L406,715 Z M406,715 L391,762 L406,809 L422,762 Z M406,715 L357,715 L317,686 L367,686 Z M446,744 L406,715 L422,762 L461,791 Z M317,686 L302,733 L262,762 L277,715 Z M302,791 L262,762 L277,809 L317,838 Z M198,715 L158,686 L173,733 L213,762 Z M228,809 L213,856 L173,885 L188,838 Z M173,791 L158,838 L173,885 L188,838 Z M173,791 L124,791 L84,762 L133,762 Z M213,668 L198,715 L213,762 L228,715 Z M302,640 L253,640 L213,668 L262,668 Z M302,640 L253,640 L213,611 L262,611 Z M213,611 L228,564 L213,517 L198,564 Z M158,593 L109,593 L69,564 L118,564 Z M158,686 L109,686 L69,715 L118,715 Z M124,640 L84,611 L69,564 L109,593 Z M124,640 L109,686 L69,715 L84,668 Z M44,640 L29,686 L14,640 L29,593 Z M173,394 L133,365 L118,319 L158,348 Z M173,394 L124,394 L84,365 L133,365 Z M213,365 L228,319 L213,272 L198,319 Z M158,290 L173,243 L133,272 L118,319 Z M302,243 L253,243 L213,272 L262,272 Z M302,243 L253,243 L213,214 L262,214 Z M391,272 L342,272 L302,243 L351,243 Z M406,167 L422,120 L406,73 L391,120 Z M406,167 L357,167 L317,196 L367,196 Z M446,196 L461,149 L501,120 L486,167 Z M431,243 L446,196 L406,225 L391,272 Z M495,196 L446,196 L486,167 L535,167 Z M535,73 L486,73 L446,44 L495,44 Z M590,149 L639,149 L679,120 L630,120 Z M501,120 L461,91 L446,44 L486,73 Z M630,120 L679,120 L639,91 L590,91 Z M695,73 L744,73 L784,44 L734,44 Z M729,120 L744,73 L784,44 L768,91 Z M912,196 L928,149 L968,120 L952,167 Z M823,167 L839,120 L823,73 L808,120 Z M784,196 L744,167 L729,120 L768,149 Z M863,196 L912,196 L873,167 L823,167 Z M839,272 L799,243 L784,196 L823,225 Z M839,272 L888,272 L928,243 L878,243 Z M928,243 L977,243 L1017,214 L968,214 Z M873,319 L888,272 L928,243 L912,290 Z M928,394 L888,365 L873,319 L912,348 Z M928,394 L977,394 L1017,365 L968,365 Z M968,272 L1017,272 L977,243 L928,243 Z M1017,365 L1032,319 L1017,272 L1002,319 Z M1057,243 L1106,243 L1146,272 L1096,272 Z M1072,290 L1112,319 L1096,272 L1057,243 Z M1146,365 L1185,394 L1201,441 L1161,412 Z M1057,394 L1072,348 L1112,319 L1096,365 Z M1057,394 L1106,394 L1146,365 L1096,365 Z M1041,441 L1057,394 L1072,441 L1057,488 Z M1146,517 L1161,470 L1201,441 L1185,488 Z M1057,488 L1106,488 L1146,517 L1096,517 Z M1017,517 L1057,546 L1072,593 L1032,564 Z M1072,593 L1121,593 L1161,564 L1112,564 Z M1106,640 L1146,668 L1161,715 L1121,686 Z M1106,640 L1121,593 L1161,564 L1146,611 Z M1185,640 L1201,593 L1216,640 L1201,686 Z M1185,488 L1201,441 L1216,488 L1201,535 Z M1185,394 L1201,348 L1216,394 L1201,441 Z M1185,791 L1201,744 L1216,791 L1201,838 Z M1146,762 L1185,791 L1201,838 L1161,809 Z M1057,791 L1106,791 L1146,762 L1096,762 Z M1072,686 L1121,686 L1161,715 L1112,715 Z M1017,762 L1032,715 L1072,686 L1057,733 Z M1002,715 L1017,668 L1032,715 L1017,762 Z M1002,809 L1041,838 L1057,885 L1017,856 Z M912,838 L928,791 L968,762 L952,809 Z M912,838 L962,838 L1002,809 L952,809 Z M928,885 L912,931 L873,960 L888,914 Z M928,885 L977,885 L1017,914 L968,914 Z M863,838 L912,838 L873,867 L823,867 Z M1017,914 L1002,960 L1017,1007 L1032,960 Z M1057,885 L1096,914 L1112,960 L1072,931 Z M1057,885 L1106,885 L1146,914 L1096,914 Z M968,1007 L1017,1007 L977,1036 L928,1036 Z M873,960 L912,989 L928,1036 L888,1007 Z M839,1007 L823,1054 L784,1083 L799,1036 Z M839,1007 L888,1007 L928,1036 L878,1036 Z M784,989 L768,1036 L784,1083 L799,1036 Z M823,867 L808,914 L823,960 L839,914 Z M823,809 L873,809 L912,838 L863,838 Z M768,885 L808,914 L823,960 L784,931 Z M734,838 L719,885 L679,914 L695,867 Z M719,885 L768,885 L729,914 L679,914 Z M695,960 L679,1007 L640,1036 L655,989 Z M695,960 L744,960 L784,989 L734,989 Z M630,914 L679,914 L640,943 L590,943 Z M590,943 L575,989 L590,1036 L605,989 Z M590,885 L640,885 L679,914 L630,914 Z M550,914 L501,914 L461,885 L511,885 Z M590,791 L575,838 L590,885 L605,838 Z M679,762 L719,791 L734,838 L695,809 Z M679,762 L729,762 L768,791 L719,791 Z M630,762 L679,762 L640,791 L590,791 Z M630,762 L679,762 L640,733 L590,733 Z M823,715 L839,668 L878,640 L863,686 Z M823,715 L873,715 L912,686 L863,686 Z M808,762 L823,715 L839,762 L823,809 Z M808,762 L823,715 L784,744 L768,791 Z M912,686 L952,715 L968,762 L928,733 Z M928,640 L977,640 L1017,611 L968,611 Z M928,640 L977,640 L1017,668 L968,668 Z M912,593 L928,546 L968,517 L952,564 Z M1002,564 L1017,517 L1032,564 L1017,611 Z M912,441 L952,470 L968,517 L928,488 Z M912,441 L962,441 L1002,470 L952,470 Z M823,564 L863,593 L878,640 L839,611 Z M823,564 L873,564 L912,593 L863,593 Z M768,640 L784,593 L799,640 L784,686 Z M734,593 L784,593 L744,564 L695,564 Z M734,686 L784,686 L744,715 L695,715 Z M863,441 L912,441 L873,412 L823,412 Z M1002,470 L1017,423 L1057,394 L1041,441 Z M550,762 L535,809 L495,838 L511,791 Z M550,762 L501,762 L461,791 L511,791 Z M535,715 L486,715 L446,686 L495,686 Z M461,885 L446,931 L406,960 L422,914 Z M406,867 L391,914 L406,960 L422,914 Z M406,867 L357,867 L317,838 L367,838 Z M406,809 L357,809 L317,838 L367,838 Z M535,867 L495,838 L511,885 L550,914 Z M317,838 L268,838 L228,809 L277,809 Z M302,885 L253,885 L213,914 L262,914 Z M213,914 L198,960 L213,1007 L228,960 Z M173,885 L158,931 L118,960 L133,914 Z M173,885 L124,885 L84,914 L133,914 Z M158,989 L118,960 L133,1007 L173,1036 Z M302,1036 L253,1036 L213,1065 L262,1065 Z M302,1036 L253,1036 L213,1007 L262,1007 Z M391,1007 L342,1007 L302,1036 L351,1036 Z M431,1036 L391,1007 L406,1054 L446,1083 Z M446,989 L431,1036 L446,1083 L461,1036 Z M357,960 L342,1007 L302,1036 L317,989 Z M342,914 L302,885 L317,931 L357,960 Z M535,960 L575,989 L590,1036 L550,1007 Z M535,960 L486,960 L446,989 L495,989 Z M590,1036 L575,1083 L590,1130 L605,1083 Z M590,1036 L575,1083 L535,1112 L550,1065 Z M640,1036 L679,1065 L695,1112 L655,1083 Z M734,1083 L784,1083 L744,1112 L695,1112 Z M784,1083 L768,1130 L729,1159 L744,1112 Z M823,1112 L808,1159 L823,1206 L839,1159 Z M729,1159 L768,1188 L784,1235 L744,1206 Z M695,1206 L744,1206 L784,1235 L734,1235 Z M630,1159 L679,1159 L640,1188 L590,1188 Z M535,1206 L486,1206 L446,1235 L495,1235 Z M501,1159 L486,1206 L446,1235 L461,1188 Z M446,1083 L486,1112 L501,1159 L461,1130 Z M406,1112 L391,1159 L406,1206 L422,1159 Z M406,1112 L357,1112 L317,1083 L367,1083 Z M495,1083 L446,1083 L486,1112 L535,1112 Z M590,1130 L640,1130 L679,1159 L630,1159 Z M912,1083 L952,1112 L968,1159 L928,1130 Z M1057,1036 L1106,1036 L1146,1007 L1096,1007 Z M928,1036 L977,1036 L1017,1065 L968,1065 Z M863,1083 L912,1083 L873,1112 L823,1112 Z M1072,989 L1057,1036 L1096,1007 L1112,960 Z M1146,914 L1161,867 L1201,838 L1185,885 Z M1185,885 L1201,838 L1216,885 L1201,931 Z M535,564 L486,564 L446,593 L495,593 Z M1041,838 L1057,791 L1072,838 L1057,885 Z M784,290 L799,243 L784,196 L768,243 Z M695,319 L655,290 L640,243 L679,272 Z M695,319 L744,319 L784,290 L734,290 Z M640,243 L655,196 L695,167 L679,214 Z M590,243 L550,214 L535,167 L575,196 Z M590,243 L605,196 L590,149 L575,196 Z M734,196 L784,196 L744,167 L695,167 Z M446,290 L461,243 L446,196 L431,243 Z M357,319 L317,290 L302,243 L342,272 Z M630,365 L679,365 L640,336 L590,336 Z "),thickShape:new Yt("M590,640 L550,611 L511,640 L550,668 Z M590,640 L640,640 L655,686 L605,686 Z M590,640 L640,640 L655,593 L605,593 Z M575,593 L590,546 L550,517 L535,564 Z M575,686 L535,715 L550,762 L590,733 Z M590,546 L640,546 L655,593 L605,593 Z M630,517 L590,488 L550,517 L590,546 Z M679,517 L640,546 L655,593 L695,564 Z M679,517 L695,470 L655,441 L640,488 Z M679,517 L729,517 L744,564 L695,564 Z M719,488 L768,488 L784,441 L734,441 Z M695,470 L655,441 L695,412 L734,441 Z M729,517 L768,488 L784,535 L744,564 Z M808,517 L823,470 L784,441 L768,488 Z M784,441 L823,412 L808,365 L768,394 Z M768,394 L784,348 L744,319 L729,365 Z M823,412 L873,412 L888,365 L839,365 Z M823,470 L784,441 L823,412 L863,441 Z M823,470 L873,470 L888,517 L839,517 Z M734,441 L784,441 L768,394 L719,394 Z M679,365 L695,319 L655,290 L640,336 Z M679,365 L729,365 L744,319 L695,319 Z M655,441 L695,412 L679,365 L640,394 Z M605,441 L655,441 L640,394 L590,394 Z M590,394 L550,365 L590,336 L630,365 Z M590,488 L550,517 L535,470 L575,441 Z M590,488 L640,488 L655,441 L605,441 Z M575,441 L535,412 L495,441 L535,470 Z M575,441 L590,394 L550,365 L535,412 Z M495,441 L446,441 L461,394 L511,394 Z M550,365 L590,336 L575,290 L535,319 Z M550,365 L501,365 L486,319 L535,319 Z M535,319 L550,272 L511,243 L495,290 Z M590,336 L640,336 L655,290 L605,290 Z M501,365 L461,394 L446,348 L486,319 Z M486,319 L446,290 L406,319 L446,348 Z M446,441 L406,412 L367,441 L406,470 Z M446,441 L461,394 L422,365 L406,412 Z M461,488 L422,517 L406,470 L446,441 Z M406,412 L357,412 L342,365 L391,365 Z M391,365 L342,365 L357,319 L406,319 Z M357,412 L317,441 L302,394 L342,365 Z M317,441 L268,441 L253,394 L302,394 Z M302,394 L317,348 L277,319 L262,365 Z M268,441 L228,470 L213,423 L253,394 Z M253,394 L213,365 L173,394 L213,423 Z M213,517 L173,488 L133,517 L173,546 Z M213,517 L228,470 L188,441 L173,488 Z M173,488 L124,488 L109,441 L158,441 Z M262,517 L213,517 L228,470 L277,470 Z M277,564 L228,564 L213,517 L262,517 Z M342,517 L302,488 L262,517 L302,546 Z M342,517 L357,470 L317,441 L302,488 Z M357,564 L317,593 L302,546 L342,517 Z M391,517 L342,517 L357,470 L406,470 Z M406,564 L357,564 L342,517 L391,517 Z M351,640 L302,640 L317,686 L367,686 Z M351,640 L302,640 L317,593 L367,593 Z M431,640 L391,668 L406,715 L446,686 Z M431,640 L391,611 L351,640 L391,668 Z M431,640 L446,593 L406,564 L391,611 Z M406,715 L357,715 L342,762 L391,762 Z M391,762 L342,762 L357,809 L406,809 Z M357,715 L342,762 L302,733 L317,686 Z M342,762 L302,791 L317,838 L357,809 Z M342,762 L302,733 L262,762 L302,791 Z M262,762 L213,762 L228,809 L277,809 Z M277,715 L228,715 L213,762 L262,762 Z M213,762 L173,791 L188,838 L228,809 Z M213,762 L173,733 L133,762 L173,791 Z M173,791 L124,791 L109,838 L158,838 Z M213,668 L198,715 L158,686 L173,640 Z M253,640 L213,611 L173,640 L213,668 Z M173,640 L124,640 L109,593 L158,593 Z M173,640 L124,640 L109,686 L158,686 Z M262,668 L213,668 L228,715 L277,715 Z M302,640 L262,668 L277,715 L317,686 Z M302,640 L317,593 L277,564 L262,611 Z M262,611 L213,611 L228,564 L277,564 Z M213,611 L173,640 L158,593 L198,564 Z M158,593 L173,546 L133,517 L118,564 Z M158,686 L118,715 L133,762 L173,733 Z M124,640 L84,611 L44,640 L84,668 Z M84,668 L69,715 L29,686 L44,640 Z M84,611 L44,640 L29,593 L69,564 Z M69,715 L29,744 L44,791 L84,762 Z M118,715 L69,715 L84,762 L133,762 Z M69,564 L84,517 L44,488 L29,535 Z M118,564 L69,564 L84,517 L133,517 Z M124,488 L84,517 L69,470 L109,441 Z M109,441 L124,394 L84,365 L69,412 Z M158,441 L109,441 L124,394 L173,394 Z M213,365 L173,394 L158,348 L198,319 Z M253,243 L213,214 L173,243 L213,272 Z M198,319 L158,290 L118,319 L158,348 Z M198,319 L213,272 L173,243 L158,290 Z M277,319 L228,319 L213,272 L262,272 Z M302,243 L317,196 L277,167 L262,214 Z M317,290 L277,319 L262,272 L302,243 Z M262,214 L213,214 L228,167 L277,167 Z M351,243 L302,243 L317,196 L367,196 Z M391,272 L406,225 L367,196 L351,243 Z M406,167 L357,167 L342,120 L391,120 Z M446,196 L406,167 L367,196 L406,225 Z M446,196 L461,149 L422,120 L406,167 Z M461,149 L422,120 L461,91 L501,120 Z M511,243 L550,214 L535,167 L495,196 Z M511,243 L461,243 L446,196 L495,196 Z M535,167 L486,167 L501,120 L550,120 Z M575,196 L590,149 L550,120 L535,167 Z M550,120 L590,91 L575,44 L535,73 Z M550,120 L501,120 L486,73 L535,73 Z M590,91 L639,91 L655,44 L605,44 Z M590,149 L550,120 L590,91 L630,120 Z M422,120 L461,91 L446,44 L406,73 Z M391,120 L342,120 L357,73 L406,73 Z M357,167 L317,196 L302,149 L342,120 Z M605,196 L655,196 L639,149 L590,149 Z M655,196 L695,167 L679,120 L639,149 Z M679,120 L695,73 L655,44 L639,91 Z M679,120 L729,120 L744,73 L695,73 Z M695,167 L744,167 L729,120 L679,120 Z M768,149 L729,120 L768,91 L808,120 Z M839,120 L888,120 L873,73 L823,73 Z M808,120 L823,73 L784,44 L768,91 Z M928,149 L888,120 L928,91 L968,120 Z M912,196 L928,149 L888,120 L873,167 Z M823,167 L873,167 L888,120 L839,120 Z M784,196 L823,167 L808,120 L768,149 Z M878,243 L928,243 L912,196 L863,196 Z M823,225 L784,196 L823,167 L863,196 Z M839,272 L878,243 L863,196 L823,225 Z M823,319 L839,272 L799,243 L784,290 Z M823,319 L873,319 L888,272 L839,272 Z M928,243 L968,214 L952,167 L912,196 Z M912,348 L873,319 L912,290 L952,319 Z M928,394 L968,365 L952,319 L912,348 Z M952,319 L968,272 L928,243 L912,290 Z M952,319 L1002,319 L1017,272 L968,272 Z M968,365 L1017,365 L1002,319 L952,319 Z M1017,365 L1032,319 L1072,348 L1057,394 Z M1017,272 L977,243 L1017,214 L1057,243 Z M1032,319 L1072,290 L1057,243 L1017,272 Z M1032,319 L1072,348 L1112,319 L1072,290 Z M1057,243 L1072,196 L1032,167 L1017,214 Z M968,214 L1017,214 L1002,167 L952,167 Z M1146,365 L1161,319 L1201,348 L1185,394 Z M1112,319 L1161,319 L1146,272 L1096,272 Z M1096,365 L1146,365 L1161,319 L1112,319 Z M1057,394 L1106,394 L1121,441 L1072,441 Z M1106,394 L1146,365 L1161,412 L1121,441 Z M1121,441 L1161,470 L1201,441 L1161,412 Z M1106,488 L1121,441 L1161,470 L1146,517 Z M1146,517 L1185,488 L1201,535 L1161,564 Z M1057,488 L1106,488 L1121,441 L1072,441 Z M1017,517 L1057,546 L1096,517 L1057,488 Z M1096,517 L1146,517 L1161,564 L1112,564 Z M1057,546 L1096,517 L1112,564 L1072,593 Z M1057,640 L1106,640 L1121,686 L1072,686 Z M1057,640 L1106,640 L1121,593 L1072,593 Z M1161,564 L1201,593 L1241,564 L1201,535 Z M1106,640 L1146,668 L1185,640 L1146,611 Z M1146,611 L1161,564 L1201,593 L1185,640 Z M1146,668 L1185,640 L1201,686 L1161,715 Z M1161,715 L1201,744 L1241,715 L1201,686 Z M1201,686 L1250,686 L1265,640 L1216,640 Z M1201,593 L1250,593 L1265,640 L1216,640 Z M1146,762 L1161,715 L1201,744 L1185,791 Z M1106,791 L1146,762 L1161,809 L1121,838 Z M1096,762 L1146,762 L1161,715 L1112,715 Z M1057,791 L1106,791 L1121,838 L1072,838 Z M1057,733 L1072,686 L1112,715 L1096,762 Z M1017,668 L1057,640 L1072,686 L1032,715 Z M1017,762 L1057,791 L1096,762 L1057,733 Z M1002,809 L1017,762 L1057,791 L1041,838 Z M952,715 L1002,715 L1017,762 L968,762 Z M952,715 L1002,715 L1017,668 L968,668 Z M952,809 L1002,809 L1017,762 L968,762 Z M912,838 L873,867 L888,914 L928,885 Z M912,838 L962,838 L977,885 L928,885 Z M928,885 L912,931 L952,960 L968,914 Z M873,809 L888,762 L928,791 L912,838 Z M962,838 L1002,809 L1017,856 L977,885 Z M977,885 L1017,914 L1057,885 L1017,856 Z M1017,914 L1057,885 L1072,931 L1032,960 Z M1032,960 L1072,989 L1112,960 L1072,931 Z M1032,960 L1017,1007 L1057,1036 L1072,989 Z M1057,885 L1106,885 L1121,838 L1072,838 Z M968,914 L1017,914 L1002,960 L952,960 Z M952,960 L912,989 L928,1036 L968,1007 Z M952,960 L1002,960 L1017,1007 L968,1007 Z M912,931 L952,960 L912,989 L873,960 Z M823,960 L784,989 L799,1036 L839,1007 Z M823,960 L873,960 L888,1007 L839,1007 Z M839,1007 L823,1054 L863,1083 L878,1036 Z M784,931 L823,960 L784,989 L744,960 Z M839,914 L888,914 L873,960 L823,960 Z M823,867 L873,867 L888,914 L839,914 Z M784,838 L768,885 L808,914 L823,867 Z M823,809 L863,838 L823,867 L784,838 Z M823,809 L873,809 L888,762 L839,762 Z M768,885 L729,914 L744,960 L784,931 Z M734,838 L784,838 L768,885 L719,885 Z M719,791 L768,791 L784,838 L734,838 Z M695,809 L734,838 L695,867 L655,838 Z M679,914 L640,943 L655,989 L695,960 Z M679,914 L729,914 L744,960 L695,960 Z M695,960 L679,1007 L719,1036 L734,989 Z M590,943 L640,943 L655,989 L605,989 Z M590,885 L630,914 L590,943 L550,914 Z M575,838 L535,867 L550,914 L590,885 Z M575,838 L535,809 L495,838 L535,867 Z M550,914 L535,960 L575,989 L590,943 Z M550,914 L501,914 L486,960 L535,960 Z M605,838 L655,838 L640,885 L590,885 Z M590,791 L575,838 L535,809 L550,762 Z M590,791 L640,791 L655,838 L605,838 Z M655,838 L640,885 L679,914 L695,867 Z M679,762 L640,791 L655,838 L695,809 Z M679,762 L695,715 L655,686 L640,733 Z M679,762 L729,762 L744,715 L695,715 Z M630,762 L590,733 L550,762 L590,791 Z M729,762 L744,715 L784,744 L768,791 Z M784,686 L823,715 L784,744 L744,715 Z M784,686 L799,640 L839,668 L823,715 Z M823,715 L873,715 L888,762 L839,762 Z M863,686 L912,686 L928,640 L878,640 Z M808,762 L768,791 L784,838 L823,809 Z M873,715 L912,686 L928,733 L888,762 Z M888,762 L928,791 L968,762 L928,733 Z M912,686 L928,640 L968,668 L952,715 Z M912,593 L952,564 L968,611 L928,640 Z M977,640 L1017,668 L1057,640 L1017,611 Z M1017,611 L1032,564 L1072,593 L1057,640 Z M952,564 L1002,564 L1017,611 L968,611 Z M952,564 L1002,564 L1017,517 L968,517 Z M952,470 L1002,470 L1017,517 L968,517 Z M912,441 L928,394 L888,365 L873,412 Z M912,441 L962,441 L977,394 L928,394 Z M888,517 L928,546 L968,517 L928,488 Z M873,470 L912,441 L928,488 L888,517 Z M873,564 L888,517 L928,546 L912,593 Z M823,564 L873,564 L888,517 L839,517 Z M784,593 L823,564 L839,611 L799,640 Z M784,593 L744,564 L784,535 L823,564 Z M863,593 L912,593 L928,640 L878,640 Z M799,640 L839,668 L878,640 L839,611 Z M719,640 L679,668 L695,715 L734,686 Z M719,640 L679,611 L640,640 L679,668 Z M719,640 L734,593 L695,564 L679,611 Z M719,640 L768,640 L784,686 L734,686 Z M719,640 L768,640 L784,593 L734,593 Z M962,441 L977,394 L1017,423 L1002,470 Z M1002,470 L1041,441 L1057,488 L1017,517 Z M977,394 L1017,423 L1057,394 L1017,365 Z M590,733 L640,733 L655,686 L605,686 Z M535,715 L550,668 L511,640 L495,686 Z M535,715 L486,715 L501,762 L550,762 Z M511,791 L461,791 L446,838 L495,838 Z M486,715 L446,744 L461,791 L501,762 Z M486,715 L446,686 L406,715 L446,744 Z M461,791 L446,838 L406,809 L422,762 Z M446,838 L406,867 L422,914 L461,885 Z M446,838 L406,809 L367,838 L406,867 Z M406,867 L357,867 L342,914 L391,914 Z M495,838 L446,838 L461,885 L511,885 Z M317,838 L268,838 L253,885 L302,885 Z M357,867 L342,914 L302,885 L317,838 Z M302,885 L262,914 L277,960 L317,931 Z M268,838 L253,885 L213,856 L228,809 Z M253,885 L213,856 L173,885 L213,914 Z M213,914 L198,960 L158,931 L173,885 Z M158,838 L109,838 L124,885 L173,885 Z M109,838 L69,867 L84,914 L124,885 Z M124,791 L109,838 L69,809 L84,762 Z M198,960 L158,989 L173,1036 L213,1007 Z M198,960 L158,931 L118,960 L158,989 Z M253,1036 L213,1007 L173,1036 L213,1065 Z M262,1065 L213,1065 L228,1112 L277,1112 Z M302,1036 L262,1065 L277,1112 L317,1083 Z M317,989 L302,1036 L262,1007 L277,960 Z M351,1036 L302,1036 L317,1083 L367,1083 Z M391,1007 L351,1036 L367,1083 L406,1054 Z M406,960 L357,960 L342,1007 L391,1007 Z M391,914 L342,914 L357,960 L406,960 Z M446,989 L431,1036 L391,1007 L406,960 Z M357,960 L317,931 L277,960 L317,989 Z M277,960 L228,960 L213,1007 L262,1007 Z M262,914 L213,914 L228,960 L277,960 Z M486,960 L446,931 L406,960 L446,989 Z M495,989 L446,989 L461,1036 L511,1036 Z M511,1036 L495,1083 L535,1112 L550,1065 Z M511,1036 L461,1036 L446,1083 L495,1083 Z M535,960 L495,989 L511,1036 L550,1007 Z M550,1007 L590,1036 L550,1065 L511,1036 Z M590,1036 L640,1036 L655,1083 L605,1083 Z M605,1083 L655,1083 L640,1130 L590,1130 Z M575,1083 L535,1112 L550,1159 L590,1130 Z M605,989 L655,989 L640,1036 L590,1036 Z M655,1083 L640,1130 L679,1159 L695,1112 Z M679,1007 L719,1036 L679,1065 L640,1036 Z M695,1112 L744,1112 L729,1159 L679,1159 Z M719,1036 L679,1065 L695,1112 L734,1083 Z M719,1036 L768,1036 L784,1083 L734,1083 Z M734,989 L784,989 L768,1036 L719,1036 Z M784,1083 L768,1130 L808,1159 L823,1112 Z M823,1054 L863,1083 L823,1112 L784,1083 Z M823,1112 L873,1112 L888,1159 L839,1159 Z M768,1130 L808,1159 L768,1188 L729,1159 Z M808,1159 L768,1188 L784,1235 L823,1206 Z M679,1159 L640,1188 L655,1235 L695,1206 Z M679,1159 L729,1159 L744,1206 L695,1206 Z M590,1188 L640,1188 L655,1235 L605,1235 Z M550,1159 L535,1206 L575,1235 L590,1188 Z M550,1159 L501,1159 L486,1206 L535,1206 Z M461,1130 L501,1159 L461,1188 L422,1159 Z M446,1083 L406,1112 L422,1159 L461,1130 Z M446,1083 L406,1054 L367,1083 L406,1112 Z M422,1159 L406,1206 L446,1235 L461,1188 Z M406,1112 L357,1112 L342,1159 L391,1159 Z M391,1159 L342,1159 L357,1206 L406,1206 Z M357,1112 L342,1159 L302,1130 L317,1083 Z M535,1112 L486,1112 L501,1159 L550,1159 Z M590,1130 L630,1159 L590,1188 L550,1159 Z M839,1159 L888,1159 L873,1206 L823,1206 Z M928,1130 L968,1159 L928,1188 L888,1159 Z M912,1083 L873,1112 L888,1159 L928,1130 Z M968,1065 L1017,1065 L1002,1112 L952,1112 Z M1057,1036 L1017,1065 L1032,1112 L1072,1083 Z M1017,1007 L1057,1036 L1017,1065 L977,1036 Z M928,1036 L912,1083 L952,1112 L968,1065 Z M878,1036 L928,1036 L912,1083 L863,1083 Z M1146,914 L1185,885 L1201,931 L1161,960 Z M1112,960 L1161,960 L1146,1007 L1096,1007 Z M1096,914 L1146,914 L1161,960 L1112,960 Z M1106,885 L1121,838 L1161,867 L1146,914 Z M1121,838 L1161,867 L1201,838 L1161,809 Z M501,914 L486,960 L446,931 L461,885 Z M495,686 L446,686 L461,640 L511,640 Z M495,593 L446,593 L461,640 L511,640 Z M535,564 L495,593 L511,640 L550,611 Z M535,564 L486,564 L501,517 L550,517 Z M486,564 L446,535 L406,564 L446,593 Z M486,564 L501,517 L461,488 L446,535 Z M839,365 L888,365 L873,319 L823,319 Z M784,348 L744,319 L784,290 L823,319 Z M734,290 L784,290 L768,243 L719,243 Z M719,243 L734,196 L695,167 L679,214 Z M719,243 L768,243 L784,196 L734,196 Z M695,319 L734,290 L719,243 L679,272 Z M679,272 L640,243 L679,214 L719,243 Z M605,290 L655,290 L640,243 L590,243 Z M590,243 L640,243 L655,196 L605,196 Z M550,272 L511,243 L550,214 L590,243 Z M495,290 L446,290 L461,243 L511,243 Z M446,290 L406,319 L391,272 L431,243 Z M406,319 L357,319 L342,272 L391,272 Z M357,319 L317,290 L277,319 L317,348 Z M262,365 L213,365 L228,319 L277,319 Z M511,488 L461,488 L446,441 L495,441 Z ")},S4={name:"Penrose14",thinShape:new Yt("M676,613 L691,569 L654,596 L640,640 Z M676,666 L640,640 L654,683 L691,710 Z M580,596 L543,569 L557,613 L594,640 Z M580,596 L594,553 L608,596 L594,640 Z M580,683 L594,640 L608,683 L594,726 Z M580,683 L594,640 L557,666 L543,710 Z M631,526 L676,526 L640,553 L594,553 Z M631,526 L676,526 L640,499 L594,499 Z M557,526 L520,499 L506,455 L543,482 Z M557,526 L511,526 L474,499 L520,499 Z M676,526 L691,482 L728,455 L713,499 Z M676,526 L722,526 L759,499 L713,499 Z M796,526 L759,499 L773,542 L810,569 Z M796,526 L810,482 L824,526 L810,569 Z M759,412 L773,368 L810,342 L796,385 Z M810,428 L824,385 L810,342 L796,385 Z M810,482 L856,482 L893,455 L847,455 Z M728,455 L691,428 L676,385 L713,412 Z M713,412 L759,412 L722,385 L676,385 Z M594,412 L640,412 L676,385 L631,385 Z M594,499 L608,455 L594,412 L580,455 Z M543,428 L557,385 L520,412 L506,455 Z M557,385 L511,385 L474,412 L520,412 Z M543,342 L557,298 L594,271 L580,315 Z M543,342 L497,342 L460,315 L506,315 Z M594,358 L608,315 L594,271 L580,315 Z M474,412 L437,385 L423,342 L460,368 Z M423,482 L377,482 L340,455 L386,455 Z M423,428 L437,385 L423,342 L409,385 Z M423,428 L377,428 L340,455 L386,455 Z M363,385 L377,342 L340,368 L326,412 Z M340,455 L295,455 L258,482 L303,482 Z M326,412 L280,412 L243,385 L289,385 Z M326,499 L340,455 L303,482 L289,526 Z M258,482 L221,455 L206,412 L243,439 Z M206,499 L221,455 L206,412 L192,455 Z M206,499 L161,499 L124,526 L170,526 Z M229,569 L243,526 L206,553 L192,596 Z M340,596 L303,569 L289,526 L326,553 Z M423,569 L437,526 L423,482 L409,526 Z M423,569 L377,569 L340,596 L386,596 Z M460,542 L474,499 L437,526 L423,569 Z M409,613 L423,569 L386,596 L372,640 Z M446,640 L460,596 L474,640 L460,683 Z M409,666 L372,640 L386,683 L423,710 Z M423,710 L409,753 L423,797 L437,753 Z M423,710 L377,710 L340,683 L386,683 Z M460,737 L423,710 L437,753 L474,780 Z M340,683 L326,726 L289,753 L303,710 Z M326,780 L289,753 L303,797 L340,824 Z M229,710 L192,683 L206,726 L243,753 Z M258,797 L243,840 L206,867 L221,824 Z M206,780 L192,824 L206,867 L221,824 Z M206,780 L161,780 L124,753 L170,753 Z M243,666 L229,710 L243,753 L258,710 Z M326,640 L280,640 L243,666 L289,666 Z M326,640 L280,640 L243,613 L289,613 Z M243,613 L258,569 L243,526 L229,569 Z M192,596 L147,596 L110,569 L155,569 Z M192,683 L147,683 L110,710 L155,710 Z M161,640 L124,613 L110,569 L147,596 Z M161,640 L147,683 L110,710 L124,666 Z M124,753 L110,797 L73,824 L87,780 Z M73,737 L59,780 L73,824 L87,780 Z M87,640 L73,683 L59,640 L73,596 Z M73,542 L87,499 L73,455 L59,499 Z M73,455 L87,412 L73,368 L59,412 Z M124,526 L87,499 L73,455 L110,482 Z M110,428 L124,385 L87,412 L73,455 Z M206,412 L170,385 L155,342 L192,368 Z M206,412 L161,412 L124,385 L170,385 Z M243,385 L258,342 L243,298 L229,342 Z M206,271 L161,271 L124,298 L170,298 Z M243,244 L258,201 L243,157 L229,201 Z M192,315 L206,271 L170,298 L155,342 Z M326,271 L280,271 L243,298 L289,298 Z M326,271 L280,271 L243,244 L289,244 Z M340,228 L303,201 L289,157 L326,184 Z M409,298 L363,298 L326,271 L372,271 Z M423,201 L437,157 L423,114 L409,157 Z M423,201 L377,201 L340,228 L386,228 Z M460,228 L474,184 L511,157 L497,201 Z M446,271 L460,228 L423,255 L409,298 Z M506,228 L460,228 L497,201 L543,201 Z M543,114 L557,70 L594,44 L580,87 Z M543,114 L497,114 L460,87 L506,87 Z M594,130 L608,87 L594,44 L580,87 Z M594,184 L639,184 L676,157 L631,157 Z M511,157 L474,130 L460,87 L497,114 Z M423,114 L377,114 L340,87 L386,87 Z M326,130 L340,87 L303,114 L289,157 Z M229,201 L243,157 L206,184 L192,228 Z M691,114 L654,87 L639,44 L676,70 Z M691,114 L736,114 L773,87 L728,87 Z M810,114 L856,114 L893,87 L847,87 Z M722,157 L736,114 L773,87 L759,130 Z M810,201 L824,157 L810,114 L796,157 Z M773,228 L736,201 L722,157 L759,184 Z M728,228 L773,228 L736,201 L691,201 Z M640,271 L654,228 L691,201 L676,244 Z M594,271 L557,244 L543,201 L580,228 Z M594,271 L608,228 L594,184 L580,228 Z M631,157 L676,157 L639,130 L594,130 Z M691,342 L654,315 L640,271 L676,298 Z M691,342 L736,342 L773,315 L728,315 Z M773,315 L787,271 L773,228 L759,271 Z M824,298 L787,271 L773,228 L810,255 Z M824,298 L870,298 L907,271 L861,271 Z M856,342 L870,298 L907,271 L893,315 Z M907,271 L953,271 L990,244 L944,244 Z M893,228 L907,184 L944,157 L930,201 Z M944,298 L990,298 L953,271 L907,271 Z M990,244 L1004,201 L990,157 L976,201 Z M1027,271 L1073,271 L1109,298 L1064,298 Z M990,385 L1004,342 L990,298 L976,342 Z M907,412 L870,385 L856,342 L893,368 Z M907,412 L953,412 L990,385 L944,385 Z M893,455 L930,482 L944,526 L907,499 Z M893,455 L939,455 L976,482 L930,482 Z M976,482 L990,439 L1027,412 L1013,455 Z M990,526 L1027,553 L1041,596 L1004,569 Z M1013,455 L1027,412 L1041,455 L1027,499 Z M893,596 L907,553 L944,526 L930,569 Z M976,569 L990,526 L1004,569 L990,613 Z M1041,596 L1087,596 L1124,569 L1078,569 Z M1073,640 L1109,666 L1124,710 L1087,683 Z M1073,640 L1087,596 L1124,569 L1109,613 Z M1146,640 L1161,596 L1175,640 L1161,683 Z M1161,683 L1206,683 L1243,710 L1198,710 Z M1161,596 L1206,596 L1243,569 L1198,569 Z M1206,455 L1243,482 L1257,526 L1220,499 Z M1161,542 L1206,542 L1243,569 L1198,569 Z M1146,499 L1161,455 L1175,499 L1161,542 Z M1109,526 L1124,482 L1161,455 L1146,499 Z M1027,499 L1073,499 L1109,526 L1064,526 Z M1027,412 L1041,368 L1078,342 L1064,385 Z M1027,412 L1073,412 L1109,385 L1064,385 Z M1109,385 L1146,412 L1161,455 L1124,428 Z M1146,412 L1161,368 L1175,412 L1161,455 Z M1041,315 L1078,342 L1064,298 L1027,271 Z M1041,228 L1004,201 L990,157 L1027,184 Z M944,157 L907,130 L893,87 L930,114 Z M1161,737 L1206,737 L1243,710 L1198,710 Z M1146,780 L1161,737 L1175,780 L1161,824 Z M1109,753 L1146,780 L1161,824 L1124,797 Z M1027,780 L1073,780 L1109,753 L1064,753 Z M1041,683 L1087,683 L1124,710 L1078,710 Z M990,753 L1004,710 L1041,683 L1027,726 Z M976,710 L990,666 L1004,710 L990,753 Z M976,797 L1013,824 L1027,867 L990,840 Z M893,824 L907,780 L944,753 L930,797 Z M893,824 L939,824 L976,797 L930,797 Z M907,867 L893,911 L856,937 L870,894 Z M907,867 L953,867 L990,894 L944,894 Z M847,824 L893,824 L856,851 L810,851 Z M990,894 L976,937 L990,981 L1004,937 Z M1027,867 L1064,894 L1078,937 L1041,911 Z M1027,867 L1073,867 L1109,894 L1064,894 Z M944,981 L990,981 L953,1008 L907,1008 Z M856,937 L893,964 L907,1008 L870,981 Z M824,981 L810,1024 L773,1051 L787,1008 Z M824,981 L870,981 L907,1008 L861,1008 Z M773,964 L759,1008 L773,1051 L787,1008 Z M810,851 L796,894 L810,937 L824,894 Z M810,797 L856,797 L893,824 L847,824 Z M759,867 L796,894 L810,937 L773,911 Z M728,824 L713,867 L676,894 L691,851 Z M713,867 L759,867 L722,894 L676,894 Z M691,937 L676,981 L640,1008 L654,964 Z M691,937 L736,937 L773,964 L728,964 Z M631,894 L676,894 L640,921 L594,921 Z M594,921 L580,964 L594,1008 L608,964 Z M594,867 L640,867 L676,894 L631,894 Z M557,894 L511,894 L474,867 L520,867 Z M594,780 L580,824 L594,867 L608,824 Z M676,753 L713,780 L728,824 L691,797 Z M676,753 L722,753 L759,780 L713,780 Z M631,753 L676,753 L640,780 L594,780 Z M631,753 L676,753 L640,726 L594,726 Z M810,710 L824,666 L861,640 L847,683 Z M810,710 L856,710 L893,683 L847,683 Z M796,753 L810,710 L824,753 L810,797 Z M796,753 L810,710 L773,737 L759,780 Z M893,683 L930,710 L944,753 L907,726 Z M907,640 L953,640 L990,613 L944,613 Z M907,640 L953,640 L990,666 L944,666 Z M810,569 L847,596 L861,640 L824,613 Z M810,569 L856,569 L893,596 L847,596 Z M759,640 L773,596 L787,640 L773,683 Z M728,596 L773,596 L736,569 L691,569 Z M728,683 L773,683 L736,710 L691,710 Z M557,753 L543,797 L506,824 L520,780 Z M557,753 L511,753 L474,780 L520,780 Z M543,710 L497,710 L460,683 L506,683 Z M474,867 L460,911 L423,937 L437,894 Z M423,851 L409,894 L423,937 L437,894 Z M423,851 L377,851 L340,824 L386,824 Z M423,797 L377,797 L340,824 L386,824 Z M543,851 L506,824 L520,867 L557,894 Z M340,824 L295,824 L258,797 L303,797 Z M326,867 L280,867 L243,894 L289,894 Z M243,894 L229,937 L243,981 L258,937 Z M206,867 L192,911 L155,937 L170,894 Z M206,867 L161,867 L124,894 L170,894 Z M110,851 L73,824 L87,867 L124,894 Z M192,964 L155,937 L170,981 L206,1008 Z M206,1008 L161,1008 L124,981 L170,981 Z M326,1008 L280,1008 L243,1035 L289,1035 Z M326,1008 L280,1008 L243,981 L289,981 Z M377,937 L363,981 L326,1008 L340,964 Z M363,894 L326,867 L340,911 L377,937 Z M460,964 L446,1008 L460,1051 L474,1008 Z M409,981 L363,981 L326,1008 L372,1008 Z M446,1008 L409,981 L423,1024 L460,1051 Z M460,1051 L497,1078 L511,1122 L474,1095 Z M423,1078 L409,1122 L423,1165 L437,1122 Z M423,1078 L377,1078 L340,1051 L386,1051 Z M506,1051 L460,1051 L497,1078 L543,1078 Z M594,1008 L580,1051 L594,1095 L608,1051 Z M594,1008 L580,1051 L543,1078 L557,1035 Z M640,1008 L676,1035 L691,1078 L654,1051 Z M728,1051 L773,1051 L736,1078 L691,1078 Z M773,1051 L759,1095 L722,1122 L736,1078 Z M810,1078 L796,1122 L810,1165 L824,1122 Z M722,1122 L759,1149 L773,1192 L736,1165 Z M810,1165 L856,1165 L893,1192 L847,1192 Z M691,1165 L676,1209 L640,1235 L654,1192 Z M691,1165 L736,1165 L773,1192 L728,1192 Z M594,1149 L580,1192 L594,1235 L608,1192 Z M631,1122 L676,1122 L640,1149 L594,1149 Z M594,1095 L640,1095 L676,1122 L631,1122 Z M543,1165 L580,1192 L594,1235 L557,1209 Z M543,1165 L497,1165 L460,1192 L506,1192 Z M511,1122 L497,1165 L460,1192 L474,1149 Z M423,1165 L377,1165 L340,1192 L386,1192 Z M326,1149 L289,1122 L303,1165 L340,1192 Z M229,1078 L192,1051 L206,1095 L243,1122 Z M243,1035 L229,1078 L243,1122 L258,1078 Z M340,1051 L326,1095 L289,1122 L303,1078 Z M944,1122 L930,1165 L893,1192 L907,1149 Z M893,1051 L930,1078 L944,1122 L907,1095 Z M907,1008 L953,1008 L990,1035 L944,1035 Z M847,1051 L893,1051 L856,1078 L810,1078 Z M990,1035 L976,1078 L990,1122 L1004,1078 Z M1027,1008 L1073,1008 L1109,981 L1064,981 Z M1041,1051 L1027,1095 L990,1122 L1004,1078 Z M1041,964 L1027,1008 L1064,981 L1078,937 Z M1109,894 L1124,851 L1161,824 L1146,867 Z M1146,867 L1161,824 L1175,867 L1161,911 Z M1206,824 L1220,780 L1257,753 L1243,797 Z M543,937 L580,964 L594,1008 L557,981 Z M543,937 L497,937 L460,964 L506,964 Z M73,824 L59,867 L73,911 L87,867 Z M543,569 L497,569 L460,596 L506,596 Z M1013,824 L1027,780 L1041,824 L1027,867 Z M847,455 L893,455 L856,428 L810,428 Z M847,228 L893,228 L856,201 L810,201 Z M460,315 L474,271 L460,228 L446,271 Z M377,342 L340,315 L326,271 L363,298 Z M631,385 L676,385 L640,358 L594,358 Z "),thickShape:new Yt("M594,640 L557,613 L520,640 L557,666 Z M594,640 L640,640 L654,683 L608,683 Z M594,640 L640,640 L654,596 L608,596 Z M580,596 L594,553 L557,526 L543,569 Z M580,683 L543,710 L557,753 L594,726 Z M594,553 L640,553 L654,596 L608,596 Z M631,526 L594,499 L557,526 L594,553 Z M676,526 L640,553 L654,596 L691,569 Z M676,526 L691,482 L654,455 L640,499 Z M676,526 L722,526 L736,569 L691,569 Z M713,499 L759,499 L773,455 L728,455 Z M691,482 L654,455 L691,428 L728,455 Z M722,526 L759,499 L773,542 L736,569 Z M796,526 L810,482 L773,455 L759,499 Z M773,455 L810,428 L796,385 L759,412 Z M759,412 L773,368 L736,342 L722,385 Z M810,428 L856,428 L870,385 L824,385 Z M810,482 L773,455 L810,428 L847,455 Z M810,482 L856,482 L870,526 L824,526 Z M728,455 L773,455 L759,412 L713,412 Z M676,385 L691,342 L654,315 L640,358 Z M676,385 L722,385 L736,342 L691,342 Z M654,455 L691,428 L676,385 L640,412 Z M608,455 L654,455 L640,412 L594,412 Z M594,412 L557,385 L594,358 L631,385 Z M594,499 L557,526 L543,482 L580,455 Z M594,499 L640,499 L654,455 L608,455 Z M580,455 L543,428 L506,455 L543,482 Z M580,455 L594,412 L557,385 L543,428 Z M506,455 L460,455 L474,412 L520,412 Z M557,385 L594,358 L580,315 L543,342 Z M557,385 L511,385 L497,342 L543,342 Z M543,342 L557,298 L520,271 L506,315 Z M594,358 L640,358 L654,315 L608,315 Z M511,385 L474,412 L460,368 L497,342 Z M497,342 L460,315 L423,342 L460,368 Z M460,455 L423,428 L386,455 L423,482 Z M460,455 L474,412 L437,385 L423,428 Z M474,499 L437,526 L423,482 L460,455 Z M423,428 L377,428 L363,385 L409,385 Z M409,385 L363,385 L377,342 L423,342 Z M377,428 L340,455 L326,412 L363,385 Z M340,455 L295,455 L280,412 L326,412 Z M326,412 L340,368 L303,342 L289,385 Z M295,455 L258,482 L243,439 L280,412 Z M280,412 L243,385 L206,412 L243,439 Z M243,526 L206,499 L170,526 L206,553 Z M243,526 L258,482 L221,455 L206,499 Z M206,499 L161,499 L147,455 L192,455 Z M289,526 L243,526 L258,482 L303,482 Z M303,569 L258,569 L243,526 L289,526 Z M363,526 L326,499 L289,526 L326,553 Z M363,526 L377,482 L340,455 L326,499 Z M377,569 L340,596 L326,553 L363,526 Z M409,526 L363,526 L377,482 L423,482 Z M423,569 L377,569 L363,526 L409,526 Z M372,640 L326,640 L340,683 L386,683 Z M372,640 L326,640 L340,596 L386,596 Z M446,640 L409,666 L423,710 L460,683 Z M446,640 L409,613 L372,640 L409,666 Z M446,640 L460,596 L423,569 L409,613 Z M423,710 L377,710 L363,753 L409,753 Z M409,753 L363,753 L377,797 L423,797 Z M377,710 L363,753 L326,726 L340,683 Z M363,753 L326,780 L340,824 L377,797 Z M363,753 L326,726 L289,753 L326,780 Z M289,753 L243,753 L258,797 L303,797 Z M303,710 L258,710 L243,753 L289,753 Z M243,753 L206,780 L221,824 L258,797 Z M243,753 L206,726 L170,753 L206,780 Z M206,780 L161,780 L147,824 L192,824 Z M243,666 L229,710 L192,683 L206,640 Z M280,640 L243,613 L206,640 L243,666 Z M206,640 L161,640 L147,596 L192,596 Z M206,640 L161,640 L147,683 L192,683 Z M289,666 L243,666 L258,710 L303,710 Z M326,640 L289,666 L303,710 L340,683 Z M326,640 L340,596 L303,569 L289,613 Z M289,613 L243,613 L258,569 L303,569 Z M243,613 L206,640 L192,596 L229,569 Z M192,596 L206,553 L170,526 L155,569 Z M192,683 L155,710 L170,753 L206,726 Z M161,640 L124,613 L87,640 L124,666 Z M124,666 L110,710 L73,683 L87,640 Z M124,613 L87,640 L73,596 L110,569 Z M110,710 L73,737 L87,780 L124,753 Z M110,710 L73,683 L36,710 L73,737 Z M73,683 L27,683 L13,640 L59,640 Z M155,710 L110,710 L124,753 L170,753 Z M73,596 L27,596 L13,640 L59,640 Z M110,569 L73,542 L36,569 L73,596 Z M110,569 L124,526 L87,499 L73,542 Z M161,499 L124,526 L110,482 L147,455 Z M155,569 L110,569 L124,526 L170,526 Z M147,455 L110,428 L73,455 L110,482 Z M147,455 L161,412 L124,385 L110,428 Z M192,455 L147,455 L161,412 L206,412 Z M243,385 L206,412 L192,368 L229,342 Z M170,385 L124,385 L110,342 L155,342 Z M155,342 L110,342 L124,298 L170,298 Z M124,385 L87,412 L73,368 L110,342 Z M243,244 L206,271 L192,228 L229,201 Z M229,342 L192,315 L155,342 L192,368 Z M229,342 L243,298 L206,271 L192,315 Z M280,271 L243,244 L206,271 L243,298 Z M303,342 L258,342 L243,298 L289,298 Z M326,271 L340,228 L303,201 L289,244 Z M340,315 L303,342 L289,298 L326,271 Z M289,244 L243,244 L258,201 L303,201 Z M372,271 L326,271 L340,228 L386,228 Z M409,298 L423,255 L386,228 L372,271 Z M423,201 L377,201 L363,157 L409,157 Z M460,228 L423,201 L386,228 L423,255 Z M460,228 L474,184 L437,157 L423,201 Z M474,184 L437,157 L474,130 L511,157 Z M520,271 L557,244 L543,201 L506,228 Z M520,271 L474,271 L460,228 L506,228 Z M543,201 L497,201 L511,157 L557,157 Z M580,228 L594,184 L557,157 L543,201 Z M557,157 L594,130 L580,87 L543,114 Z M557,157 L511,157 L497,114 L543,114 Z M543,114 L557,70 L520,44 L506,87 Z M594,130 L639,130 L654,87 L608,87 Z M594,184 L557,157 L594,130 L631,157 Z M437,157 L474,130 L460,87 L423,114 Z M423,114 L386,87 L423,60 L460,87 Z M409,157 L363,157 L377,114 L423,114 Z M363,157 L326,130 L289,157 L326,184 Z M363,157 L377,114 L340,87 L326,130 Z M377,201 L340,228 L326,184 L363,157 Z M303,201 L258,201 L243,157 L289,157 Z M506,87 L460,87 L474,44 L520,44 Z M557,70 L520,44 L557,17 L594,44 Z M608,87 L654,87 L639,44 L594,44 Z M676,70 L639,44 L676,17 L713,44 Z M691,114 L728,87 L713,44 L676,70 Z M728,87 L773,87 L759,44 L713,44 Z M810,114 L773,87 L810,60 L847,87 Z M796,157 L810,114 L773,87 L759,130 Z M810,201 L856,201 L870,157 L824,157 Z M759,184 L722,157 L759,130 L796,157 Z M773,228 L810,201 L796,157 L759,184 Z M810,255 L773,228 L810,201 L847,228 Z M691,201 L736,201 L722,157 L676,157 Z M713,271 L728,228 L691,201 L676,244 Z M713,271 L759,271 L773,228 L728,228 Z M728,315 L773,315 L759,271 L713,271 Z M676,298 L640,271 L676,244 L713,271 Z M654,228 L691,201 L676,157 L639,184 Z M594,271 L640,271 L654,228 L608,228 Z M608,315 L654,315 L640,271 L594,271 Z M557,298 L520,271 L557,244 L594,271 Z M608,228 L654,228 L639,184 L594,184 Z M676,157 L691,114 L654,87 L639,130 Z M676,157 L722,157 L736,114 L691,114 Z M691,342 L728,315 L713,271 L676,298 Z M773,368 L736,342 L773,315 L810,342 Z M810,342 L824,298 L787,271 L773,315 Z M810,342 L856,342 L870,298 L824,298 Z M824,385 L870,385 L856,342 L810,342 Z M824,298 L861,271 L847,228 L810,255 Z M893,368 L856,342 L893,315 L930,342 Z M907,271 L944,244 L930,201 L893,228 Z M893,228 L907,184 L870,157 L856,201 Z M944,244 L990,244 L976,201 L930,201 Z M861,271 L907,271 L893,228 L847,228 Z M990,298 L953,271 L990,244 L1027,271 Z M1004,342 L1041,315 L1027,271 L990,298 Z M1004,342 L1041,368 L1078,342 L1041,315 Z M1027,271 L1041,228 L1004,201 L990,244 Z M1027,271 L1073,271 L1087,228 L1041,228 Z M990,385 L1004,342 L1041,368 L1027,412 Z M930,342 L944,298 L907,271 L893,315 Z M930,342 L976,342 L990,298 L944,298 Z M944,385 L990,385 L976,342 L930,342 Z M907,412 L944,385 L930,342 L893,368 Z M893,455 L907,412 L870,385 L856,428 Z M893,455 L939,455 L953,412 L907,412 Z M953,412 L990,439 L1027,412 L990,385 Z M939,455 L953,412 L990,439 L976,482 Z M976,482 L1013,455 L1027,499 L990,526 Z M990,526 L1027,553 L1064,526 L1027,499 Z M930,482 L976,482 L990,526 L944,526 Z M930,569 L976,569 L990,613 L944,613 Z M930,569 L976,569 L990,526 L944,526 Z M893,596 L930,569 L944,613 L907,640 Z M990,613 L1004,569 L1041,596 L1027,640 Z M953,640 L990,666 L1027,640 L990,613 Z M1027,640 L1073,640 L1087,683 L1041,683 Z M1027,640 L1073,640 L1087,596 L1041,596 Z M1027,553 L1064,526 L1078,569 L1041,596 Z M1124,569 L1161,596 L1198,569 L1161,542 Z M1073,640 L1109,666 L1146,640 L1109,613 Z M1109,613 L1124,569 L1161,596 L1146,640 Z M1109,666 L1146,640 L1161,683 L1124,710 Z M1124,710 L1161,737 L1198,710 L1161,683 Z M1161,683 L1206,683 L1220,640 L1175,640 Z M1161,596 L1206,596 L1220,640 L1175,640 Z M1206,596 L1243,569 L1257,613 L1220,640 Z M1206,542 L1220,499 L1257,526 L1243,569 Z M1161,455 L1206,455 L1220,499 L1175,499 Z M1161,455 L1206,455 L1220,412 L1175,412 Z M1161,542 L1206,542 L1220,499 L1175,499 Z M1109,526 L1146,499 L1161,542 L1124,569 Z M1073,499 L1087,455 L1124,482 L1109,526 Z M1064,526 L1109,526 L1124,569 L1078,569 Z M1027,499 L1073,499 L1087,455 L1041,455 Z M1027,412 L1073,412 L1087,455 L1041,455 Z M1087,455 L1124,482 L1161,455 L1124,428 Z M1073,412 L1109,385 L1124,428 L1087,455 Z M1109,385 L1124,342 L1161,368 L1146,412 Z M1124,342 L1161,315 L1146,271 L1109,298 Z M1124,342 L1161,368 L1198,342 L1161,315 Z M1064,385 L1109,385 L1124,342 L1078,342 Z M1078,342 L1124,342 L1109,298 L1064,298 Z M1073,271 L1087,228 L1124,255 L1109,298 Z M944,157 L990,157 L976,114 L930,114 Z M907,184 L870,157 L907,130 L944,157 Z M930,201 L976,201 L990,157 L944,157 Z M870,157 L907,130 L893,87 L856,114 Z M824,157 L870,157 L856,114 L810,114 Z M1161,368 L1206,368 L1220,412 L1175,412 Z M1206,683 L1220,640 L1257,666 L1243,710 Z M1206,737 L1243,710 L1257,753 L1220,780 Z M1161,737 L1206,737 L1220,780 L1175,780 Z M1161,824 L1206,824 L1220,867 L1175,867 Z M1161,824 L1206,824 L1220,780 L1175,780 Z M1109,753 L1124,710 L1161,737 L1146,780 Z M1073,780 L1109,753 L1124,797 L1087,824 Z M1064,753 L1109,753 L1124,710 L1078,710 Z M1027,780 L1073,780 L1087,824 L1041,824 Z M1027,726 L1041,683 L1078,710 L1064,753 Z M990,666 L1027,640 L1041,683 L1004,710 Z M990,753 L1027,780 L1064,753 L1027,726 Z M976,797 L990,753 L1027,780 L1013,824 Z M930,710 L976,710 L990,753 L944,753 Z M930,710 L976,710 L990,666 L944,666 Z M930,797 L976,797 L990,753 L944,753 Z M893,824 L856,851 L870,894 L907,867 Z M893,824 L939,824 L953,867 L907,867 Z M907,867 L893,911 L930,937 L944,894 Z M856,797 L870,753 L907,780 L893,824 Z M939,824 L976,797 L990,840 L953,867 Z M953,867 L990,894 L1027,867 L990,840 Z M990,894 L1027,867 L1041,911 L1004,937 Z M1004,937 L1041,964 L1078,937 L1041,911 Z M1004,937 L990,981 L1027,1008 L1041,964 Z M1027,867 L1073,867 L1087,824 L1041,824 Z M944,894 L990,894 L976,937 L930,937 Z M930,937 L893,964 L907,1008 L944,981 Z M930,937 L976,937 L990,981 L944,981 Z M893,911 L930,937 L893,964 L856,937 Z M810,937 L773,964 L787,1008 L824,981 Z M810,937 L856,937 L870,981 L824,981 Z M824,981 L810,1024 L847,1051 L861,1008 Z M773,911 L810,937 L773,964 L736,937 Z M824,894 L870,894 L856,937 L810,937 Z M810,851 L856,851 L870,894 L824,894 Z M773,824 L759,867 L796,894 L810,851 Z M810,797 L847,824 L810,851 L773,824 Z M810,797 L856,797 L870,753 L824,753 Z M759,867 L722,894 L736,937 L773,911 Z M728,824 L773,824 L759,867 L713,867 Z M713,780 L759,780 L773,824 L728,824 Z M691,797 L728,824 L691,851 L654,824 Z M676,894 L640,921 L654,964 L691,937 Z M676,894 L722,894 L736,937 L691,937 Z M691,937 L676,981 L713,1008 L728,964 Z M594,921 L640,921 L654,964 L608,964 Z M594,867 L631,894 L594,921 L557,894 Z M580,824 L543,851 L557,894 L594,867 Z M580,824 L543,797 L506,824 L543,851 Z M557,894 L543,937 L580,964 L594,921 Z M557,894 L511,894 L497,937 L543,937 Z M608,824 L654,824 L640,867 L594,867 Z M594,780 L580,824 L543,797 L557,753 Z M594,780 L640,780 L654,824 L608,824 Z M654,824 L640,867 L676,894 L691,851 Z M676,753 L640,780 L654,824 L691,797 Z M676,753 L691,710 L654,683 L640,726 Z M676,753 L722,753 L736,710 L691,710 Z M631,753 L594,726 L557,753 L594,780 Z M722,753 L736,710 L773,737 L759,780 Z M773,683 L810,710 L773,737 L736,710 Z M773,683 L787,640 L824,666 L810,710 Z M810,710 L856,710 L870,753 L824,753 Z M847,683 L893,683 L907,640 L861,640 Z M796,753 L759,780 L773,824 L810,797 Z M856,710 L893,683 L907,726 L870,753 Z M870,753 L907,780 L944,753 L907,726 Z M893,683 L907,640 L944,666 L930,710 Z M847,596 L893,596 L907,640 L861,640 Z M810,569 L856,569 L870,526 L824,526 Z M787,640 L824,666 L861,640 L824,613 Z M773,596 L810,569 L824,613 L787,640 Z M773,596 L736,569 L773,542 L810,569 Z M713,640 L676,666 L691,710 L728,683 Z M713,640 L676,613 L640,640 L676,666 Z M713,640 L728,596 L691,569 L676,613 Z M713,640 L759,640 L773,683 L728,683 Z M713,640 L759,640 L773,596 L728,596 Z M856,569 L870,526 L907,553 L893,596 Z M870,526 L907,553 L944,526 L907,499 Z M856,482 L893,455 L907,499 L870,526 Z M594,726 L640,726 L654,683 L608,683 Z M543,710 L557,666 L520,640 L506,683 Z M543,710 L497,710 L511,753 L557,753 Z M520,780 L474,780 L460,824 L506,824 Z M497,710 L460,737 L474,780 L511,753 Z M497,710 L460,683 L423,710 L460,737 Z M474,780 L460,824 L423,797 L437,753 Z M460,824 L423,851 L437,894 L474,867 Z M460,824 L423,797 L386,824 L423,851 Z M423,851 L377,851 L363,894 L409,894 Z M506,824 L460,824 L474,867 L520,867 Z M340,824 L295,824 L280,867 L326,867 Z M377,851 L363,894 L326,867 L340,824 Z M326,867 L289,894 L303,937 L340,911 Z M295,824 L280,867 L243,840 L258,797 Z M280,867 L243,840 L206,867 L243,894 Z M243,894 L229,937 L192,911 L206,867 Z M192,824 L147,824 L161,867 L206,867 Z M170,894 L124,894 L110,937 L155,937 Z M147,824 L110,851 L124,894 L161,867 Z M147,824 L110,797 L73,824 L110,851 Z M124,894 L110,937 L73,911 L87,867 Z M155,937 L110,937 L124,981 L170,981 Z M229,937 L192,964 L206,1008 L243,981 Z M229,937 L192,911 L155,937 L192,964 Z M280,1008 L243,981 L206,1008 L243,1035 Z M326,1008 L289,1035 L303,1078 L340,1051 Z M303,937 L258,937 L243,981 L289,981 Z M289,894 L243,894 L258,937 L303,937 Z M340,964 L326,1008 L289,981 L303,937 Z M377,937 L340,911 L303,937 L340,964 Z M423,937 L377,937 L363,981 L409,981 Z M409,894 L363,894 L377,937 L423,937 Z M460,964 L446,1008 L409,981 L423,937 Z M409,981 L372,1008 L386,1051 L423,1024 Z M372,1008 L326,1008 L340,1051 L386,1051 Z M460,1051 L423,1078 L437,1122 L474,1095 Z M460,1051 L423,1024 L386,1051 L423,1078 Z M474,1095 L511,1122 L474,1149 L437,1122 Z M423,1078 L377,1078 L363,1122 L409,1122 Z M543,1078 L497,1078 L511,1122 L557,1122 Z M520,1008 L506,1051 L543,1078 L557,1035 Z M520,1008 L474,1008 L460,1051 L506,1051 Z M506,964 L460,964 L474,1008 L520,1008 Z M557,981 L594,1008 L557,1035 L520,1008 Z M594,1008 L640,1008 L654,1051 L608,1051 Z M608,1051 L654,1051 L640,1095 L594,1095 Z M580,1051 L543,1078 L557,1122 L594,1095 Z M608,964 L654,964 L640,1008 L594,1008 Z M654,1051 L640,1095 L676,1122 L691,1078 Z M676,981 L713,1008 L676,1035 L640,1008 Z M691,1078 L736,1078 L722,1122 L676,1122 Z M713,1008 L676,1035 L691,1078 L728,1051 Z M713,1008 L759,1008 L773,1051 L728,1051 Z M728,964 L773,964 L759,1008 L713,1008 Z M773,1051 L759,1095 L796,1122 L810,1078 Z M810,1024 L847,1051 L810,1078 L773,1051 Z M810,1078 L856,1078 L870,1122 L824,1122 Z M759,1095 L796,1122 L759,1149 L722,1122 Z M796,1122 L759,1149 L773,1192 L810,1165 Z M810,1165 L847,1192 L810,1219 L773,1192 Z M728,1192 L773,1192 L759,1235 L713,1235 Z M691,1165 L676,1209 L713,1235 L728,1192 Z M676,1209 L713,1235 L676,1262 L640,1235 Z M557,1209 L594,1235 L557,1262 L520,1235 Z M608,1192 L654,1192 L640,1235 L594,1235 Z M594,1149 L640,1149 L654,1192 L608,1192 Z M557,1122 L543,1165 L580,1192 L594,1149 Z M557,1122 L511,1122 L497,1165 L543,1165 Z M676,1122 L640,1149 L654,1192 L691,1165 Z M676,1122 L722,1122 L736,1165 L691,1165 Z M594,1095 L631,1122 L594,1149 L557,1122 Z M543,1165 L506,1192 L520,1235 L557,1209 Z M423,1165 L460,1192 L423,1219 L386,1192 Z M506,1192 L460,1192 L474,1235 L520,1235 Z M409,1122 L363,1122 L377,1165 L423,1165 Z M437,1122 L423,1165 L460,1192 L474,1149 Z M363,1122 L326,1149 L340,1192 L377,1165 Z M363,1122 L326,1095 L289,1122 L326,1149 Z M303,1078 L258,1078 L243,1122 L289,1122 Z M243,1035 L229,1078 L192,1051 L206,1008 Z M289,1035 L243,1035 L258,1078 L303,1078 Z M377,1078 L363,1122 L326,1095 L340,1051 Z M944,1122 L990,1122 L976,1165 L930,1165 Z M870,1122 L856,1165 L893,1192 L907,1149 Z M907,1095 L944,1122 L907,1149 L870,1122 Z M824,1122 L870,1122 L856,1165 L810,1165 Z M893,1051 L856,1078 L870,1122 L907,1095 Z M930,1078 L976,1078 L990,1122 L944,1122 Z M907,1008 L893,1051 L930,1078 L944,1035 Z M861,1008 L907,1008 L893,1051 L847,1051 Z M944,1035 L990,1035 L976,1078 L930,1078 Z M990,981 L1027,1008 L990,1035 L953,1008 Z M1027,1008 L990,1035 L1004,1078 L1041,1051 Z M1027,1008 L1073,1008 L1087,1051 L1041,1051 Z M1073,1008 L1109,981 L1124,1024 L1087,1051 Z M1124,937 L1161,964 L1198,937 L1161,911 Z M1124,937 L1109,981 L1146,1008 L1161,964 Z M1078,937 L1124,937 L1109,981 L1064,981 Z M1064,894 L1109,894 L1124,937 L1078,937 Z M1109,894 L1146,867 L1161,911 L1124,937 Z M1073,867 L1087,824 L1124,851 L1109,894 Z M1087,824 L1124,851 L1161,824 L1124,797 Z M1161,911 L1206,911 L1220,867 L1175,867 Z M543,937 L506,964 L520,1008 L557,981 Z M497,937 L460,911 L423,937 L460,964 Z M511,894 L497,937 L460,911 L474,867 Z M161,780 L147,824 L110,797 L124,753 Z M506,683 L460,683 L474,640 L520,640 Z M506,596 L460,596 L474,640 L520,640 Z M543,569 L506,596 L520,640 L557,613 Z M543,569 L497,569 L511,526 L557,526 Z M497,569 L460,542 L423,569 L460,596 Z M497,569 L511,526 L474,499 L460,542 Z M506,315 L460,315 L474,271 L520,271 Z M460,315 L423,342 L409,298 L446,271 Z M423,342 L377,342 L363,298 L409,298 Z M377,342 L340,315 L303,342 L340,368 Z M289,385 L243,385 L258,342 L303,342 Z M520,499 L474,499 L460,455 L506,455 Z ")},q4={name:"Penrose20",thinShape:new Yt("M665,621 L675,590 L649,609 L640,640 Z M665,658 L640,640 L649,670 L675,689 Z M598,609 L572,590 L582,621 L608,640 Z M598,609 L608,579 L617,609 L608,640 Z M598,670 L608,640 L617,670 L608,700 Z M598,670 L608,640 L582,658 L572,689 Z M633,560 L665,560 L640,579 L608,579 Z M633,560 L665,560 L640,541 L608,541 Z M582,560 L556,541 L546,511 L572,529 Z M582,560 L550,560 L524,541 L556,541 Z M665,560 L675,529 L701,511 L691,541 Z M665,560 L697,560 L723,541 L691,541 Z M749,560 L723,541 L733,571 L759,590 Z M749,560 L759,529 L769,560 L759,590 Z M723,480 L733,450 L759,431 L749,461 Z M759,492 L769,461 L759,431 L749,461 Z M759,529 L791,529 L817,511 L785,511 Z M701,511 L675,492 L665,461 L691,480 Z M691,480 L723,480 L697,461 L665,461 Z M608,480 L640,480 L665,461 L633,461 Z M608,541 L617,511 L608,480 L598,511 Z M572,492 L582,461 L556,480 L546,511 Z M582,461 L550,461 L524,480 L556,480 Z M572,431 L582,400 L608,382 L598,412 Z M572,431 L540,431 L514,412 L546,412 Z M608,443 L617,412 L608,382 L598,412 Z M524,480 L498,461 L488,431 L514,450 Z M488,529 L456,529 L430,511 L462,511 Z M488,492 L498,461 L488,431 L478,461 Z M488,492 L456,492 L430,511 L462,511 Z M446,461 L456,431 L430,450 L420,480 Z M430,511 L398,511 L372,529 L404,529 Z M420,480 L388,480 L362,461 L394,461 Z M420,541 L430,511 L404,529 L394,560 Z M372,529 L346,511 L336,480 L362,499 Z M336,541 L346,511 L336,480 L327,511 Z M336,541 L304,541 L279,560 L311,560 Z M352,590 L362,560 L336,579 L327,609 Z M430,609 L404,590 L394,560 L420,579 Z M488,590 L498,560 L488,529 L478,560 Z M488,590 L456,590 L430,609 L462,609 Z M514,571 L524,541 L498,560 L488,590 Z M478,621 L488,590 L462,609 L452,640 Z M504,640 L514,609 L524,640 L514,670 Z M478,658 L452,640 L462,670 L488,689 Z M488,689 L478,719 L488,750 L498,719 Z M488,689 L456,689 L430,670 L462,670 Z M514,708 L488,689 L498,719 L524,738 Z M430,670 L420,700 L394,719 L404,689 Z M420,738 L394,719 L404,750 L430,768 Z M352,689 L327,670 L336,700 L362,719 Z M372,750 L362,780 L336,799 L346,768 Z M336,738 L327,768 L336,799 L346,768 Z M336,738 L304,738 L279,719 L311,719 Z M362,658 L352,689 L362,719 L372,689 Z M420,640 L388,640 L362,658 L394,658 Z M420,640 L388,640 L362,621 L394,621 Z M362,621 L372,590 L362,560 L352,590 Z M327,609 L295,609 L269,590 L301,590 Z M327,670 L295,670 L269,689 L301,689 Z M304,640 L279,621 L269,590 L295,609 Z M304,640 L295,670 L269,689 L279,658 Z M279,719 L269,750 L243,768 L253,738 Z M243,708 L233,738 L243,768 L253,738 Z M243,708 L211,708 L185,689 L217,689 Z M243,670 L211,670 L185,689 L217,689 Z M253,640 L243,670 L233,640 L243,609 Z M185,689 L159,670 L149,640 L175,658 Z M185,689 L153,689 L127,670 L159,670 Z M175,719 L143,719 L117,738 L149,738 Z M127,670 L117,700 L91,719 L101,689 Z M117,738 L107,768 L117,799 L127,768 Z M81,750 L49,750 L23,768 L55,768 Z M101,689 L91,719 L81,689 L91,658 Z M59,719 L33,700 L23,670 L49,689 Z M59,719 L49,750 L23,768 L33,738 Z M91,818 L81,848 L91,879 L101,848 Z M91,818 L59,818 L33,799 L65,799 Z M117,897 L107,928 L117,958 L127,928 Z M117,897 L107,928 L81,947 L91,916 Z M175,879 L143,879 L117,897 L149,897 Z M201,897 L175,879 L185,909 L211,928 Z M175,818 L143,818 L117,799 L149,799 Z M153,848 L143,879 L117,897 L127,867 Z M243,829 L211,829 L185,848 L217,848 Z M243,867 L233,897 L243,928 L253,897 Z M243,867 L211,867 L185,848 L217,848 Z M269,947 L259,977 L269,1007 L279,977 Z M233,958 L201,958 L175,977 L207,977 Z M211,928 L201,958 L175,977 L185,947 Z M175,977 L143,977 L117,996 L149,996 Z M175,977 L143,977 L117,958 L149,958 Z M243,1026 L233,1057 L243,1087 L253,1057 Z M243,1026 L211,1026 L185,1007 L217,1007 Z M327,1087 L295,1087 L269,1106 L301,1106 Z M352,1106 L327,1087 L336,1118 L362,1136 Z M327,1026 L295,1026 L269,1007 L301,1007 Z M362,1076 L352,1106 L362,1136 L372,1106 Z M304,1057 L295,1087 L269,1106 L279,1076 Z M295,1026 L269,1007 L279,1038 L304,1057 Z M420,1057 L446,1076 L456,1106 L430,1087 Z M420,1057 L388,1057 L362,1076 L394,1076 Z M420,1057 L388,1057 L362,1038 L394,1038 Z M452,1057 L420,1057 L446,1076 L478,1076 Z M488,1007 L456,1007 L430,1026 L462,1026 Z M514,1026 L504,1057 L514,1087 L524,1057 Z M514,1026 L504,1057 L478,1076 L488,1045 Z M572,1007 L598,1026 L608,1057 L582,1038 Z M572,1007 L540,1007 L514,1026 L546,1026 Z M608,958 L640,958 L665,977 L633,977 Z M608,996 L598,1026 L608,1057 L617,1026 Z M550,977 L540,1007 L514,1026 L524,996 Z M514,928 L540,947 L550,977 L524,958 Z M488,947 L478,977 L488,1007 L498,977 Z M488,947 L456,947 L430,928 L462,928 Z M430,928 L420,958 L394,977 L404,947 Z M420,996 L394,977 L404,1007 L430,1026 Z M362,977 L352,1007 L362,1038 L372,1007 Z M362,977 L352,1007 L327,1026 L336,996 Z M352,947 L327,928 L336,958 L362,977 Z M362,916 L352,947 L362,977 L372,947 Z M336,897 L304,897 L279,879 L311,879 Z M420,897 L388,897 L362,916 L394,916 Z M420,897 L388,897 L362,879 L394,879 Z M478,879 L446,879 L420,897 L452,897 Z M504,897 L478,879 L488,909 L514,928 Z M514,867 L504,897 L514,928 L524,897 Z M456,848 L446,879 L420,897 L430,867 Z M446,818 L420,799 L430,829 L456,848 Z M420,799 L388,799 L362,818 L394,818 Z M362,818 L352,848 L362,879 L372,848 Z M327,867 L301,848 L311,879 L336,897 Z M336,799 L327,829 L301,848 L311,818 Z M336,799 L304,799 L279,818 L311,818 Z M269,787 L243,768 L253,799 L279,818 Z M243,768 L233,799 L243,829 L253,799 Z M211,768 L201,799 L175,818 L185,787 Z M201,738 L175,719 L185,750 L211,768 Z M430,768 L398,768 L372,750 L404,750 Z M488,750 L456,750 L430,768 L462,768 Z M488,787 L478,818 L488,848 L498,818 Z M488,787 L456,787 L430,768 L462,768 Z M524,799 L514,829 L488,848 L498,818 Z M572,787 L546,768 L556,799 L582,818 Z M582,719 L572,750 L546,768 L556,738 Z M582,719 L550,719 L524,738 L556,738 Z M572,689 L540,689 L514,670 L546,670 Z M608,738 L598,768 L608,799 L617,768 Z M633,719 L665,719 L640,738 L608,738 Z M633,719 L665,719 L640,700 L608,700 Z M665,719 L691,738 L701,768 L675,750 Z M665,719 L697,719 L723,738 L691,738 Z M759,689 L769,658 L795,640 L785,670 Z M759,689 L791,689 L817,670 L785,670 Z M749,719 L759,689 L769,719 L759,750 Z M749,719 L759,689 L733,708 L723,738 Z M817,670 L843,689 L853,719 L827,700 Z M827,640 L859,640 L885,621 L853,621 Z M827,640 L859,640 L885,658 L853,658 Z M817,609 L827,579 L853,560 L843,590 Z M875,689 L885,658 L895,689 L885,719 Z M885,719 L895,689 L920,670 L911,700 Z M911,738 L943,738 L968,719 L936,719 Z M875,750 L901,768 L911,799 L885,780 Z M817,768 L827,738 L853,719 L843,750 Z M817,768 L849,768 L875,750 L843,750 Z M827,799 L817,829 L791,848 L801,818 Z M827,799 L859,799 L885,818 L853,818 Z M785,768 L817,768 L791,787 L759,787 Z M885,818 L875,848 L885,879 L895,848 Z M911,799 L936,818 L946,848 L920,829 Z M911,799 L943,799 L968,818 L936,818 Z M853,879 L885,879 L859,897 L827,897 Z M791,848 L817,867 L827,897 L801,879 Z M769,879 L759,909 L733,928 L743,897 Z M769,879 L801,879 L827,897 L795,897 Z M733,867 L723,897 L733,928 L743,897 Z M759,787 L749,818 L759,848 L769,818 Z M759,750 L791,750 L817,768 L785,768 Z M723,799 L749,818 L759,848 L733,829 Z M701,768 L691,799 L665,818 L675,787 Z M691,799 L723,799 L697,818 L665,818 Z M675,848 L665,879 L640,897 L649,867 Z M675,848 L707,848 L733,867 L701,867 Z M633,818 L665,818 L640,836 L608,836 Z M608,836 L598,867 L608,897 L617,867 Z M608,799 L640,799 L665,818 L633,818 Z M582,818 L550,818 L524,799 L556,799 Z M572,848 L598,867 L608,897 L582,879 Z M572,848 L540,848 L514,867 L546,867 Z M608,897 L598,928 L608,958 L617,928 Z M608,897 L598,928 L572,947 L582,916 Z M640,897 L665,916 L675,947 L649,928 Z M701,928 L733,928 L707,947 L675,947 Z M733,928 L723,958 L697,977 L707,947 Z M759,947 L749,977 L759,1007 L769,977 Z M697,977 L723,996 L733,1026 L707,1007 Z M759,1007 L791,1007 L817,1026 L785,1026 Z M733,1026 L759,1045 L769,1076 L743,1057 Z M733,1026 L723,1057 L733,1087 L743,1057 Z M675,1007 L665,1038 L640,1057 L649,1026 Z M675,1007 L707,1007 L733,1026 L701,1026 Z M701,1087 L733,1087 L707,1106 L675,1106 Z M640,1057 L665,1076 L675,1106 L649,1087 Z M608,1057 L598,1087 L608,1118 L617,1087 Z M608,1057 L598,1087 L572,1106 L582,1076 Z M608,1118 L640,1118 L665,1136 L633,1136 Z M582,1136 L572,1167 L546,1186 L556,1155 Z M582,1136 L550,1136 L524,1155 L556,1155 Z M546,1087 L514,1087 L540,1106 L572,1106 Z M488,1106 L514,1125 L524,1155 L498,1136 Z M488,1106 L478,1136 L488,1167 L498,1136 Z M456,1106 L446,1136 L420,1155 L430,1125 Z M394,1136 L362,1136 L388,1155 L420,1155 Z M362,1136 L388,1155 L398,1186 L372,1167 Z M336,1155 L304,1155 L279,1136 L311,1136 Z M462,1186 L430,1186 L456,1204 L488,1204 Z M488,1167 L456,1167 L430,1186 L462,1186 Z M546,1186 L572,1204 L582,1235 L556,1216 Z M556,1216 L524,1216 L550,1235 L582,1235 Z M608,1216 L640,1216 L665,1235 L633,1235 Z M608,1155 L598,1186 L608,1216 L617,1186 Z M633,1136 L665,1136 L640,1155 L608,1155 Z M665,1136 L691,1155 L701,1186 L675,1167 Z M665,1136 L697,1136 L723,1155 L691,1155 Z M759,1106 L749,1136 L759,1167 L769,1136 Z M759,1106 L749,1136 L723,1155 L733,1125 Z M791,1106 L817,1125 L827,1155 L801,1136 Z M827,1057 L817,1087 L791,1106 L801,1076 Z M827,1057 L859,1057 L885,1076 L853,1076 Z M853,1038 L885,1038 L859,1057 L827,1057 Z M795,1057 L827,1057 L801,1076 L769,1076 Z M885,1076 L875,1106 L885,1136 L895,1106 Z M885,1136 L875,1167 L849,1186 L859,1155 Z M853,1136 L885,1136 L859,1155 L827,1155 Z M911,1155 L901,1186 L911,1216 L920,1186 Z M936,1136 L968,1136 L943,1155 L911,1155 Z M1004,1087 L1036,1087 L1062,1106 L1030,1106 Z M920,1087 L911,1118 L885,1136 L895,1106 Z M920,1087 L952,1087 L978,1106 L946,1106 Z M943,1057 L968,1076 L978,1106 L952,1087 Z M978,1007 L968,1038 L943,1057 L952,1026 Z M946,1007 L978,1007 L952,1026 L920,1026 Z M885,977 L911,996 L920,1026 L895,1007 Z M885,977 L875,1007 L885,1038 L895,1007 Z M853,977 L843,1007 L817,1026 L827,996 Z M817,928 L843,947 L853,977 L827,958 Z M827,897 L859,897 L885,916 L853,916 Z M785,928 L817,928 L791,947 L759,947 Z M885,916 L875,947 L885,977 L895,947 Z M911,897 L943,897 L968,879 L936,879 Z M920,928 L911,958 L885,977 L895,947 Z M920,928 L952,928 L978,947 L946,947 Z M920,867 L911,897 L936,879 L946,848 Z M968,879 L994,897 L1004,928 L978,909 Z M968,818 L978,787 L1004,768 L994,799 Z M1004,829 L1036,829 L1062,848 L1030,848 Z M1004,867 L994,897 L1004,928 L1014,897 Z M1004,867 L1036,867 L1062,848 L1030,848 Z M1046,897 L1036,928 L1062,909 L1072,879 Z M1072,879 L1104,879 L1130,897 L1098,897 Z M1072,818 L1104,818 L1130,799 L1098,799 Z M1094,848 L1120,867 L1130,897 L1104,879 Z M1094,848 L1104,818 L1130,799 L1120,829 Z M1130,799 L1140,768 L1166,750 L1156,780 Z M1120,768 L1130,738 L1140,768 L1130,799 Z M1156,818 L1188,818 L1214,799 L1182,799 Z M1072,719 L1104,719 L1130,738 L1098,738 Z M1120,670 L1146,689 L1156,719 L1130,700 Z M1146,689 L1156,658 L1166,689 L1156,719 Z M1062,689 L1072,658 L1098,640 L1088,670 Z M1062,689 L1094,689 L1120,670 L1088,670 Z M1062,590 L1088,609 L1098,640 L1072,621 Z M1062,590 L1094,590 L1120,609 L1088,609 Z M1004,609 L1036,609 L1062,590 L1030,590 Z M1004,670 L1036,670 L1062,689 L1030,689 Z M994,640 L1004,609 L1014,640 L1004,670 Z M1004,708 L1036,708 L1062,689 L1030,689 Z M994,738 L1004,708 L1014,738 L1004,768 Z M1036,768 L1062,787 L1072,818 L1046,799 Z M1036,768 L1046,738 L1072,719 L1062,750 Z M994,799 L1004,768 L1014,799 L1004,829 Z M968,719 L994,738 L1004,768 L978,750 Z M920,670 L952,670 L978,689 L946,689 Z M943,640 L968,658 L978,689 L952,670 Z M943,640 L952,609 L978,590 L968,621 Z M920,609 L952,609 L978,590 L946,590 Z M885,560 L911,579 L920,609 L895,590 Z M875,529 L885,499 L911,480 L901,511 Z M911,541 L943,541 L968,560 L936,560 Z M875,590 L885,560 L895,590 L885,621 Z M817,511 L843,529 L853,560 L827,541 Z M817,511 L849,511 L875,529 L843,529 Z M759,590 L785,609 L795,640 L769,621 Z M759,590 L791,590 L817,609 L785,609 Z M723,640 L733,609 L743,640 L733,670 Z M701,609 L733,609 L707,590 L675,590 Z M701,670 L733,670 L707,689 L675,689 Z M827,480 L801,461 L791,431 L817,450 Z M827,480 L859,480 L885,461 L853,461 Z M785,511 L817,511 L791,492 L759,492 Z M885,461 L895,431 L885,400 L875,431 Z M911,480 L920,450 L946,431 L936,461 Z M911,480 L943,480 L968,461 L936,461 Z M901,511 L911,480 L920,511 L911,541 Z M968,461 L994,480 L1004,511 L978,492 Z M994,480 L1004,450 L1014,480 L1004,511 Z M968,400 L978,370 L1004,351 L994,382 Z M1004,412 L1014,382 L1004,351 L994,382 Z M1004,412 L1036,412 L1062,431 L1030,431 Z M1004,450 L1036,450 L1062,431 L1030,431 Z M920,412 L946,431 L936,400 L911,382 Z M911,382 L943,382 L968,400 L936,400 Z M853,400 L885,400 L859,382 L827,382 Z M827,382 L859,382 L885,363 L853,363 Z M791,431 L801,400 L827,382 L817,412 Z M733,412 L743,382 L733,351 L723,382 Z M769,400 L743,382 L733,351 L759,370 Z M769,400 L801,400 L827,382 L795,382 Z M733,351 L707,332 L697,302 L723,321 Z M759,332 L769,302 L759,272 L749,302 Z M701,351 L733,351 L707,332 L675,332 Z M640,382 L649,351 L675,332 L665,363 Z M608,382 L582,363 L572,332 L598,351 Z M608,382 L617,351 L608,321 L598,351 Z M608,321 L640,321 L665,302 L633,302 Z M633,302 L665,302 L640,283 L608,283 Z M675,272 L649,253 L639,222 L665,241 Z M675,272 L707,272 L733,253 L701,253 Z M697,302 L707,272 L733,253 L723,283 Z M733,253 L743,222 L733,192 L723,222 Z M733,253 L743,222 L769,203 L759,234 Z M759,272 L791,272 L817,253 L785,253 Z M701,192 L733,192 L707,173 L675,173 Z M759,173 L733,154 L723,124 L749,143 Z M759,173 L769,143 L759,112 L749,143 Z M665,143 L675,112 L701,93 L691,124 Z M665,143 L697,143 L723,124 L691,124 Z M701,93 L675,75 L665,44 L691,63 Z M691,63 L723,63 L697,44 L665,44 Z M607,63 L639,63 L665,44 L633,44 Z M607,124 L617,93 L607,63 L598,93 Z M582,143 L556,124 L546,93 L572,112 Z M582,143 L550,143 L524,124 L556,124 Z M633,143 L665,143 L639,124 L607,124 Z M607,161 L639,161 L665,143 L633,143 Z M639,222 L649,192 L675,173 L665,203 Z M607,222 L582,203 L572,173 L598,192 Z M607,222 L617,192 L607,161 L598,192 Z M608,283 L617,253 L607,222 L598,253 Z M572,272 L582,241 L607,222 L598,253 Z M572,272 L540,272 L514,253 L546,253 Z M550,302 L524,283 L514,253 L540,272 Z M514,253 L488,234 L478,203 L504,222 Z M514,253 L524,222 L514,192 L504,222 Z M488,272 L456,272 L430,253 L462,253 Z M546,192 L514,192 L540,173 L572,173 Z M546,93 L556,63 L582,44 L572,75 Z M556,63 L524,63 L550,44 L582,44 Z M462,93 L430,93 L456,75 L488,75 Z M362,143 L372,112 L398,93 L388,124 Z M336,124 L304,124 L279,143 L311,143 Z M352,173 L362,143 L336,161 L327,192 Z M394,143 L362,143 L388,124 L420,124 Z M420,222 L430,192 L456,173 L446,203 Z M420,222 L388,222 L362,241 L394,241 Z M420,222 L388,222 L362,203 L394,203 Z M362,203 L372,173 L362,143 L352,173 Z M420,283 L430,253 L404,272 L394,302 Z M362,302 L336,283 L327,253 L352,272 Z M362,302 L372,272 L362,241 L352,272 Z M352,332 L362,302 L336,321 L327,351 Z M362,363 L372,332 L362,302 L352,332 Z M327,351 L295,351 L269,332 L301,332 Z M336,382 L304,382 L279,400 L311,400 Z M269,332 L279,302 L269,272 L259,302 Z M259,302 L269,272 L243,290 L233,321 Z M327,253 L295,253 L269,272 L301,272 Z M295,253 L304,222 L279,241 L269,272 Z M304,222 L279,203 L269,173 L295,192 Z M243,253 L253,222 L243,192 L233,222 Z M243,253 L211,253 L185,272 L217,272 Z M175,302 L143,302 L117,321 L149,321 Z M175,302 L143,302 L117,283 L149,283 Z M233,321 L201,321 L175,302 L207,302 Z M117,382 L91,363 L81,332 L107,351 Z M117,382 L127,351 L117,321 L107,351 Z M91,461 L101,431 L91,400 L81,431 Z M91,461 L59,461 L33,480 L65,480 Z M143,461 L153,431 L127,450 L117,480 Z M107,511 L117,480 L91,499 L81,529 Z M175,461 L143,461 L117,480 L149,480 Z M175,400 L143,400 L117,382 L149,382 Z M153,431 L127,412 L117,382 L143,400 Z M243,412 L253,382 L243,351 L233,382 Z M243,412 L211,412 L185,431 L217,431 Z M243,450 L211,450 L185,431 L217,431 Z M243,511 L253,480 L243,450 L233,480 Z M269,492 L279,461 L253,480 L243,511 Z M211,511 L185,492 L175,461 L201,480 Z M201,541 L211,511 L185,529 L175,560 Z M175,560 L143,560 L117,541 L149,541 Z M185,590 L175,621 L149,640 L159,609 Z M185,590 L153,590 L127,609 L159,609 Z M117,541 L127,511 L117,480 L107,511 Z M81,529 L49,529 L23,511 L55,511 Z M101,590 L91,621 L81,590 L91,560 Z M59,560 L33,541 L23,511 L49,529 Z M59,560 L49,590 L23,609 L33,579 Z M91,621 L59,621 L33,640 L65,640 Z M91,658 L59,658 L33,640 L65,640 Z M127,609 L101,590 L91,560 L117,579 Z M243,571 L253,541 L243,511 L233,541 Z M243,571 L211,571 L185,590 L217,590 Z M243,609 L211,609 L185,590 L217,590 Z M279,560 L253,541 L243,511 L269,529 Z M336,480 L311,461 L301,431 L327,450 Z M336,480 L304,480 L279,461 L311,461 Z M362,461 L372,431 L362,400 L352,431 Z M327,412 L336,382 L311,400 L301,431 Z M279,400 L253,382 L243,351 L269,370 Z M420,382 L388,382 L362,400 L394,400 Z M420,382 L388,382 L362,363 L394,363 Z M430,351 L404,332 L394,302 L420,321 Z M478,400 L446,400 L420,382 L452,382 Z M488,332 L498,302 L488,272 L478,302 Z M488,332 L456,332 L430,351 L462,351 Z M514,351 L524,321 L550,302 L540,332 Z M504,382 L514,351 L488,370 L478,400 Z M546,351 L514,351 L540,332 L572,332 Z M514,412 L524,382 L514,351 L504,382 Z M456,431 L430,412 L420,382 L446,400 Z M201,382 L211,351 L185,370 L175,400 Z M211,351 L185,332 L175,302 L201,321 Z M327,192 L295,192 L269,173 L301,173 Z M452,222 L420,222 L446,203 L478,203 Z M488,173 L498,143 L488,112 L478,143 Z M488,173 L498,143 L524,124 L514,154 Z M456,173 L430,154 L420,124 L446,143 Z M488,112 L456,112 L430,93 L462,93 Z M633,44 L665,44 L639,25 L607,25 Z M723,63 L733,33 L759,14 L749,44 Z M759,75 L769,44 L759,14 L749,44 Z M785,93 L817,93 L791,75 L759,75 Z M885,143 L859,124 L849,93 L875,112 Z M911,124 L920,93 L911,63 L901,93 Z M936,143 L968,143 L943,124 L911,124 Z M920,192 L895,173 L885,143 L911,161 Z M920,192 L952,192 L978,173 L946,173 Z M943,222 L952,192 L978,173 L968,203 Z M978,272 L952,253 L943,222 L968,241 Z M1004,253 L1014,222 L1004,192 L994,222 Z M1004,253 L1036,253 L1062,272 L1030,272 Z M1004,192 L1036,192 L1062,173 L1030,173 Z M1030,173 L1062,173 L1036,154 L1004,154 Z M1072,203 L1098,222 L1088,192 L1062,173 Z M1062,272 L1072,241 L1098,222 L1088,253 Z M1072,302 L1104,302 L1130,283 L1098,283 Z M1072,302 L1104,302 L1130,321 L1098,321 Z M1036,351 L1046,321 L1072,302 L1062,332 Z M1046,382 L1072,400 L1062,370 L1036,351 Z M978,332 L988,302 L978,272 L968,302 Z M1014,321 L1046,321 L1072,302 L1040,302 Z M988,302 L1014,321 L1004,290 L978,272 Z M920,351 L895,332 L885,302 L911,321 Z M920,351 L952,351 L978,332 L946,332 Z M885,302 L895,272 L885,241 L875,272 Z M885,302 L895,272 L920,253 L911,283 Z M885,363 L895,332 L885,302 L875,332 Z M817,351 L827,321 L853,302 L843,332 Z M853,302 L827,283 L817,253 L843,272 Z M827,222 L801,203 L791,173 L817,192 Z M827,222 L859,222 L885,203 L853,203 Z M795,222 L827,222 L801,203 L769,203 Z M791,173 L801,143 L827,124 L817,154 Z M759,112 L791,112 L817,93 L785,93 Z M853,143 L885,143 L859,124 L827,124 Z M885,203 L895,173 L885,143 L875,173 Z M853,241 L885,241 L859,222 L827,222 Z M946,272 L978,272 L952,253 L920,253 Z M785,351 L817,351 L791,332 L759,332 Z M1072,400 L1104,400 L1130,382 L1098,382 Z M1072,461 L1104,461 L1130,480 L1098,480 Z M1094,431 L1120,450 L1130,480 L1104,461 Z M1094,431 L1104,400 L1130,382 L1120,412 Z M1130,382 L1140,351 L1130,321 L1120,351 Z M1130,382 L1140,351 L1166,332 L1156,363 Z M1156,400 L1188,400 L1214,382 L1182,382 Z M1146,431 L1156,400 L1166,431 L1156,461 Z M1156,461 L1188,461 L1214,480 L1182,480 Z M1130,480 L1156,499 L1166,529 L1140,511 Z M1166,529 L1198,529 L1224,511 L1192,511 Z M1188,560 L1214,579 L1224,609 L1198,590 Z M1188,560 L1198,529 L1224,511 L1214,541 Z M1188,719 L1214,738 L1224,768 L1198,750 Z M1188,719 L1198,689 L1224,670 L1214,700 Z M1166,750 L1198,750 L1224,768 L1192,768 Z M1156,879 L1188,879 L1214,897 L1182,897 Z M1146,848 L1156,818 L1166,848 L1156,879 Z M1130,897 L1156,916 L1166,947 L1140,928 Z M1130,897 L1120,928 L1130,958 L1140,928 Z M1072,977 L1104,977 L1130,958 L1098,958 Z M1072,977 L1104,977 L1130,996 L1098,996 Z M1062,1007 L1088,1026 L1098,1057 L1072,1038 Z M1014,958 L1046,958 L1072,977 L1040,977 Z M1004,1026 L994,1057 L1004,1087 L1014,1057 Z M1004,1026 L1036,1026 L1062,1007 L1030,1007 Z M1072,1076 L1062,1106 L1088,1087 L1098,1057 Z M1030,1106 L1062,1106 L1036,1125 L1004,1125 Z M988,977 L978,1007 L1004,989 L1014,958 Z M978,947 L968,977 L978,1007 L988,977 Z M1036,928 L1062,947 L1072,977 L1046,958 Z M1156,658 L1188,658 L1214,640 L1182,640 Z M1156,621 L1188,621 L1214,640 L1182,640 Z M1146,590 L1156,560 L1166,590 L1156,621 Z M1120,609 L1130,579 L1156,560 L1146,590 Z M1072,560 L1104,560 L1130,541 L1098,541 Z M1036,511 L1062,529 L1072,560 L1046,541 Z M1036,511 L1046,480 L1072,461 L1062,492 Z M1004,571 L1036,571 L1062,590 L1030,590 Z M994,541 L1004,511 L1014,541 L1004,571 Z M968,560 L978,529 L1004,511 L994,541 Z M1120,511 L1130,480 L1140,511 L1130,541 Z M675,431 L649,412 L640,382 L665,400 Z M675,431 L707,431 L733,412 L701,412 Z M759,1204 L749,1235 L759,1265 L769,1235 Z M723,1216 L749,1235 L759,1265 L733,1246 Z M691,1216 L723,1216 L697,1235 L665,1235 Z M633,1235 L665,1235 L640,1254 L608,1254 Z M701,1186 L691,1216 L665,1235 L675,1204 Z M759,1167 L791,1167 L817,1186 L785,1186 Z M785,1186 L817,1186 L791,1204 L759,1204 Z M633,977 L665,977 L640,996 L608,996 Z M546,928 L514,928 L540,947 L572,947 Z M901,768 L911,738 L920,768 L911,799 Z M572,590 L540,590 L514,609 L546,609 Z M279,879 L269,909 L243,928 L253,897 Z M327,928 L295,928 L269,947 L301,947 Z M259,977 L233,958 L243,989 L269,1007 Z M143,818 L117,799 L127,829 L153,848 Z M107,768 L81,750 L91,780 L117,799 Z M633,461 L665,461 L640,443 L608,443 Z "),thickShape:new Yt("M608,640 L582,621 L556,640 L582,658 Z M608,640 L640,640 L649,670 L617,670 Z M608,640 L640,640 L649,609 L617,609 Z M598,609 L608,579 L582,560 L572,590 Z M598,670 L572,689 L582,719 L608,700 Z M608,579 L640,579 L649,609 L617,609 Z M633,560 L608,541 L582,560 L608,579 Z M665,560 L640,579 L649,609 L675,590 Z M665,560 L675,529 L649,511 L640,541 Z M665,560 L697,560 L707,590 L675,590 Z M691,541 L723,541 L733,511 L701,511 Z M675,529 L649,511 L675,492 L701,511 Z M697,560 L723,541 L733,571 L707,590 Z M749,560 L759,529 L733,511 L723,541 Z M733,511 L759,492 L749,461 L723,480 Z M723,480 L733,450 L707,431 L697,461 Z M759,492 L791,492 L801,461 L769,461 Z M759,529 L733,511 L759,492 L785,511 Z M759,529 L791,529 L801,560 L769,560 Z M701,511 L733,511 L723,480 L691,480 Z M665,461 L675,431 L649,412 L640,443 Z M665,461 L697,461 L707,431 L675,431 Z M649,511 L675,492 L665,461 L640,480 Z M617,511 L649,511 L640,480 L608,480 Z M608,480 L582,461 L608,443 L633,461 Z M608,541 L582,560 L572,529 L598,511 Z M608,541 L640,541 L649,511 L617,511 Z M598,511 L572,492 L546,511 L572,529 Z M598,511 L608,480 L582,461 L572,492 Z M546,511 L514,511 L524,480 L556,480 Z M582,461 L608,443 L598,412 L572,431 Z M582,461 L550,461 L540,431 L572,431 Z M572,431 L582,400 L556,382 L546,412 Z M608,443 L640,443 L649,412 L617,412 Z M550,461 L524,480 L514,450 L540,431 Z M540,431 L514,412 L488,431 L514,450 Z M514,511 L488,492 L462,511 L488,529 Z M514,511 L524,480 L498,461 L488,492 Z M524,541 L498,560 L488,529 L514,511 Z M488,492 L456,492 L446,461 L478,461 Z M478,461 L446,461 L456,431 L488,431 Z M456,492 L430,511 L420,480 L446,461 Z M430,511 L398,511 L388,480 L420,480 Z M420,480 L430,450 L404,431 L394,461 Z M398,511 L372,529 L362,499 L388,480 Z M388,480 L362,461 L336,480 L362,499 Z M362,560 L336,541 L311,560 L336,579 Z M362,560 L372,529 L346,511 L336,541 Z M336,541 L304,541 L295,511 L327,511 Z M394,560 L362,560 L372,529 L404,529 Z M404,590 L372,590 L362,560 L394,560 Z M446,560 L420,541 L394,560 L420,579 Z M446,560 L456,529 L430,511 L420,541 Z M456,590 L430,609 L420,579 L446,560 Z M478,560 L446,560 L456,529 L488,529 Z M488,590 L456,590 L446,560 L478,560 Z M452,640 L420,640 L430,670 L462,670 Z M452,640 L420,640 L430,609 L462,609 Z M504,640 L478,658 L488,689 L514,670 Z M504,640 L478,621 L452,640 L478,658 Z M504,640 L514,609 L488,590 L478,621 Z M488,689 L456,689 L446,719 L478,719 Z M478,719 L446,719 L456,750 L488,750 Z M456,689 L446,719 L420,700 L430,670 Z M446,719 L420,738 L430,768 L456,750 Z M446,719 L420,700 L394,719 L420,738 Z M394,719 L362,719 L372,750 L404,750 Z M404,689 L372,689 L362,719 L394,719 Z M362,719 L336,738 L346,768 L372,750 Z M362,719 L336,700 L311,719 L336,738 Z M336,738 L304,738 L295,768 L327,768 Z M362,658 L352,689 L327,670 L336,640 Z M388,640 L362,621 L336,640 L362,658 Z M336,640 L304,640 L295,609 L327,609 Z M336,640 L304,640 L295,670 L327,670 Z M394,658 L362,658 L372,689 L404,689 Z M420,640 L394,658 L404,689 L430,670 Z M420,640 L430,609 L404,590 L394,621 Z M394,621 L362,621 L372,590 L404,590 Z M362,621 L336,640 L327,609 L352,590 Z M327,609 L336,579 L311,560 L301,590 Z M327,670 L301,689 L311,719 L336,700 Z M304,640 L279,621 L253,640 L279,658 Z M279,658 L269,689 L243,670 L253,640 Z M279,621 L253,640 L243,609 L269,590 Z M269,689 L243,708 L253,738 L279,719 Z M269,689 L243,670 L217,689 L243,708 Z M243,708 L211,708 L201,738 L233,738 Z M243,670 L211,670 L201,640 L233,640 Z M301,689 L269,689 L279,719 L311,719 Z M211,670 L185,689 L175,658 L201,640 Z M201,640 L175,621 L149,640 L175,658 Z M185,689 L153,689 L143,719 L175,719 Z M211,708 L201,738 L175,719 L185,689 Z M159,670 L127,670 L117,640 L149,640 Z M175,719 L149,738 L159,768 L185,750 Z M153,689 L143,719 L117,700 L127,670 Z M127,670 L101,689 L91,658 L117,640 Z M143,719 L117,700 L91,719 L117,738 Z M117,738 L107,768 L81,750 L91,719 Z M91,719 L59,719 L49,689 L81,689 Z M91,719 L59,719 L49,750 L81,750 Z M81,750 L55,768 L65,799 L91,780 Z M59,719 L33,700 L7,719 L33,738 Z M55,768 L23,768 L33,799 L65,799 Z M91,818 L59,818 L49,848 L81,848 Z M117,799 L91,818 L101,848 L127,829 Z M117,799 L91,780 L65,799 L91,818 Z M81,848 L49,848 L59,879 L91,879 Z M117,897 L91,879 L65,897 L91,916 Z M127,867 L117,897 L91,879 L101,848 Z M149,897 L117,897 L127,928 L159,928 Z M159,928 L127,928 L117,958 L149,958 Z M175,879 L149,897 L159,928 L185,909 Z M185,848 L153,848 L143,879 L175,879 Z M175,818 L143,818 L153,848 L185,848 Z M211,867 L201,897 L175,879 L185,848 Z M153,848 L127,829 L101,848 L127,867 Z M243,867 L211,867 L201,897 L233,897 Z M269,848 L243,867 L253,897 L279,879 Z M269,848 L243,829 L217,848 L243,867 Z M233,897 L201,897 L211,928 L243,928 Z M243,928 L211,928 L201,958 L233,958 Z M269,947 L259,977 L233,958 L243,928 Z M233,958 L207,977 L217,1007 L243,989 Z M211,928 L185,909 L159,928 L185,947 Z M185,947 L175,977 L149,958 L159,928 Z M175,977 L149,996 L159,1026 L185,1007 Z M207,977 L175,977 L185,1007 L217,1007 Z M243,1026 L211,1026 L201,1057 L233,1057 Z M269,1007 L243,1026 L253,1057 L279,1038 Z M269,1007 L243,989 L217,1007 L243,1026 Z M233,1057 L201,1057 L211,1087 L243,1087 Z M211,1026 L201,1057 L175,1038 L185,1007 Z M269,1106 L243,1087 L217,1106 L243,1125 Z M279,1076 L269,1106 L243,1087 L253,1057 Z M301,1106 L269,1106 L279,1136 L311,1136 Z M327,1087 L301,1106 L311,1136 L336,1118 Z M336,1057 L304,1057 L295,1087 L327,1087 Z M327,1026 L295,1026 L304,1057 L336,1057 Z M362,1076 L352,1106 L327,1087 L336,1057 Z M304,1057 L279,1038 L253,1057 L279,1076 Z M388,1057 L362,1038 L336,1057 L362,1076 Z M394,1076 L362,1076 L372,1106 L404,1106 Z M404,1106 L394,1136 L420,1155 L430,1125 Z M404,1106 L372,1106 L362,1136 L394,1136 Z M420,1057 L394,1076 L404,1106 L430,1087 Z M430,1087 L456,1106 L430,1125 L404,1106 Z M430,1026 L420,1057 L394,1038 L404,1007 Z M478,1076 L446,1076 L456,1106 L488,1106 Z M462,1026 L452,1057 L478,1076 L488,1045 Z M462,1026 L430,1026 L420,1057 L452,1057 Z M488,1007 L514,1026 L488,1045 L462,1026 Z M504,1057 L478,1076 L488,1106 L514,1087 Z M546,1026 L514,1026 L524,1057 L556,1057 Z M556,1057 L546,1087 L572,1106 L582,1076 Z M556,1057 L524,1057 L514,1087 L546,1087 Z M572,1007 L546,1026 L556,1057 L582,1038 Z M582,1038 L608,1057 L582,1076 L556,1057 Z M582,977 L572,1007 L598,1026 L608,996 Z M582,977 L550,977 L540,1007 L572,1007 Z M572,947 L540,947 L550,977 L582,977 Z M608,958 L633,977 L608,996 L582,977 Z M608,996 L640,996 L649,1026 L617,1026 Z M524,958 L550,977 L524,996 L498,977 Z M514,928 L488,947 L498,977 L524,958 Z M514,928 L488,909 L462,928 L488,947 Z M498,977 L488,1007 L514,1026 L524,996 Z M488,947 L456,947 L446,977 L478,977 Z M478,977 L446,977 L456,1007 L488,1007 Z M456,947 L446,977 L420,958 L430,928 Z M446,977 L420,996 L430,1026 L456,1007 Z M446,977 L420,958 L394,977 L420,996 Z M394,977 L362,977 L372,1007 L404,1007 Z M404,1007 L372,1007 L362,1038 L394,1038 Z M404,947 L372,947 L362,977 L394,977 Z M362,977 L336,958 L311,977 L336,996 Z M336,996 L327,1026 L301,1007 L311,977 Z M352,1007 L327,1026 L336,1057 L362,1038 Z M362,916 L352,947 L327,928 L336,897 Z M388,897 L362,879 L336,897 L362,916 Z M336,897 L304,897 L295,928 L327,928 Z M394,916 L362,916 L372,947 L404,947 Z M420,897 L394,916 L404,947 L430,928 Z M430,867 L420,897 L394,879 L404,848 Z M452,897 L420,897 L430,928 L462,928 Z M478,879 L452,897 L462,928 L488,909 Z M488,848 L456,848 L446,879 L478,879 Z M478,818 L446,818 L456,848 L488,848 Z M514,867 L504,897 L478,879 L488,848 Z M456,848 L430,829 L404,848 L430,867 Z M420,799 L394,818 L404,848 L430,829 Z M404,848 L372,848 L362,879 L394,879 Z M394,818 L362,818 L372,848 L404,848 Z M362,818 L352,848 L327,829 L336,799 Z M352,848 L327,867 L336,897 L362,879 Z M352,848 L327,829 L301,848 L327,867 Z M301,848 L269,848 L279,879 L311,879 Z M327,768 L295,768 L304,799 L336,799 Z M311,818 L279,818 L269,848 L301,848 Z M295,768 L269,787 L279,818 L304,799 Z M295,768 L269,750 L243,768 L269,787 Z M279,818 L269,848 L243,829 L253,799 Z M243,768 L211,768 L201,799 L233,799 Z M233,738 L201,738 L211,768 L243,768 Z M233,799 L201,799 L211,829 L243,829 Z M211,768 L185,750 L159,768 L185,787 Z M185,787 L175,818 L149,799 L159,768 Z M201,799 L175,818 L185,848 L211,829 Z M159,768 L127,768 L117,799 L149,799 Z M149,738 L117,738 L127,768 L159,768 Z M304,738 L295,768 L269,750 L279,719 Z M388,799 L362,780 L336,799 L362,818 Z M398,768 L388,799 L362,780 L372,750 Z M430,768 L398,768 L388,799 L420,799 Z M456,787 L446,818 L420,799 L430,768 Z M488,787 L456,787 L446,818 L478,818 Z M514,768 L488,787 L498,818 L524,799 Z M514,768 L488,750 L462,768 L488,787 Z M524,738 L514,768 L488,750 L498,719 Z M546,768 L514,768 L524,799 L556,799 Z M556,738 L524,738 L514,768 L546,768 Z M572,689 L582,658 L556,640 L546,670 Z M572,689 L540,689 L550,719 L582,719 Z M608,700 L640,700 L649,670 L617,670 Z M608,738 L598,768 L572,750 L582,719 Z M608,738 L640,738 L649,768 L617,768 Z M540,689 L514,708 L524,738 L550,719 Z M540,689 L514,670 L488,689 L514,708 Z M617,768 L649,768 L640,799 L608,799 Z M633,719 L608,700 L582,719 L608,738 Z M598,768 L572,787 L582,818 L608,799 Z M598,768 L572,750 L546,768 L572,787 Z M649,768 L640,799 L665,818 L675,787 Z M665,719 L640,738 L649,768 L675,750 Z M665,719 L675,689 L649,670 L640,700 Z M665,719 L697,719 L707,689 L675,689 Z M675,750 L701,768 L675,787 L649,768 Z M691,738 L723,738 L733,768 L701,768 Z M697,719 L707,689 L733,708 L723,738 Z M733,670 L759,689 L733,708 L707,689 Z M733,670 L743,640 L769,658 L759,689 Z M759,689 L791,689 L801,719 L769,719 Z M785,670 L817,670 L827,640 L795,640 Z M749,719 L723,738 L733,768 L759,750 Z M791,689 L817,670 L827,700 L801,719 Z M801,719 L827,738 L853,719 L827,700 Z M817,670 L827,640 L853,658 L843,689 Z M843,689 L875,689 L885,719 L853,719 Z M843,689 L875,689 L885,658 L853,658 Z M817,609 L843,590 L853,621 L827,640 Z M859,640 L885,658 L911,640 L885,621 Z M885,621 L895,590 L920,609 L911,640 Z M885,658 L911,640 L920,670 L895,689 Z M911,640 L943,640 L952,670 L920,670 Z M911,640 L943,640 L952,609 L920,609 Z M885,719 L911,738 L936,719 L911,700 Z M911,700 L920,670 L946,689 L936,719 Z M911,738 L943,738 L952,768 L920,768 Z M875,750 L885,719 L911,738 L901,768 Z M843,750 L875,750 L885,719 L853,719 Z M817,768 L791,787 L801,818 L827,799 Z M817,768 L849,768 L859,799 L827,799 Z M827,799 L817,829 L843,848 L853,818 Z M791,750 L801,719 L827,738 L817,768 Z M849,768 L875,750 L885,780 L859,799 Z M859,799 L885,818 L911,799 L885,780 Z M885,818 L911,799 L920,829 L895,848 Z M895,848 L920,867 L946,848 L920,829 Z M895,848 L885,879 L911,897 L920,867 Z M911,799 L943,799 L952,768 L920,768 Z M853,818 L885,818 L875,848 L843,848 Z M843,848 L817,867 L827,897 L853,879 Z M843,848 L875,848 L885,879 L853,879 Z M817,829 L843,848 L817,867 L791,848 Z M759,848 L733,867 L743,897 L769,879 Z M759,848 L791,848 L801,879 L769,879 Z M769,879 L759,909 L785,928 L795,897 Z M733,829 L759,848 L733,867 L707,848 Z M769,818 L801,818 L791,848 L759,848 Z M759,787 L791,787 L801,818 L769,818 Z M733,768 L723,799 L749,818 L759,787 Z M759,750 L785,768 L759,787 L733,768 Z M759,750 L791,750 L801,719 L769,719 Z M723,799 L697,818 L707,848 L733,829 Z M701,768 L733,768 L723,799 L691,799 Z M665,818 L640,836 L649,867 L675,848 Z M665,818 L697,818 L707,848 L675,848 Z M675,848 L665,879 L691,897 L701,867 Z M608,836 L640,836 L649,867 L617,867 Z M608,799 L633,818 L608,836 L582,818 Z M582,818 L572,848 L598,867 L608,836 Z M582,818 L550,818 L540,848 L572,848 Z M572,848 L546,867 L556,897 L582,879 Z M550,818 L540,848 L514,829 L524,799 Z M540,848 L514,829 L488,848 L514,867 Z M582,879 L608,897 L582,916 L556,897 Z M546,867 L514,867 L524,897 L556,897 Z M608,897 L640,897 L649,928 L617,928 Z M617,928 L649,928 L640,958 L608,958 Z M598,928 L572,947 L582,977 L608,958 Z M617,867 L649,867 L640,897 L608,897 Z M649,928 L640,958 L665,977 L675,947 Z M665,879 L691,897 L665,916 L640,897 Z M675,947 L707,947 L697,977 L665,977 Z M691,897 L665,916 L675,947 L701,928 Z M691,897 L723,897 L733,928 L701,928 Z M701,867 L733,867 L723,897 L691,897 Z M733,928 L723,958 L749,977 L759,947 Z M759,909 L785,928 L759,947 L733,928 Z M759,947 L791,947 L801,977 L769,977 Z M723,958 L749,977 L723,996 L697,977 Z M749,977 L723,996 L733,1026 L759,1007 Z M759,1007 L785,1026 L759,1045 L733,1026 Z M743,1057 L733,1087 L759,1106 L769,1076 Z M701,1026 L733,1026 L723,1057 L691,1057 Z M675,1007 L665,1038 L691,1057 L701,1026 Z M691,1057 L665,1076 L675,1106 L701,1087 Z M691,1057 L723,1057 L733,1087 L701,1087 Z M665,1038 L691,1057 L665,1076 L640,1057 Z M649,1087 L640,1118 L665,1136 L675,1106 Z M608,1057 L640,1057 L649,1087 L617,1087 Z M617,1087 L649,1087 L640,1118 L608,1118 Z M598,1087 L572,1106 L582,1136 L608,1118 Z M617,1026 L649,1026 L640,1057 L608,1057 Z M608,1118 L633,1136 L608,1155 L582,1136 Z M572,1106 L540,1106 L550,1136 L582,1136 Z M582,1136 L572,1167 L598,1186 L608,1155 Z M540,1106 L514,1125 L524,1155 L550,1136 Z M514,1087 L540,1106 L514,1125 L488,1106 Z M488,1106 L456,1106 L446,1136 L478,1136 Z M498,1136 L488,1167 L514,1186 L524,1155 Z M478,1136 L446,1136 L456,1167 L488,1167 Z M446,1136 L420,1155 L430,1186 L456,1167 Z M420,1155 L388,1155 L398,1186 L430,1186 Z M430,1186 L420,1216 L446,1235 L456,1204 Z M430,1186 L398,1186 L388,1216 L420,1216 Z M362,1136 L336,1155 L346,1186 L372,1167 Z M362,1136 L336,1118 L311,1136 L336,1155 Z M372,1167 L398,1186 L372,1204 L346,1186 Z M488,1204 L456,1204 L446,1235 L478,1235 Z M514,1186 L488,1204 L498,1235 L524,1216 Z M488,1167 L514,1186 L488,1204 L462,1186 Z M524,1216 L514,1246 L540,1265 L550,1235 Z M546,1186 L514,1186 L524,1216 L556,1216 Z M572,1167 L598,1186 L572,1204 L546,1186 Z M556,1155 L524,1155 L514,1186 L546,1186 Z M582,1235 L550,1235 L540,1265 L572,1265 Z M598,1186 L572,1204 L582,1235 L608,1216 Z M608,1216 L633,1235 L608,1254 L582,1235 Z M608,1155 L640,1155 L649,1186 L617,1186 Z M617,1186 L649,1186 L640,1216 L608,1216 Z M649,1186 L640,1216 L665,1235 L675,1204 Z M665,1136 L640,1155 L649,1186 L675,1167 Z M675,1167 L701,1186 L675,1204 L649,1186 Z M691,1155 L723,1155 L733,1186 L701,1186 Z M675,1106 L707,1106 L697,1136 L665,1136 Z M707,1106 L697,1136 L723,1155 L733,1125 Z M733,1087 L759,1106 L733,1125 L707,1106 Z M759,1106 L791,1106 L801,1136 L769,1136 Z M769,1136 L801,1136 L791,1167 L759,1167 Z M749,1136 L723,1155 L733,1186 L759,1167 Z M769,1076 L801,1076 L791,1106 L759,1106 Z M801,1136 L791,1167 L817,1186 L827,1155 Z M817,1087 L843,1106 L817,1125 L791,1106 Z M827,1057 L817,1087 L843,1106 L853,1076 Z M853,1076 L885,1076 L875,1106 L843,1106 Z M885,1038 L911,1057 L885,1076 L859,1057 Z M911,1057 L885,1076 L895,1106 L920,1087 Z M911,1057 L943,1057 L952,1087 L920,1087 Z M885,1136 L875,1167 L901,1186 L911,1155 Z M843,1106 L817,1125 L827,1155 L853,1136 Z M843,1106 L875,1106 L885,1136 L853,1136 Z M827,1155 L859,1155 L849,1186 L817,1186 Z M817,1186 L791,1204 L801,1235 L827,1216 Z M817,1186 L849,1186 L859,1216 L827,1216 Z M875,1167 L901,1186 L875,1204 L849,1186 Z M911,1155 L943,1155 L952,1186 L920,1186 Z M968,1136 L943,1155 L952,1186 L978,1167 Z M978,1106 L968,1136 L994,1155 L1004,1125 Z M1004,1087 L1030,1106 L1004,1125 L978,1106 Z M946,1106 L978,1106 L968,1136 L936,1136 Z M920,1087 L911,1118 L936,1136 L946,1106 Z M911,1118 L936,1136 L911,1155 L885,1136 Z M968,1038 L994,1057 L968,1076 L943,1057 Z M978,1007 L1004,1026 L1030,1007 L1004,989 Z M978,1007 L968,1038 L994,1057 L1004,1026 Z M920,1026 L952,1026 L943,1057 L911,1057 Z M895,1007 L885,1038 L911,1057 L920,1026 Z M911,958 L936,977 L911,996 L885,977 Z M853,977 L885,977 L875,1007 L843,1007 Z M843,947 L875,947 L885,977 L853,977 Z M827,958 L853,977 L827,996 L801,977 Z M843,1007 L817,1026 L827,1057 L853,1038 Z M843,1007 L875,1007 L885,1038 L853,1038 Z M817,928 L791,947 L801,977 L827,958 Z M801,977 L791,1007 L817,1026 L827,996 Z M769,977 L801,977 L791,1007 L759,1007 Z M827,897 L817,928 L843,947 L853,916 Z M795,897 L827,897 L817,928 L785,928 Z M853,916 L885,916 L875,947 L843,947 Z M885,879 L911,897 L885,916 L859,897 Z M911,897 L885,916 L895,947 L920,928 Z M911,897 L943,897 L952,928 L920,928 Z M920,928 L911,958 L936,977 L946,947 Z M943,897 L968,879 L978,909 L952,928 Z M952,928 L978,947 L1004,928 L978,909 Z M978,848 L1004,867 L1030,848 L1004,829 Z M978,848 L968,879 L994,897 L1004,867 Z M968,818 L994,799 L1004,829 L978,848 Z M1004,829 L1036,829 L1046,799 L1014,799 Z M1004,867 L1036,867 L1046,897 L1014,897 Z M946,848 L978,848 L968,879 L936,879 Z M936,818 L968,818 L978,848 L946,848 Z M1014,897 L1046,897 L1036,928 L1004,928 Z M1036,867 L1062,848 L1072,879 L1046,897 Z M1062,848 L1094,848 L1104,879 L1072,879 Z M1062,848 L1094,848 L1104,818 L1072,818 Z M1072,879 L1062,909 L1088,928 L1098,897 Z M1036,829 L1046,799 L1072,818 L1062,848 Z M1094,848 L1120,867 L1146,848 L1120,829 Z M1120,829 L1130,799 L1156,818 L1146,848 Z M1120,867 L1146,848 L1156,879 L1130,897 Z M1130,799 L1156,818 L1182,799 L1156,780 Z M1156,780 L1166,750 L1192,768 L1182,799 Z M1156,818 L1188,818 L1198,848 L1166,848 Z M1088,768 L1120,768 L1130,799 L1098,799 Z M1088,768 L1120,768 L1130,738 L1098,738 Z M1062,787 L1088,768 L1098,799 L1072,818 Z M1062,750 L1072,719 L1098,738 L1088,768 Z M1130,738 L1156,719 L1166,750 L1140,768 Z M1156,719 L1188,719 L1198,750 L1166,750 Z M1156,719 L1188,719 L1198,689 L1166,689 Z M1104,719 L1130,738 L1156,719 L1130,700 Z M1094,689 L1120,670 L1130,700 L1104,719 Z M1120,670 L1130,640 L1156,658 L1146,689 Z M1130,640 L1156,658 L1182,640 L1156,621 Z M1088,670 L1120,670 L1130,640 L1098,640 Z M1062,689 L1094,689 L1104,719 L1072,719 Z M1088,609 L1120,609 L1130,640 L1098,640 Z M1062,590 L1094,590 L1104,560 L1072,560 Z M1046,640 L1072,658 L1098,640 L1072,621 Z M1036,609 L1062,590 L1072,621 L1046,640 Z M1036,670 L1046,640 L1072,658 L1062,689 Z M1004,609 L1036,609 L1046,640 L1014,640 Z M1004,670 L1036,670 L1046,640 L1014,640 Z M978,689 L1004,708 L1030,689 L1004,670 Z M1004,708 L1036,708 L1046,738 L1014,738 Z M1036,708 L1062,689 L1072,719 L1046,738 Z M1036,768 L1062,787 L1088,768 L1062,750 Z M1004,768 L1036,768 L1046,799 L1014,799 Z M1004,768 L1036,768 L1046,738 L1014,738 Z M968,719 L978,689 L1004,708 L994,738 Z M952,768 L978,787 L1004,768 L978,750 Z M943,738 L968,719 L978,750 L952,768 Z M943,799 L952,768 L978,787 L968,818 Z M936,719 L968,719 L978,689 L946,689 Z M943,640 L968,658 L994,640 L968,621 Z M968,621 L978,590 L1004,609 L994,640 Z M968,658 L994,640 L1004,670 L978,689 Z M978,590 L1004,609 L1030,590 L1004,571 Z M911,579 L936,560 L946,590 L920,609 Z M885,560 L911,579 L936,560 L911,541 Z M875,529 L901,511 L911,541 L885,560 Z M911,541 L943,541 L952,511 L920,511 Z M843,529 L875,529 L885,560 L853,560 Z M843,590 L875,590 L885,621 L853,621 Z M843,590 L875,590 L885,560 L853,560 Z M817,511 L827,480 L801,461 L791,492 Z M817,511 L849,511 L859,480 L827,480 Z M801,560 L827,579 L853,560 L827,541 Z M791,529 L817,511 L827,541 L801,560 Z M791,590 L801,560 L827,579 L817,609 Z M759,590 L791,590 L801,560 L769,560 Z M733,609 L759,590 L769,621 L743,640 Z M733,609 L707,590 L733,571 L759,590 Z M785,609 L817,609 L827,640 L795,640 Z M743,640 L769,658 L795,640 L769,621 Z M691,640 L665,658 L675,689 L701,670 Z M691,640 L665,621 L640,640 L665,658 Z M691,640 L701,609 L675,590 L665,621 Z M691,640 L723,640 L733,670 L701,670 Z M691,640 L723,640 L733,609 L701,609 Z M827,480 L853,461 L843,431 L817,450 Z M849,511 L859,480 L885,499 L875,529 Z M859,480 L885,499 L911,480 L885,461 Z M885,461 L895,431 L920,450 L911,480 Z M911,480 L943,480 L952,511 L920,511 Z M936,461 L968,461 L978,431 L946,431 Z M943,480 L968,461 L978,492 L952,511 Z M952,511 L978,529 L1004,511 L978,492 Z M968,461 L978,431 L1004,450 L994,480 Z M978,431 L1004,412 L994,382 L968,400 Z M978,431 L1004,450 L1030,431 L1004,412 Z M1004,412 L1036,412 L1046,382 L1014,382 Z M1004,450 L1036,450 L1046,480 L1014,480 Z M946,431 L978,431 L968,400 L936,400 Z M911,382 L920,351 L895,332 L885,363 Z M911,382 L943,382 L952,351 L920,351 Z M895,431 L920,412 L911,382 L885,400 Z M895,431 L920,450 L946,431 L920,412 Z M885,400 L859,382 L885,363 L911,382 Z M827,382 L853,363 L843,332 L817,351 Z M843,431 L853,400 L827,382 L817,412 Z M843,431 L875,431 L885,400 L853,400 Z M853,461 L885,461 L875,431 L843,431 Z M817,450 L791,431 L817,412 L843,431 Z M759,431 L769,400 L743,382 L733,412 Z M759,431 L791,431 L801,400 L769,400 Z M769,461 L801,461 L791,431 L759,431 Z M733,450 L707,431 L733,412 L759,431 Z M769,400 L795,382 L785,351 L759,370 Z M759,370 L733,351 L759,332 L785,351 Z M795,382 L827,382 L817,351 L785,351 Z M733,351 L759,332 L749,302 L723,321 Z M723,321 L697,302 L723,283 L749,302 Z M759,332 L791,332 L801,302 L769,302 Z M675,332 L707,332 L697,302 L665,302 Z M691,382 L701,351 L675,332 L665,363 Z M691,382 L723,382 L733,351 L701,351 Z M701,412 L733,412 L723,382 L691,382 Z M665,400 L640,382 L665,363 L691,382 Z M649,351 L675,332 L665,302 L640,321 Z M608,382 L640,382 L649,351 L617,351 Z M598,351 L608,321 L582,302 L572,332 Z M617,412 L649,412 L640,382 L608,382 Z M582,400 L556,382 L582,363 L608,382 Z M617,351 L649,351 L640,321 L608,321 Z M608,321 L582,302 L608,283 L633,302 Z M582,302 L608,283 L598,253 L572,272 Z M582,302 L550,302 L540,272 L572,272 Z M665,302 L675,272 L649,253 L640,283 Z M665,302 L697,302 L707,272 L675,272 Z M675,272 L701,253 L691,222 L665,241 Z M759,272 L733,253 L759,234 L785,253 Z M743,222 L769,203 L759,173 L733,192 Z M701,253 L733,253 L723,222 L691,222 Z M691,222 L701,192 L675,173 L665,203 Z M691,222 L723,222 L733,192 L701,192 Z M665,241 L639,222 L665,203 L691,222 Z M675,173 L707,173 L697,143 L665,143 Z M733,192 L707,173 L733,154 L759,173 Z M759,173 L791,173 L801,143 L769,143 Z M707,173 L733,154 L723,124 L697,143 Z M749,143 L759,112 L733,93 L723,124 Z M733,93 L759,75 L749,44 L723,63 Z M691,124 L723,124 L733,93 L701,93 Z M665,143 L675,112 L649,93 L639,124 Z M701,93 L733,93 L723,63 L691,63 Z M675,112 L649,93 L675,75 L701,93 Z M665,44 L697,44 L707,14 L675,14 Z M649,93 L675,75 L665,44 L639,63 Z M617,93 L649,93 L639,63 L607,63 Z M607,63 L582,44 L607,25 L633,44 Z M607,124 L639,124 L649,93 L617,93 Z M598,93 L607,63 L582,44 L572,75 Z M582,143 L607,124 L598,93 L572,112 Z M607,161 L582,143 L607,124 L633,143 Z M617,192 L649,192 L639,161 L607,161 Z M598,192 L607,161 L582,143 L572,173 Z M649,192 L675,173 L665,143 L639,161 Z M607,222 L639,222 L649,192 L617,192 Z M617,253 L649,253 L639,222 L607,222 Z M582,241 L556,222 L582,203 L607,222 Z M608,283 L640,283 L649,253 L617,253 Z M572,272 L582,241 L556,222 L546,253 Z M546,253 L514,253 L524,222 L556,222 Z M504,222 L514,192 L488,173 L478,203 Z M488,272 L462,253 L488,234 L514,253 Z M514,192 L488,173 L514,154 L540,173 Z M556,222 L582,203 L572,173 L546,192 Z M556,222 L524,222 L514,192 L546,192 Z M572,173 L540,173 L550,143 L582,143 Z M540,173 L550,143 L524,124 L514,154 Z M514,93 L524,63 L498,44 L488,75 Z M498,143 L524,124 L514,93 L488,112 Z M556,124 L524,124 L514,93 L546,93 Z M546,93 L514,93 L524,63 L556,63 Z M572,112 L546,93 L572,75 L598,93 Z M582,44 L550,44 L540,14 L572,14 Z M524,63 L550,44 L540,14 L514,33 Z M488,75 L456,75 L446,44 L478,44 Z M430,93 L456,75 L446,44 L420,63 Z M430,93 L398,93 L388,63 L420,63 Z M420,124 L388,124 L398,93 L430,93 Z M372,112 L346,93 L372,75 L398,93 Z M362,143 L336,124 L311,143 L336,161 Z M362,143 L372,112 L346,93 L336,124 Z M404,173 L430,154 L420,124 L394,143 Z M404,173 L372,173 L362,143 L394,143 Z M430,192 L404,173 L430,154 L456,173 Z M394,203 L362,203 L372,173 L404,173 Z M420,222 L430,192 L404,173 L394,203 Z M362,203 L336,222 L327,192 L352,173 Z M336,222 L304,222 L295,192 L327,192 Z M388,222 L362,203 L336,222 L362,241 Z M352,272 L362,241 L336,222 L327,253 Z M404,272 L372,272 L362,241 L394,241 Z M430,253 L404,272 L394,241 L420,222 Z M394,302 L362,302 L372,272 L404,272 Z M404,332 L372,332 L362,302 L394,302 Z M362,302 L336,283 L311,302 L336,321 Z M336,283 L311,302 L301,272 L327,253 Z M362,363 L336,382 L327,351 L352,332 Z M327,351 L336,321 L311,302 L301,332 Z M336,382 L304,382 L295,351 L327,351 Z M301,332 L269,332 L279,302 L311,302 Z M295,351 L269,332 L243,351 L269,370 Z M304,382 L279,400 L269,370 L295,351 Z M269,332 L243,351 L233,321 L259,302 Z M243,351 L211,351 L201,321 L233,321 Z M269,272 L243,253 L217,272 L243,290 Z M269,272 L279,241 L253,222 L243,253 Z M311,302 L279,302 L269,272 L301,272 Z M327,253 L295,253 L304,222 L336,222 Z M304,222 L279,203 L253,222 L279,241 Z M279,203 L253,222 L243,192 L269,173 Z M269,173 L243,154 L217,173 L243,192 Z M243,253 L211,253 L201,222 L233,222 Z M233,222 L201,222 L211,192 L243,192 Z M211,253 L185,272 L175,241 L201,222 Z M175,302 L185,272 L159,253 L149,283 Z M185,332 L159,351 L149,321 L175,302 Z M207,302 L175,302 L185,272 L217,272 Z M233,321 L243,290 L217,272 L207,302 Z M117,382 L91,363 L65,382 L91,400 Z M81,431 L49,431 L59,400 L91,400 Z M91,461 L59,461 L49,431 L81,431 Z M117,480 L91,461 L65,480 L91,499 Z M117,480 L127,450 L101,431 L91,461 Z M159,511 L127,511 L117,480 L149,480 Z M175,461 L143,461 L153,431 L185,431 Z M185,492 L159,511 L149,480 L175,461 Z M201,480 L211,450 L185,431 L175,461 Z M185,431 L153,431 L143,400 L175,400 Z M175,400 L185,370 L159,351 L149,382 Z M211,412 L185,431 L175,400 L201,382 Z M153,431 L127,412 L101,431 L127,450 Z M243,412 L211,412 L201,382 L233,382 Z M269,431 L243,412 L217,431 L243,450 Z M269,431 L279,400 L253,382 L243,412 Z M233,480 L201,480 L211,450 L243,450 Z M243,511 L211,511 L201,480 L233,480 Z M233,541 L201,541 L211,511 L243,511 Z M211,511 L185,492 L159,511 L185,529 Z M211,571 L185,590 L175,560 L201,541 Z M175,560 L185,529 L159,511 L149,541 Z M185,590 L153,590 L143,560 L175,560 Z M149,541 L117,541 L127,511 L159,511 Z M143,560 L117,541 L91,560 L117,579 Z M153,590 L127,609 L117,579 L143,560 Z M117,541 L91,560 L81,529 L107,511 Z M91,560 L59,560 L49,529 L81,529 Z M91,560 L59,560 L49,590 L81,590 Z M81,529 L91,499 L65,480 L55,511 Z M59,560 L33,541 L7,560 L33,579 Z M59,621 L33,640 L23,609 L49,590 Z M59,658 L49,689 L23,670 L33,640 Z M91,621 L59,621 L49,590 L81,590 Z M91,658 L59,658 L49,689 L81,689 Z M117,640 L91,621 L65,640 L91,658 Z M127,609 L117,640 L91,621 L101,590 Z M159,609 L127,609 L117,640 L149,640 Z M55,511 L23,511 L33,480 L65,480 Z M211,609 L201,640 L175,621 L185,590 Z M243,571 L211,571 L201,541 L233,541 Z M243,609 L211,609 L201,640 L233,640 Z M269,590 L243,571 L217,590 L243,609 Z M269,590 L279,560 L253,541 L243,571 Z M301,590 L269,590 L279,560 L311,560 Z M304,541 L279,560 L269,529 L295,511 Z M295,511 L269,492 L243,511 L269,529 Z M295,511 L304,480 L279,461 L269,492 Z M327,511 L295,511 L304,480 L336,480 Z M362,461 L336,480 L327,450 L352,431 Z M311,461 L279,461 L269,431 L301,431 Z M301,431 L269,431 L279,400 L311,400 Z M279,461 L253,480 L243,450 L269,431 Z M352,431 L327,412 L301,431 L327,450 Z M352,431 L362,400 L336,382 L327,412 Z M388,382 L362,363 L336,382 L362,400 Z M404,431 L372,431 L362,400 L394,400 Z M420,382 L430,351 L404,332 L394,363 Z M430,412 L404,431 L394,400 L420,382 Z M394,363 L362,363 L372,332 L404,332 Z M452,382 L420,382 L430,351 L462,351 Z M478,400 L488,370 L462,351 L452,382 Z M488,332 L456,332 L446,302 L478,302 Z M514,351 L488,332 L462,351 L488,370 Z M514,351 L524,321 L498,302 L488,332 Z M524,321 L498,302 L524,283 L550,302 Z M556,382 L582,363 L572,332 L546,351 Z M556,382 L524,382 L514,351 L546,351 Z M572,332 L540,332 L550,302 L582,302 Z M546,412 L514,412 L524,382 L556,382 Z M514,412 L488,431 L478,400 L504,382 Z M488,431 L456,431 L446,400 L478,400 Z M456,431 L430,412 L404,431 L430,450 Z M498,302 L524,283 L514,253 L488,272 Z M478,302 L446,302 L456,272 L488,272 Z M456,332 L430,351 L420,321 L446,302 Z M446,302 L420,283 L394,302 L420,321 Z M446,302 L456,272 L430,253 L420,283 Z M394,461 L362,461 L372,431 L404,431 Z M233,382 L201,382 L211,351 L243,351 Z M211,351 L185,332 L159,351 L185,370 Z M159,351 L127,351 L117,321 L149,321 Z M149,382 L117,382 L127,351 L159,351 Z M127,412 L101,431 L91,400 L117,382 Z M301,173 L269,173 L279,143 L311,143 Z M327,192 L336,161 L311,143 L301,173 Z M462,253 L488,234 L478,203 L452,222 Z M462,253 L430,253 L420,222 L452,222 Z M478,203 L446,203 L456,173 L488,173 Z M488,173 L456,173 L446,143 L478,143 Z M446,143 L456,112 L430,93 L420,124 Z M478,143 L446,143 L456,112 L488,112 Z M488,112 L462,93 L488,75 L514,93 Z M723,63 L733,33 L707,14 L697,44 Z M759,75 L791,75 L801,44 L769,44 Z M817,93 L827,63 L801,44 L791,75 Z M817,93 L849,93 L859,63 L827,63 Z M875,112 L849,93 L875,75 L901,93 Z M885,143 L911,124 L901,93 L875,112 Z M911,124 L943,124 L952,93 L920,93 Z M968,143 L978,112 L952,93 L943,124 Z M978,173 L1004,154 L994,124 L968,143 Z M946,173 L978,173 L968,143 L936,143 Z M911,161 L885,143 L911,124 L936,143 Z M920,192 L946,173 L936,143 L911,161 Z M911,222 L920,192 L895,173 L885,203 Z M911,222 L943,222 L952,192 L920,192 Z M968,241 L943,222 L968,203 L994,222 Z M978,272 L1004,253 L994,222 L968,241 Z M978,272 L1004,290 L1030,272 L1004,253 Z M994,222 L1004,192 L978,173 L968,203 Z M1004,253 L1036,253 L1046,222 L1014,222 Z M1004,192 L978,173 L1004,154 L1030,173 Z M1014,222 L1046,222 L1036,192 L1004,192 Z M1046,222 L1072,203 L1062,173 L1036,192 Z M1046,222 L1072,241 L1098,222 L1072,203 Z M1098,283 L1130,283 L1120,253 L1088,253 Z M1104,302 L1130,321 L1156,302 L1130,283 Z M1140,351 L1166,332 L1156,302 L1130,321 Z M1072,302 L1098,283 L1088,253 L1062,272 Z M1088,351 L1120,351 L1130,321 L1098,321 Z M1098,382 L1130,382 L1120,351 L1088,351 Z M1062,332 L1072,302 L1098,321 L1088,351 Z M1036,351 L1062,370 L1088,351 L1062,332 Z M1004,351 L1036,351 L1046,321 L1014,321 Z M1014,382 L1046,382 L1036,351 L1004,351 Z M978,332 L988,302 L1014,321 L1004,351 Z M1014,321 L1040,302 L1030,272 L1004,290 Z M1040,302 L1072,302 L1062,272 L1030,272 Z M952,351 L978,370 L1004,351 L978,332 Z M946,332 L978,332 L968,302 L936,302 Z M936,302 L946,272 L920,253 L911,283 Z M936,302 L968,302 L978,272 L946,272 Z M920,351 L946,332 L936,302 L911,321 Z M911,321 L885,302 L911,283 L936,302 Z M853,363 L885,363 L875,332 L843,332 Z M843,332 L875,332 L885,302 L853,302 Z M817,351 L827,321 L801,302 L791,332 Z M853,302 L885,302 L875,272 L843,272 Z M843,272 L853,241 L827,222 L817,253 Z M843,272 L875,272 L885,241 L853,241 Z M827,321 L801,302 L827,283 L853,302 Z M801,302 L827,283 L817,253 L791,272 Z M769,302 L801,302 L791,272 L759,272 Z M827,222 L853,203 L843,173 L817,192 Z M785,253 L795,222 L769,203 L759,234 Z M785,253 L817,253 L827,222 L795,222 Z M769,203 L801,203 L791,173 L759,173 Z M817,192 L791,173 L817,154 L843,173 Z M801,143 L827,124 L817,93 L791,112 Z M827,124 L859,124 L849,93 L817,93 Z M769,143 L801,143 L791,112 L759,112 Z M759,112 L733,93 L759,75 L785,93 Z M843,173 L853,143 L827,124 L817,154 Z M843,173 L875,173 L885,143 L853,143 Z M853,203 L885,203 L875,173 L843,173 Z M885,241 L859,222 L885,203 L911,222 Z M895,272 L920,253 L911,222 L885,241 Z M920,253 L952,253 L943,222 L911,222 Z M943,382 L952,351 L978,370 L968,400 Z M1072,400 L1098,382 L1088,351 L1062,370 Z M1036,412 L1046,382 L1072,400 L1062,431 Z M1062,431 L1094,431 L1104,461 L1072,461 Z M1062,431 L1094,431 L1104,400 L1072,400 Z M1036,450 L1062,431 L1072,461 L1046,480 Z M1094,431 L1120,450 L1146,431 L1120,412 Z M1120,412 L1130,382 L1156,400 L1146,431 Z M1120,450 L1146,431 L1156,461 L1130,480 Z M1130,382 L1156,400 L1182,382 L1156,363 Z M1156,363 L1166,332 L1192,351 L1182,382 Z M1156,400 L1188,400 L1198,431 L1166,431 Z M1188,400 L1214,382 L1224,412 L1198,431 Z M1188,461 L1198,431 L1224,450 L1214,480 Z M1214,480 L1240,461 L1249,492 L1224,511 Z M1156,461 L1188,461 L1198,431 L1166,431 Z M1130,480 L1156,499 L1182,480 L1156,461 Z M1182,480 L1214,480 L1224,511 L1192,511 Z M1156,499 L1182,480 L1192,511 L1166,529 Z M1156,560 L1188,560 L1198,590 L1166,590 Z M1156,560 L1188,560 L1198,529 L1166,529 Z M1188,560 L1214,579 L1240,560 L1214,541 Z M1214,541 L1224,511 L1249,529 L1240,560 Z M1214,579 L1240,560 L1249,590 L1224,609 Z M1214,640 L1246,640 L1256,670 L1224,670 Z M1214,640 L1246,640 L1256,609 L1224,609 Z M1214,700 L1224,670 L1249,689 L1240,719 Z M1188,719 L1214,738 L1240,719 L1214,700 Z M1214,738 L1240,719 L1249,750 L1224,768 Z M1214,799 L1224,768 L1249,787 L1240,818 Z M1182,799 L1214,799 L1224,768 L1192,768 Z M1188,818 L1214,799 L1224,829 L1198,848 Z M1188,879 L1198,848 L1224,867 L1214,897 Z M1156,879 L1188,879 L1198,848 L1166,848 Z M1130,897 L1156,916 L1182,897 L1156,879 Z M1156,916 L1182,897 L1192,928 L1166,947 Z M1140,928 L1130,958 L1156,977 L1166,947 Z M1104,977 L1130,996 L1156,977 L1130,958 Z M1088,928 L1120,928 L1130,958 L1098,958 Z M1072,977 L1062,1007 L1088,1026 L1098,996 Z M1062,947 L1088,928 L1098,958 L1072,977 Z M1098,996 L1130,996 L1120,1026 L1088,1026 Z M1040,977 L1072,977 L1062,1007 L1030,1007 Z M1014,958 L1004,989 L1030,1007 L1040,977 Z M1004,1026 L1036,1026 L1046,1057 L1014,1057 Z M1014,1057 L1046,1057 L1036,1087 L1004,1087 Z M994,1057 L968,1076 L978,1106 L1004,1087 Z M1036,1026 L1062,1007 L1072,1038 L1046,1057 Z M1046,1057 L1072,1076 L1098,1057 L1072,1038 Z M1046,1057 L1036,1087 L1062,1106 L1072,1076 Z M1004,928 L1036,928 L1046,958 L1014,958 Z M978,947 L1004,928 L1014,958 L988,977 Z M946,947 L978,947 L968,977 L936,977 Z M936,977 L911,996 L920,1026 L946,1007 Z M936,977 L968,977 L978,1007 L946,1007 Z M1036,928 L1062,947 L1088,928 L1062,909 Z M1098,897 L1130,897 L1120,928 L1088,928 Z M1188,658 L1214,640 L1224,670 L1198,689 Z M1156,658 L1188,658 L1198,689 L1166,689 Z M1156,621 L1188,621 L1198,590 L1166,590 Z M1188,621 L1198,590 L1224,609 L1214,640 Z M1120,609 L1146,590 L1156,621 L1130,640 Z M1094,590 L1104,560 L1130,579 L1120,609 Z M1104,560 L1130,579 L1156,560 L1130,541 Z M1130,541 L1140,511 L1166,529 L1156,560 Z M1062,529 L1088,511 L1098,541 L1072,560 Z M1036,511 L1062,529 L1088,511 L1062,492 Z M1036,571 L1046,541 L1072,560 L1062,590 Z M1004,511 L1036,511 L1046,541 L1014,541 Z M1004,511 L1036,511 L1046,480 L1014,480 Z M1004,571 L1036,571 L1046,541 L1014,541 Z M968,560 L994,541 L1004,571 L978,590 Z M943,541 L952,511 L978,529 L968,560 Z M936,560 L968,560 L978,590 L946,590 Z M1062,492 L1072,461 L1098,480 L1088,511 Z M1088,511 L1120,511 L1130,541 L1098,541 Z M1088,511 L1120,511 L1130,480 L1098,480 Z M1036,253 L1046,222 L1072,241 L1062,272 Z M749,302 L759,272 L733,253 L723,283 Z M675,431 L701,412 L691,382 L665,400 Z M759,1204 L791,1204 L801,1235 L769,1235 Z M723,1216 L697,1235 L707,1265 L733,1246 Z M665,1235 L697,1235 L707,1265 L675,1265 Z M701,1186 L733,1186 L723,1216 L691,1216 Z M733,1186 L723,1216 L749,1235 L759,1204 Z M759,1167 L785,1186 L759,1204 L733,1186 Z M785,1026 L759,1045 L769,1076 L795,1057 Z M785,1026 L817,1026 L827,1057 L795,1057 Z M665,977 L640,996 L649,1026 L675,1007 Z M665,977 L697,977 L707,1007 L675,1007 Z M556,897 L546,928 L572,947 L582,916 Z M556,897 L524,897 L514,928 L546,928 Z M546,670 L514,670 L524,640 L556,640 Z M546,609 L514,609 L524,640 L556,640 Z M572,590 L546,609 L556,640 L582,621 Z M572,590 L540,590 L550,560 L582,560 Z M540,590 L514,571 L488,590 L514,609 Z M540,590 L550,560 L524,541 L514,571 Z M304,897 L295,928 L269,909 L279,879 Z M295,928 L269,909 L243,928 L269,947 Z M327,928 L301,947 L311,977 L336,958 Z M301,947 L269,947 L279,977 L311,977 Z M311,977 L279,977 L269,1007 L301,1007 Z M556,541 L524,541 L514,511 L546,511 Z ")},si=n=>{k()&&(n.edges.forEach(t=>{const e=t.forwardHalf,s=t.reversedHalf;S(e.edge===t),S(s.edge===t),S(!e.isReversed),S(s.isReversed),S(e.reversed===s),S(s.reversed===e),S(e.start===t.start),S(e.end===t.end),S(s.start===t.end),S(s.end===t.start),S(e.next.previous===e),S(e.previous.next===e),S(s.next.previous===s),S(s.previous.next===s),S(e.next!==e),S(e.previous!==e),S(s.next!==s),S(s.previous!==s),S(e.next.face===e.face),S(e.previous.face===e.face),S(s.next.face===s.face),S(s.previous.face===s.face),S(e.face===t.forwardFace),S(s.face===t.reversedFace)}),n.vertices.forEach(t=>{t.incomingHalfEdges.forEach(i=>{S(i.end===t)}),t.outgoingHalfEdges.forEach(i=>{S(i.start===t)});const e=i=>t.incomingHalfEdges[(i+t.incomingHalfEdges.length)%t.incomingHalfEdges.length],s=i=>t.outgoingHalfEdges[(i+t.outgoingHalfEdges.length)%t.outgoingHalfEdges.length];rt.range(0,t.incomingHalfEdges.length).forEach(i=>{const L=e(i),a=s(i);S(L.reversed===a),S(L.next===s(i-1)),S(a.previous===e(i+1))}),t.edges.forEach(i=>{S(i.start===t||i.end===t),S(t.incomingHalfEdges.includes(i.forwardHalf)||t.outgoingHalfEdges.includes(i.forwardHalf)),S(t.incomingHalfEdges.includes(i.reversedHalf)||t.outgoingHalfEdges.includes(i.reversedHalf)),i.forwardFace&&(S(i.forwardFace.vertices.includes(t)),S(t.faces.includes(i.forwardFace))),i.reversedFace&&(S(i.reversedFace.vertices.includes(t)),S(t.faces.includes(i.reversedFace)))}),t.faces.forEach(i=>{S(i.vertices.includes(t))})}))};class SL extends Cs{constructor(e,s,i,L=0){let a,o;i?(a=new c(Math.sqrt(3),0).timesScalar(s),o=new c(Math.sqrt(3)/2,3/2).timesScalar(s)):(a=new c(3/2,Math.sqrt(3)/2).timesScalar(s),o=new c(0,Math.sqrt(3)).timesScalar(s));const h=[new c(1,0),new c(1,-1),new c(0,-1),new c(-1,0),new c(-1,1),new c(0,1)],l=rt.range(0,6).map(x=>h[x].plus(h[(x+1)%6])),u=x=>l.map(b=>b.plus(x.timesScalar(3))),f=(x,b)=>(Math.abs(x.x-b.x)+Math.abs(x.x+x.y-b.x-b.y)+Math.abs(x.y-b.y))/2,d=[];for(let x=-e;x<=e;x++)for(let b=Math.max(-e,-x-e);b<=Math.min(e,-x+e);b++){const w=new c(x,b);f(w,new c(0,0))>=L&&d.push(w)}const p=rt.uniqWith(d.flatMap(u),(x,b)=>x.equals(b)).map(x=>({logicalCoordinates:x,viewCoordinates:a.timesScalar(x.x).plus(o.timesScalar(x.y)).timesScalar(1/3)})),A=d.map(x=>({logicalCoordinates:x,vertices:u(x).map(b=>{const w=p.find(y=>y.logicalCoordinates.equals(b));return k()&&S(w),w})}));super(Ts(oL({vertices:p,faces:A},s)));H(this,"isHexagonal",!0);this.radius=e,this.scale=s,this.isPointyTop=i,this.holeRadius=L,k()&&si(this)}static enumeratePointyFaceCoordinates(e){const s=[];for(let i=-e;i<=e;i++)for(let L=Math.max(-e,-i-e);L<=Math.min(e,-i+e);L++)s.push(new c(L,i));return s}}class qL extends Cs{constructor(e,s){const i=[],L=new Map,a=(h,l)=>{const u=`${h},${l}`;if(!L.has(u)){const f={logicalCoordinates:new c(h,l),viewCoordinates:new c(h,l)};i.push(f),L.set(u,f)}return L.get(u)},o=rt.range(0,s).flatMap(h=>rt.range(0,e).map(l=>({logicalCoordinates:new c(l,h),vertices:[a(l,h),a(l+1,h),a(l+1,h+1),a(l,h+1)]})));super(Ts({vertices:i,faces:o}));H(this,"isSquare",!0);this.width=e,this.height=s,k()&&si(this)}}const Kt=(n,t)=>({name:n.name,parameters:{width:{label:"Width",type:"integer",range:new Xs(2,50)},height:{label:"Height",type:"integer",range:new Xs(2,50)},squareRegion:{label:"Square",type:"boolean"}},defaultParameterValues:{width:(t==null?void 0:t.width)??10,height:(t==null?void 0:t.height)??10,squareRegion:(t==null?void 0:t.squareRegion)??!1},scale:n.scale,generate:e=>{const s=n.polygons,i=n.basisA,L=n.basisB,a=[],o=new gt(-e.width/2,-e.height/2,e.width/2,e.height/2),h=gt.NOTHING.copy();s.forEach(p=>{p.forEach(A=>{h.addPoint(A)})});const l=Math.max(Math.abs(o.minX),Math.abs(o.maxX),Math.abs(o.minY),Math.abs(o.maxY))*20,u=gt.NOTHING.copy(),f=new c(0,0),d=new c(0,0),M=new c(0,0);return rt.range(-l,l).forEach(p=>{f.set(i).multiplyScalar(p),rt.range(-l,l).forEach(A=>{d.set(L).multiplyScalar(A),M.set(f).add(d),u.set(h).shift(M),o.intersectsBounds(u)&&s.forEach(x=>{const b=x.map(I=>I.plus(M)),w=jn(b),y=w.x*2/e.width,E=w.y*2/e.height;if(e.squareRegion){if(Math.abs(y)>=1||Math.abs(E)>=1-1e-6)return}else if(Math.sqrt(y*y+E*E)>=1-1e-6)return;a.push(b)})})}),a}});/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */const TL=4,Ln=0,rn=1,PL=2;function Ge(n){let t=n.length;for(;--t>=0;)n[t]=0}const IL=0,ni=1,CL=2,BL=3,FL=258,Bs=29,w1=256,u1=w1+1+Bs,De=30,Fs=19,ii=2*u1+1,be=15,K1=16,kL=7,ks=256,Li=16,ri=17,ai=18,gs=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),I1=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),RL=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),oi=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),NL=512,ue=new Array((u1+2)*2);Ge(ue);const e1=new Array(De*2);Ge(e1);const M1=new Array(NL);Ge(M1);const d1=new Array(FL-BL+1);Ge(d1);const Rs=new Array(Bs);Ge(Rs);const R1=new Array(De);Ge(R1);function $1(n,t,e,s,i){this.static_tree=n,this.extra_bits=t,this.extra_base=e,this.elems=s,this.max_length=i,this.has_stree=n&&n.length}let li,hi,ci;function ts(n,t){this.dyn_tree=n,this.max_code=0,this.stat_desc=t}const ui=n=>n<256?M1[n]:M1[256+(n>>>7)],f1=(n,t)=>{n.pending_buf[n.pending++]=t&255,n.pending_buf[n.pending++]=t>>>8&255},Ot=(n,t,e)=>{n.bi_valid>K1-e?(n.bi_buf|=t<<n.bi_valid&65535,f1(n,n.bi_buf),n.bi_buf=t>>K1-n.bi_valid,n.bi_valid+=e-K1):(n.bi_buf|=t<<n.bi_valid&65535,n.bi_valid+=e)},ne=(n,t,e)=>{Ot(n,e[t*2],e[t*2+1])},Mi=(n,t)=>{let e=0;do e|=n&1,n>>>=1,e<<=1;while(--t>0);return e>>>1},zL=n=>{n.bi_valid===16?(f1(n,n.bi_buf),n.bi_buf=0,n.bi_valid=0):n.bi_valid>=8&&(n.pending_buf[n.pending++]=n.bi_buf&255,n.bi_buf>>=8,n.bi_valid-=8)},OL=(n,t)=>{const e=t.dyn_tree,s=t.max_code,i=t.stat_desc.static_tree,L=t.stat_desc.has_stree,a=t.stat_desc.extra_bits,o=t.stat_desc.extra_base,h=t.stat_desc.max_length;let l,u,f,d,M,p,A=0;for(d=0;d<=be;d++)n.bl_count[d]=0;for(e[n.heap[n.heap_max]*2+1]=0,l=n.heap_max+1;l<ii;l++)u=n.heap[l],d=e[e[u*2+1]*2+1]+1,d>h&&(d=h,A++),e[u*2+1]=d,!(u>s)&&(n.bl_count[d]++,M=0,u>=o&&(M=a[u-o]),p=e[u*2],n.opt_len+=p*(d+M),L&&(n.static_len+=p*(i[u*2+1]+M)));if(A!==0){do{for(d=h-1;n.bl_count[d]===0;)d--;n.bl_count[d]--,n.bl_count[d+1]+=2,n.bl_count[h]--,A-=2}while(A>0);for(d=h;d!==0;d--)for(u=n.bl_count[d];u!==0;)f=n.heap[--l],!(f>s)&&(e[f*2+1]!==d&&(n.opt_len+=(d-e[f*2+1])*e[f*2],e[f*2+1]=d),u--)}},di=(n,t,e)=>{const s=new Array(be+1);let i=0,L,a;for(L=1;L<=be;L++)i=i+e[L-1]<<1,s[L]=i;for(a=0;a<=t;a++){let o=n[a*2+1];o!==0&&(n[a*2]=Mi(s[o]++,o))}},DL=()=>{let n,t,e,s,i;const L=new Array(be+1);for(e=0,s=0;s<Bs-1;s++)for(Rs[s]=e,n=0;n<1<<gs[s];n++)d1[e++]=s;for(d1[e-1]=s,i=0,s=0;s<16;s++)for(R1[s]=i,n=0;n<1<<I1[s];n++)M1[i++]=s;for(i>>=7;s<De;s++)for(R1[s]=i<<7,n=0;n<1<<I1[s]-7;n++)M1[256+i++]=s;for(t=0;t<=be;t++)L[t]=0;for(n=0;n<=143;)ue[n*2+1]=8,n++,L[8]++;for(;n<=255;)ue[n*2+1]=9,n++,L[9]++;for(;n<=279;)ue[n*2+1]=7,n++,L[7]++;for(;n<=287;)ue[n*2+1]=8,n++,L[8]++;for(di(ue,u1+1,L),n=0;n<De;n++)e1[n*2+1]=5,e1[n*2]=Mi(n,5);li=new $1(ue,gs,w1+1,u1,be),hi=new $1(e1,I1,0,De,be),ci=new $1(new Array(0),RL,0,Fs,kL)},fi=n=>{let t;for(t=0;t<u1;t++)n.dyn_ltree[t*2]=0;for(t=0;t<De;t++)n.dyn_dtree[t*2]=0;for(t=0;t<Fs;t++)n.bl_tree[t*2]=0;n.dyn_ltree[ks*2]=1,n.opt_len=n.static_len=0,n.sym_next=n.matches=0},Zi=n=>{n.bi_valid>8?f1(n,n.bi_buf):n.bi_valid>0&&(n.pending_buf[n.pending++]=n.bi_buf),n.bi_buf=0,n.bi_valid=0},an=(n,t,e,s)=>{const i=t*2,L=e*2;return n[i]<n[L]||n[i]===n[L]&&s[t]<=s[e]},es=(n,t,e)=>{const s=n.heap[e];let i=e<<1;for(;i<=n.heap_len&&(i<n.heap_len&&an(t,n.heap[i+1],n.heap[i],n.depth)&&i++,!an(t,s,n.heap[i],n.depth));)n.heap[e]=n.heap[i],e=i,i<<=1;n.heap[e]=s},on=(n,t,e)=>{let s,i,L=0,a,o;if(n.sym_next!==0)do s=n.pending_buf[n.sym_buf+L++]&255,s+=(n.pending_buf[n.sym_buf+L++]&255)<<8,i=n.pending_buf[n.sym_buf+L++],s===0?ne(n,i,t):(a=d1[i],ne(n,a+w1+1,t),o=gs[a],o!==0&&(i-=Rs[a],Ot(n,i,o)),s--,a=ui(s),ne(n,a,e),o=I1[a],o!==0&&(s-=R1[a],Ot(n,s,o)));while(L<n.sym_next);ne(n,ks,t)},ps=(n,t)=>{const e=t.dyn_tree,s=t.stat_desc.static_tree,i=t.stat_desc.has_stree,L=t.stat_desc.elems;let a,o,h=-1,l;for(n.heap_len=0,n.heap_max=ii,a=0;a<L;a++)e[a*2]!==0?(n.heap[++n.heap_len]=h=a,n.depth[a]=0):e[a*2+1]=0;for(;n.heap_len<2;)l=n.heap[++n.heap_len]=h<2?++h:0,e[l*2]=1,n.depth[l]=0,n.opt_len--,i&&(n.static_len-=s[l*2+1]);for(t.max_code=h,a=n.heap_len>>1;a>=1;a--)es(n,e,a);l=L;do a=n.heap[1],n.heap[1]=n.heap[n.heap_len--],es(n,e,1),o=n.heap[1],n.heap[--n.heap_max]=a,n.heap[--n.heap_max]=o,e[l*2]=e[a*2]+e[o*2],n.depth[l]=(n.depth[a]>=n.depth[o]?n.depth[a]:n.depth[o])+1,e[a*2+1]=e[o*2+1]=l,n.heap[1]=l++,es(n,e,1);while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1],OL(n,t),di(e,h,n.bl_count)},ln=(n,t,e)=>{let s,i=-1,L,a=t[0*2+1],o=0,h=7,l=4;for(a===0&&(h=138,l=3),t[(e+1)*2+1]=65535,s=0;s<=e;s++)L=a,a=t[(s+1)*2+1],!(++o<h&&L===a)&&(o<l?n.bl_tree[L*2]+=o:L!==0?(L!==i&&n.bl_tree[L*2]++,n.bl_tree[Li*2]++):o<=10?n.bl_tree[ri*2]++:n.bl_tree[ai*2]++,o=0,i=L,a===0?(h=138,l=3):L===a?(h=6,l=3):(h=7,l=4))},hn=(n,t,e)=>{let s,i=-1,L,a=t[0*2+1],o=0,h=7,l=4;for(a===0&&(h=138,l=3),s=0;s<=e;s++)if(L=a,a=t[(s+1)*2+1],!(++o<h&&L===a)){if(o<l)do ne(n,L,n.bl_tree);while(--o!==0);else L!==0?(L!==i&&(ne(n,L,n.bl_tree),o--),ne(n,Li,n.bl_tree),Ot(n,o-3,2)):o<=10?(ne(n,ri,n.bl_tree),Ot(n,o-3,3)):(ne(n,ai,n.bl_tree),Ot(n,o-11,7));o=0,i=L,a===0?(h=138,l=3):L===a?(h=6,l=3):(h=7,l=4)}},HL=n=>{let t;for(ln(n,n.dyn_ltree,n.l_desc.max_code),ln(n,n.dyn_dtree,n.d_desc.max_code),ps(n,n.bl_desc),t=Fs-1;t>=3&&n.bl_tree[oi[t]*2+1]===0;t--);return n.opt_len+=3*(t+1)+5+5+4,t},VL=(n,t,e,s)=>{let i;for(Ot(n,t-257,5),Ot(n,e-1,5),Ot(n,s-4,4),i=0;i<s;i++)Ot(n,n.bl_tree[oi[i]*2+1],3);hn(n,n.dyn_ltree,t-1),hn(n,n.dyn_dtree,e-1)},YL=n=>{let t=4093624447,e;for(e=0;e<=31;e++,t>>>=1)if(t&1&&n.dyn_ltree[e*2]!==0)return Ln;if(n.dyn_ltree[9*2]!==0||n.dyn_ltree[10*2]!==0||n.dyn_ltree[13*2]!==0)return rn;for(e=32;e<w1;e++)if(n.dyn_ltree[e*2]!==0)return rn;return Ln};let cn=!1;const XL=n=>{cn||(DL(),cn=!0),n.l_desc=new ts(n.dyn_ltree,li),n.d_desc=new ts(n.dyn_dtree,hi),n.bl_desc=new ts(n.bl_tree,ci),n.bi_buf=0,n.bi_valid=0,fi(n)},gi=(n,t,e,s)=>{Ot(n,(IL<<1)+(s?1:0),3),Zi(n),f1(n,e),f1(n,~e),e&&n.pending_buf.set(n.window.subarray(t,t+e),n.pending),n.pending+=e},GL=n=>{Ot(n,ni<<1,3),ne(n,ks,ue),zL(n)},UL=(n,t,e,s)=>{let i,L,a=0;n.level>0?(n.strm.data_type===PL&&(n.strm.data_type=YL(n)),ps(n,n.l_desc),ps(n,n.d_desc),a=HL(n),i=n.opt_len+3+7>>>3,L=n.static_len+3+7>>>3,L<=i&&(i=L)):i=L=e+5,e+4<=i&&t!==-1?gi(n,t,e,s):n.strategy===TL||L===i?(Ot(n,(ni<<1)+(s?1:0),3),on(n,ue,e1)):(Ot(n,(CL<<1)+(s?1:0),3),VL(n,n.l_desc.max_code+1,n.d_desc.max_code+1,a+1),on(n,n.dyn_ltree,n.dyn_dtree)),fi(n),s&&Zi(n)},WL=(n,t,e)=>(n.pending_buf[n.sym_buf+n.sym_next++]=t,n.pending_buf[n.sym_buf+n.sym_next++]=t>>8,n.pending_buf[n.sym_buf+n.sym_next++]=e,t===0?n.dyn_ltree[e*2]++:(n.matches++,t--,n.dyn_ltree[(d1[e]+w1+1)*2]++,n.dyn_dtree[ui(t)*2]++),n.sym_next===n.sym_end);var JL=XL,QL=gi,jL=UL,KL=WL,$L=GL,tr={_tr_init:JL,_tr_stored_block:QL,_tr_flush_block:jL,_tr_tally:KL,_tr_align:$L};const er=(n,t,e,s)=>{let i=n&65535|0,L=n>>>16&65535|0,a=0;for(;e!==0;){a=e>2e3?2e3:e,e-=a;do i=i+t[s++]|0,L=L+i|0;while(--a);i%=65521,L%=65521}return i|L<<16|0};var Z1=er;const sr=()=>{let n,t=[];for(var e=0;e<256;e++){n=e;for(var s=0;s<8;s++)n=n&1?3988292384^n>>>1:n>>>1;t[e]=n}return t},nr=new Uint32Array(sr()),ir=(n,t,e,s)=>{const i=nr,L=s+e;n^=-1;for(let a=s;a<L;a++)n=n>>>8^i[(n^t[a])&255];return n^-1};var yt=ir,ye={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Pe={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Lr,_tr_stored_block:ms,_tr_flush_block:rr,_tr_tally:pe,_tr_align:ar}=tr,{Z_NO_FLUSH:me,Z_PARTIAL_FLUSH:or,Z_FULL_FLUSH:lr,Z_FINISH:Qt,Z_BLOCK:un,Z_OK:Tt,Z_STREAM_END:Mn,Z_STREAM_ERROR:Le,Z_DATA_ERROR:hr,Z_BUF_ERROR:ss,Z_DEFAULT_COMPRESSION:cr,Z_FILTERED:ur,Z_HUFFMAN_ONLY:y1,Z_RLE:Mr,Z_FIXED:dr,Z_DEFAULT_STRATEGY:fr,Z_UNKNOWN:Zr,Z_DEFLATED:H1}=Pe,gr=9,pr=15,mr=8,wr=29,_r=256,ws=_r+1+wr,xr=30,vr=19,br=2*ws+1,Ar=15,nt=3,Ze=258,re=Ze+nt+1,Er=32,Ve=42,Ns=57,_s=69,xs=73,vs=91,bs=103,Ae=113,Ke=666,zt=1,Ue=2,Se=3,We=4,yr=3,Ee=(n,t)=>(n.msg=ye[t],t),dn=n=>n*2-(n>4?9:0),fe=n=>{let t=n.length;for(;--t>=0;)n[t]=0},Sr=n=>{let t,e,s,i=n.w_size;t=n.hash_size,s=t;do e=n.head[--s],n.head[s]=e>=i?e-i:0;while(--t);t=i,s=t;do e=n.prev[--s],n.prev[s]=e>=i?e-i:0;while(--t)};let qr=(n,t,e)=>(t<<n.hash_shift^e)&n.hash_mask,we=qr;const Ht=n=>{const t=n.state;let e=t.pending;e>n.avail_out&&(e=n.avail_out),e!==0&&(n.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+e),n.next_out),n.next_out+=e,t.pending_out+=e,n.total_out+=e,n.avail_out-=e,t.pending-=e,t.pending===0&&(t.pending_out=0))},Vt=(n,t)=>{rr(n,n.block_start>=0?n.block_start:-1,n.strstart-n.block_start,t),n.block_start=n.strstart,Ht(n.strm)},at=(n,t)=>{n.pending_buf[n.pending++]=t},je=(n,t)=>{n.pending_buf[n.pending++]=t>>>8&255,n.pending_buf[n.pending++]=t&255},As=(n,t,e,s)=>{let i=n.avail_in;return i>s&&(i=s),i===0?0:(n.avail_in-=i,t.set(n.input.subarray(n.next_in,n.next_in+i),e),n.state.wrap===1?n.adler=Z1(n.adler,t,i,e):n.state.wrap===2&&(n.adler=yt(n.adler,t,i,e)),n.next_in+=i,n.total_in+=i,i)},pi=(n,t)=>{let e=n.max_chain_length,s=n.strstart,i,L,a=n.prev_length,o=n.nice_match;const h=n.strstart>n.w_size-re?n.strstart-(n.w_size-re):0,l=n.window,u=n.w_mask,f=n.prev,d=n.strstart+Ze;let M=l[s+a-1],p=l[s+a];n.prev_length>=n.good_match&&(e>>=2),o>n.lookahead&&(o=n.lookahead);do if(i=t,!(l[i+a]!==p||l[i+a-1]!==M||l[i]!==l[s]||l[++i]!==l[s+1])){s+=2,i++;do;while(l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&l[++s]===l[++i]&&s<d);if(L=Ze-(d-s),s=d-Ze,L>a){if(n.match_start=t,a=L,L>=o)break;M=l[s+a-1],p=l[s+a]}}while((t=f[t&u])>h&&--e!==0);return a<=n.lookahead?a:n.lookahead},Ye=n=>{const t=n.w_size;let e,s,i;do{if(s=n.window_size-n.lookahead-n.strstart,n.strstart>=t+(t-re)&&(n.window.set(n.window.subarray(t,t+t-s),0),n.match_start-=t,n.strstart-=t,n.block_start-=t,n.insert>n.strstart&&(n.insert=n.strstart),Sr(n),s+=t),n.strm.avail_in===0)break;if(e=As(n.strm,n.window,n.strstart+n.lookahead,s),n.lookahead+=e,n.lookahead+n.insert>=nt)for(i=n.strstart-n.insert,n.ins_h=n.window[i],n.ins_h=we(n,n.ins_h,n.window[i+1]);n.insert&&(n.ins_h=we(n,n.ins_h,n.window[i+nt-1]),n.prev[i&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=i,i++,n.insert--,!(n.lookahead+n.insert<nt)););}while(n.lookahead<re&&n.strm.avail_in!==0)},mi=(n,t)=>{let e=n.pending_buf_size-5>n.w_size?n.w_size:n.pending_buf_size-5,s,i,L,a=0,o=n.strm.avail_in;do{if(s=65535,L=n.bi_valid+42>>3,n.strm.avail_out<L||(L=n.strm.avail_out-L,i=n.strstart-n.block_start,s>i+n.strm.avail_in&&(s=i+n.strm.avail_in),s>L&&(s=L),s<e&&(s===0&&t!==Qt||t===me||s!==i+n.strm.avail_in)))break;a=t===Qt&&s===i+n.strm.avail_in?1:0,ms(n,0,0,a),n.pending_buf[n.pending-4]=s,n.pending_buf[n.pending-3]=s>>8,n.pending_buf[n.pending-2]=~s,n.pending_buf[n.pending-1]=~s>>8,Ht(n.strm),i&&(i>s&&(i=s),n.strm.output.set(n.window.subarray(n.block_start,n.block_start+i),n.strm.next_out),n.strm.next_out+=i,n.strm.avail_out-=i,n.strm.total_out+=i,n.block_start+=i,s-=i),s&&(As(n.strm,n.strm.output,n.strm.next_out,s),n.strm.next_out+=s,n.strm.avail_out-=s,n.strm.total_out+=s)}while(a===0);return o-=n.strm.avail_in,o&&(o>=n.w_size?(n.matches=2,n.window.set(n.strm.input.subarray(n.strm.next_in-n.w_size,n.strm.next_in),0),n.strstart=n.w_size,n.insert=n.strstart):(n.window_size-n.strstart<=o&&(n.strstart-=n.w_size,n.window.set(n.window.subarray(n.w_size,n.w_size+n.strstart),0),n.matches<2&&n.matches++,n.insert>n.strstart&&(n.insert=n.strstart)),n.window.set(n.strm.input.subarray(n.strm.next_in-o,n.strm.next_in),n.strstart),n.strstart+=o,n.insert+=o>n.w_size-n.insert?n.w_size-n.insert:o),n.block_start=n.strstart),n.high_water<n.strstart&&(n.high_water=n.strstart),a?We:t!==me&&t!==Qt&&n.strm.avail_in===0&&n.strstart===n.block_start?Ue:(L=n.window_size-n.strstart,n.strm.avail_in>L&&n.block_start>=n.w_size&&(n.block_start-=n.w_size,n.strstart-=n.w_size,n.window.set(n.window.subarray(n.w_size,n.w_size+n.strstart),0),n.matches<2&&n.matches++,L+=n.w_size,n.insert>n.strstart&&(n.insert=n.strstart)),L>n.strm.avail_in&&(L=n.strm.avail_in),L&&(As(n.strm,n.window,n.strstart,L),n.strstart+=L,n.insert+=L>n.w_size-n.insert?n.w_size-n.insert:L),n.high_water<n.strstart&&(n.high_water=n.strstart),L=n.bi_valid+42>>3,L=n.pending_buf_size-L>65535?65535:n.pending_buf_size-L,e=L>n.w_size?n.w_size:L,i=n.strstart-n.block_start,(i>=e||(i||t===Qt)&&t!==me&&n.strm.avail_in===0&&i<=L)&&(s=i>L?L:i,a=t===Qt&&n.strm.avail_in===0&&s===i?1:0,ms(n,n.block_start,s,a),n.block_start+=s,Ht(n.strm)),a?Se:zt)},ns=(n,t)=>{let e,s;for(;;){if(n.lookahead<re){if(Ye(n),n.lookahead<re&&t===me)return zt;if(n.lookahead===0)break}if(e=0,n.lookahead>=nt&&(n.ins_h=we(n,n.ins_h,n.window[n.strstart+nt-1]),e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart),e!==0&&n.strstart-e<=n.w_size-re&&(n.match_length=pi(n,e)),n.match_length>=nt)if(s=pe(n,n.strstart-n.match_start,n.match_length-nt),n.lookahead-=n.match_length,n.match_length<=n.max_lazy_match&&n.lookahead>=nt){n.match_length--;do n.strstart++,n.ins_h=we(n,n.ins_h,n.window[n.strstart+nt-1]),e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart;while(--n.match_length!==0);n.strstart++}else n.strstart+=n.match_length,n.match_length=0,n.ins_h=n.window[n.strstart],n.ins_h=we(n,n.ins_h,n.window[n.strstart+1]);else s=pe(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++;if(s&&(Vt(n,!1),n.strm.avail_out===0))return zt}return n.insert=n.strstart<nt-1?n.strstart:nt-1,t===Qt?(Vt(n,!0),n.strm.avail_out===0?Se:We):n.sym_next&&(Vt(n,!1),n.strm.avail_out===0)?zt:Ue},Fe=(n,t)=>{let e,s,i;for(;;){if(n.lookahead<re){if(Ye(n),n.lookahead<re&&t===me)return zt;if(n.lookahead===0)break}if(e=0,n.lookahead>=nt&&(n.ins_h=we(n,n.ins_h,n.window[n.strstart+nt-1]),e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart),n.prev_length=n.match_length,n.prev_match=n.match_start,n.match_length=nt-1,e!==0&&n.prev_length<n.max_lazy_match&&n.strstart-e<=n.w_size-re&&(n.match_length=pi(n,e),n.match_length<=5&&(n.strategy===ur||n.match_length===nt&&n.strstart-n.match_start>4096)&&(n.match_length=nt-1)),n.prev_length>=nt&&n.match_length<=n.prev_length){i=n.strstart+n.lookahead-nt,s=pe(n,n.strstart-1-n.prev_match,n.prev_length-nt),n.lookahead-=n.prev_length-1,n.prev_length-=2;do++n.strstart<=i&&(n.ins_h=we(n,n.ins_h,n.window[n.strstart+nt-1]),e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=n.strstart);while(--n.prev_length!==0);if(n.match_available=0,n.match_length=nt-1,n.strstart++,s&&(Vt(n,!1),n.strm.avail_out===0))return zt}else if(n.match_available){if(s=pe(n,0,n.window[n.strstart-1]),s&&Vt(n,!1),n.strstart++,n.lookahead--,n.strm.avail_out===0)return zt}else n.match_available=1,n.strstart++,n.lookahead--}return n.match_available&&(s=pe(n,0,n.window[n.strstart-1]),n.match_available=0),n.insert=n.strstart<nt-1?n.strstart:nt-1,t===Qt?(Vt(n,!0),n.strm.avail_out===0?Se:We):n.sym_next&&(Vt(n,!1),n.strm.avail_out===0)?zt:Ue},Tr=(n,t)=>{let e,s,i,L;const a=n.window;for(;;){if(n.lookahead<=Ze){if(Ye(n),n.lookahead<=Ze&&t===me)return zt;if(n.lookahead===0)break}if(n.match_length=0,n.lookahead>=nt&&n.strstart>0&&(i=n.strstart-1,s=a[i],s===a[++i]&&s===a[++i]&&s===a[++i])){L=n.strstart+Ze;do;while(s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&s===a[++i]&&i<L);n.match_length=Ze-(L-i),n.match_length>n.lookahead&&(n.match_length=n.lookahead)}if(n.match_length>=nt?(e=pe(n,1,n.match_length-nt),n.lookahead-=n.match_length,n.strstart+=n.match_length,n.match_length=0):(e=pe(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++),e&&(Vt(n,!1),n.strm.avail_out===0))return zt}return n.insert=0,t===Qt?(Vt(n,!0),n.strm.avail_out===0?Se:We):n.sym_next&&(Vt(n,!1),n.strm.avail_out===0)?zt:Ue},Pr=(n,t)=>{let e;for(;;){if(n.lookahead===0&&(Ye(n),n.lookahead===0)){if(t===me)return zt;break}if(n.match_length=0,e=pe(n,0,n.window[n.strstart]),n.lookahead--,n.strstart++,e&&(Vt(n,!1),n.strm.avail_out===0))return zt}return n.insert=0,t===Qt?(Vt(n,!0),n.strm.avail_out===0?Se:We):n.sym_next&&(Vt(n,!1),n.strm.avail_out===0)?zt:Ue};function ee(n,t,e,s,i){this.good_length=n,this.max_lazy=t,this.nice_length=e,this.max_chain=s,this.func=i}const $e=[new ee(0,0,0,0,mi),new ee(4,4,8,4,ns),new ee(4,5,16,8,ns),new ee(4,6,32,32,ns),new ee(4,4,16,16,Fe),new ee(8,16,32,32,Fe),new ee(8,16,128,128,Fe),new ee(8,32,128,256,Fe),new ee(32,128,258,1024,Fe),new ee(32,258,258,4096,Fe)],Ir=n=>{n.window_size=2*n.w_size,fe(n.head),n.max_lazy_match=$e[n.level].max_lazy,n.good_match=$e[n.level].good_length,n.nice_match=$e[n.level].nice_length,n.max_chain_length=$e[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=nt-1,n.match_available=0,n.ins_h=0};function Cr(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=H1,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(br*2),this.dyn_dtree=new Uint16Array((2*xr+1)*2),this.bl_tree=new Uint16Array((2*vr+1)*2),fe(this.dyn_ltree),fe(this.dyn_dtree),fe(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(Ar+1),this.heap=new Uint16Array(2*ws+1),fe(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*ws+1),fe(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const _1=n=>{if(!n)return 1;const t=n.state;return!t||t.strm!==n||t.status!==Ve&&t.status!==Ns&&t.status!==_s&&t.status!==xs&&t.status!==vs&&t.status!==bs&&t.status!==Ae&&t.status!==Ke?1:0},wi=n=>{if(_1(n))return Ee(n,Le);n.total_in=n.total_out=0,n.data_type=Zr;const t=n.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap===2?Ns:t.wrap?Ve:Ae,n.adler=t.wrap===2?0:1,t.last_flush=-2,Lr(t),Tt},_i=n=>{const t=wi(n);return t===Tt&&Ir(n.state),t},Br=(n,t)=>_1(n)||n.state.wrap!==2?Le:(n.state.gzhead=t,Tt),xi=(n,t,e,s,i,L)=>{if(!n)return Le;let a=1;if(t===cr&&(t=6),s<0?(a=0,s=-s):s>15&&(a=2,s-=16),i<1||i>gr||e!==H1||s<8||s>15||t<0||t>9||L<0||L>dr||s===8&&a!==1)return Ee(n,Le);s===8&&(s=9);const o=new Cr;return n.state=o,o.strm=n,o.status=Ve,o.wrap=a,o.gzhead=null,o.w_bits=s,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+nt-1)/nt),o.window=new Uint8Array(o.w_size*2),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=o.lit_bufsize*4,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=(o.lit_bufsize-1)*3,o.level=t,o.strategy=L,o.method=e,_i(n)},Fr=(n,t)=>xi(n,t,H1,pr,mr,fr),kr=(n,t)=>{if(_1(n)||t>un||t<0)return n?Ee(n,Le):Le;const e=n.state;if(!n.output||n.avail_in!==0&&!n.input||e.status===Ke&&t!==Qt)return Ee(n,n.avail_out===0?ss:Le);const s=e.last_flush;if(e.last_flush=t,e.pending!==0){if(Ht(n),n.avail_out===0)return e.last_flush=-1,Tt}else if(n.avail_in===0&&dn(t)<=dn(s)&&t!==Qt)return Ee(n,ss);if(e.status===Ke&&n.avail_in!==0)return Ee(n,ss);if(e.status===Ve&&e.wrap===0&&(e.status=Ae),e.status===Ve){let i=H1+(e.w_bits-8<<4)<<8,L=-1;if(e.strategy>=y1||e.level<2?L=0:e.level<6?L=1:e.level===6?L=2:L=3,i|=L<<6,e.strstart!==0&&(i|=Er),i+=31-i%31,je(e,i),e.strstart!==0&&(je(e,n.adler>>>16),je(e,n.adler&65535)),n.adler=1,e.status=Ae,Ht(n),e.pending!==0)return e.last_flush=-1,Tt}if(e.status===Ns){if(n.adler=0,at(e,31),at(e,139),at(e,8),e.gzhead)at(e,(e.gzhead.text?1:0)+(e.gzhead.hcrc?2:0)+(e.gzhead.extra?4:0)+(e.gzhead.name?8:0)+(e.gzhead.comment?16:0)),at(e,e.gzhead.time&255),at(e,e.gzhead.time>>8&255),at(e,e.gzhead.time>>16&255),at(e,e.gzhead.time>>24&255),at(e,e.level===9?2:e.strategy>=y1||e.level<2?4:0),at(e,e.gzhead.os&255),e.gzhead.extra&&e.gzhead.extra.length&&(at(e,e.gzhead.extra.length&255),at(e,e.gzhead.extra.length>>8&255)),e.gzhead.hcrc&&(n.adler=yt(n.adler,e.pending_buf,e.pending,0)),e.gzindex=0,e.status=_s;else if(at(e,0),at(e,0),at(e,0),at(e,0),at(e,0),at(e,e.level===9?2:e.strategy>=y1||e.level<2?4:0),at(e,yr),e.status=Ae,Ht(n),e.pending!==0)return e.last_flush=-1,Tt}if(e.status===_s){if(e.gzhead.extra){let i=e.pending,L=(e.gzhead.extra.length&65535)-e.gzindex;for(;e.pending+L>e.pending_buf_size;){let o=e.pending_buf_size-e.pending;if(e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex,e.gzindex+o),e.pending),e.pending=e.pending_buf_size,e.gzhead.hcrc&&e.pending>i&&(n.adler=yt(n.adler,e.pending_buf,e.pending-i,i)),e.gzindex+=o,Ht(n),e.pending!==0)return e.last_flush=-1,Tt;i=0,L-=o}let a=new Uint8Array(e.gzhead.extra);e.pending_buf.set(a.subarray(e.gzindex,e.gzindex+L),e.pending),e.pending+=L,e.gzhead.hcrc&&e.pending>i&&(n.adler=yt(n.adler,e.pending_buf,e.pending-i,i)),e.gzindex=0}e.status=xs}if(e.status===xs){if(e.gzhead.name){let i=e.pending,L;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>i&&(n.adler=yt(n.adler,e.pending_buf,e.pending-i,i)),Ht(n),e.pending!==0)return e.last_flush=-1,Tt;i=0}e.gzindex<e.gzhead.name.length?L=e.gzhead.name.charCodeAt(e.gzindex++)&255:L=0,at(e,L)}while(L!==0);e.gzhead.hcrc&&e.pending>i&&(n.adler=yt(n.adler,e.pending_buf,e.pending-i,i)),e.gzindex=0}e.status=vs}if(e.status===vs){if(e.gzhead.comment){let i=e.pending,L;do{if(e.pending===e.pending_buf_size){if(e.gzhead.hcrc&&e.pending>i&&(n.adler=yt(n.adler,e.pending_buf,e.pending-i,i)),Ht(n),e.pending!==0)return e.last_flush=-1,Tt;i=0}e.gzindex<e.gzhead.comment.length?L=e.gzhead.comment.charCodeAt(e.gzindex++)&255:L=0,at(e,L)}while(L!==0);e.gzhead.hcrc&&e.pending>i&&(n.adler=yt(n.adler,e.pending_buf,e.pending-i,i))}e.status=bs}if(e.status===bs){if(e.gzhead.hcrc){if(e.pending+2>e.pending_buf_size&&(Ht(n),e.pending!==0))return e.last_flush=-1,Tt;at(e,n.adler&255),at(e,n.adler>>8&255),n.adler=0}if(e.status=Ae,Ht(n),e.pending!==0)return e.last_flush=-1,Tt}if(n.avail_in!==0||e.lookahead!==0||t!==me&&e.status!==Ke){let i=e.level===0?mi(e,t):e.strategy===y1?Pr(e,t):e.strategy===Mr?Tr(e,t):$e[e.level].func(e,t);if((i===Se||i===We)&&(e.status=Ke),i===zt||i===Se)return n.avail_out===0&&(e.last_flush=-1),Tt;if(i===Ue&&(t===or?ar(e):t!==un&&(ms(e,0,0,!1),t===lr&&(fe(e.head),e.lookahead===0&&(e.strstart=0,e.block_start=0,e.insert=0))),Ht(n),n.avail_out===0))return e.last_flush=-1,Tt}return t!==Qt?Tt:e.wrap<=0?Mn:(e.wrap===2?(at(e,n.adler&255),at(e,n.adler>>8&255),at(e,n.adler>>16&255),at(e,n.adler>>24&255),at(e,n.total_in&255),at(e,n.total_in>>8&255),at(e,n.total_in>>16&255),at(e,n.total_in>>24&255)):(je(e,n.adler>>>16),je(e,n.adler&65535)),Ht(n),e.wrap>0&&(e.wrap=-e.wrap),e.pending!==0?Tt:Mn)},Rr=n=>{if(_1(n))return Le;const t=n.state.status;return n.state=null,t===Ae?Ee(n,hr):Tt},Nr=(n,t)=>{let e=t.length;if(_1(n))return Le;const s=n.state,i=s.wrap;if(i===2||i===1&&s.status!==Ve||s.lookahead)return Le;if(i===1&&(n.adler=Z1(n.adler,t,e,0)),s.wrap=0,e>=s.w_size){i===0&&(fe(s.head),s.strstart=0,s.block_start=0,s.insert=0);let h=new Uint8Array(s.w_size);h.set(t.subarray(e-s.w_size,e),0),t=h,e=s.w_size}const L=n.avail_in,a=n.next_in,o=n.input;for(n.avail_in=e,n.next_in=0,n.input=t,Ye(s);s.lookahead>=nt;){let h=s.strstart,l=s.lookahead-(nt-1);do s.ins_h=we(s,s.ins_h,s.window[h+nt-1]),s.prev[h&s.w_mask]=s.head[s.ins_h],s.head[s.ins_h]=h,h++;while(--l);s.strstart=h,s.lookahead=nt-1,Ye(s)}return s.strstart+=s.lookahead,s.block_start=s.strstart,s.insert=s.lookahead,s.lookahead=0,s.match_length=s.prev_length=nt-1,s.match_available=0,n.next_in=a,n.input=o,n.avail_in=L,s.wrap=i,Tt};var zr=Fr,Or=xi,Dr=_i,Hr=wi,Vr=Br,Yr=kr,Xr=Rr,Gr=Nr,Ur="pako deflate (from Nodeca project)",s1={deflateInit:zr,deflateInit2:Or,deflateReset:Dr,deflateResetKeep:Hr,deflateSetHeader:Vr,deflate:Yr,deflateEnd:Xr,deflateSetDictionary:Gr,deflateInfo:Ur};const Wr=(n,t)=>Object.prototype.hasOwnProperty.call(n,t);var Jr=function(n){const t=Array.prototype.slice.call(arguments,1);for(;t.length;){const e=t.shift();if(e){if(typeof e!="object")throw new TypeError(e+"must be non-object");for(const s in e)Wr(e,s)&&(n[s]=e[s])}}return n},Qr=n=>{let t=0;for(let s=0,i=n.length;s<i;s++)t+=n[s].length;const e=new Uint8Array(t);for(let s=0,i=0,L=n.length;s<L;s++){let a=n[s];e.set(a,i),i+=a.length}return e},V1={assign:Jr,flattenChunks:Qr};let vi=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{vi=!1}const g1=new Uint8Array(256);for(let n=0;n<256;n++)g1[n]=n>=252?6:n>=248?5:n>=240?4:n>=224?3:n>=192?2:1;g1[254]=g1[254]=1;var jr=n=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(n);let t,e,s,i,L,a=n.length,o=0;for(i=0;i<a;i++)e=n.charCodeAt(i),(e&64512)===55296&&i+1<a&&(s=n.charCodeAt(i+1),(s&64512)===56320&&(e=65536+(e-55296<<10)+(s-56320),i++)),o+=e<128?1:e<2048?2:e<65536?3:4;for(t=new Uint8Array(o),L=0,i=0;L<o;i++)e=n.charCodeAt(i),(e&64512)===55296&&i+1<a&&(s=n.charCodeAt(i+1),(s&64512)===56320&&(e=65536+(e-55296<<10)+(s-56320),i++)),e<128?t[L++]=e:e<2048?(t[L++]=192|e>>>6,t[L++]=128|e&63):e<65536?(t[L++]=224|e>>>12,t[L++]=128|e>>>6&63,t[L++]=128|e&63):(t[L++]=240|e>>>18,t[L++]=128|e>>>12&63,t[L++]=128|e>>>6&63,t[L++]=128|e&63);return t};const Kr=(n,t)=>{if(t<65534&&n.subarray&&vi)return String.fromCharCode.apply(null,n.length===t?n:n.subarray(0,t));let e="";for(let s=0;s<t;s++)e+=String.fromCharCode(n[s]);return e};var $r=(n,t)=>{const e=t||n.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(n.subarray(0,t));let s,i;const L=new Array(e*2);for(i=0,s=0;s<e;){let a=n[s++];if(a<128){L[i++]=a;continue}let o=g1[a];if(o>4){L[i++]=65533,s+=o-1;continue}for(a&=o===2?31:o===3?15:7;o>1&&s<e;)a=a<<6|n[s++]&63,o--;if(o>1){L[i++]=65533;continue}a<65536?L[i++]=a:(a-=65536,L[i++]=55296|a>>10&1023,L[i++]=56320|a&1023)}return Kr(L,i)},ta=(n,t)=>{t=t||n.length,t>n.length&&(t=n.length);let e=t-1;for(;e>=0&&(n[e]&192)===128;)e--;return e<0||e===0?t:e+g1[n[e]]>t?e:t},p1={string2buf:jr,buf2string:$r,utf8border:ta};function ea(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var bi=ea;const Ai=Object.prototype.toString,{Z_NO_FLUSH:sa,Z_SYNC_FLUSH:na,Z_FULL_FLUSH:ia,Z_FINISH:La,Z_OK:N1,Z_STREAM_END:ra,Z_DEFAULT_COMPRESSION:aa,Z_DEFAULT_STRATEGY:oa,Z_DEFLATED:la}=Pe;function x1(n){this.options=V1.assign({level:aa,method:la,chunkSize:16384,windowBits:15,memLevel:8,strategy:oa},n||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new bi,this.strm.avail_out=0;let e=s1.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(e!==N1)throw new Error(ye[e]);if(t.header&&s1.deflateSetHeader(this.strm,t.header),t.dictionary){let s;if(typeof t.dictionary=="string"?s=p1.string2buf(t.dictionary):Ai.call(t.dictionary)==="[object ArrayBuffer]"?s=new Uint8Array(t.dictionary):s=t.dictionary,e=s1.deflateSetDictionary(this.strm,s),e!==N1)throw new Error(ye[e]);this._dict_set=!0}}x1.prototype.push=function(n,t){const e=this.strm,s=this.options.chunkSize;let i,L;if(this.ended)return!1;for(t===~~t?L=t:L=t===!0?La:sa,typeof n=="string"?e.input=p1.string2buf(n):Ai.call(n)==="[object ArrayBuffer]"?e.input=new Uint8Array(n):e.input=n,e.next_in=0,e.avail_in=e.input.length;;){if(e.avail_out===0&&(e.output=new Uint8Array(s),e.next_out=0,e.avail_out=s),(L===na||L===ia)&&e.avail_out<=6){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(i=s1.deflate(e,L),i===ra)return e.next_out>0&&this.onData(e.output.subarray(0,e.next_out)),i=s1.deflateEnd(this.strm),this.onEnd(i),this.ended=!0,i===N1;if(e.avail_out===0){this.onData(e.output);continue}if(L>0&&e.next_out>0){this.onData(e.output.subarray(0,e.next_out)),e.avail_out=0;continue}if(e.avail_in===0)break}return!0};x1.prototype.onData=function(n){this.chunks.push(n)};x1.prototype.onEnd=function(n){n===N1&&(this.result=V1.flattenChunks(this.chunks)),this.chunks=[],this.err=n,this.msg=this.strm.msg};function zs(n,t){const e=new x1(t);if(e.push(n,!0),e.err)throw e.msg||ye[e.err];return e.result}function ha(n,t){return t=t||{},t.raw=!0,zs(n,t)}function ca(n,t){return t=t||{},t.gzip=!0,zs(n,t)}var ua=x1,Ma=zs,da=ha,fa=ca,Za=Pe,ga={Deflate:ua,deflate:Ma,deflateRaw:da,gzip:fa,constants:Za};const S1=16209,pa=16191;var ma=function(t,e){let s,i,L,a,o,h,l,u,f,d,M,p,A,x,b,w,y,E,I,B,q,N,C,F;const T=t.state;s=t.next_in,C=t.input,i=s+(t.avail_in-5),L=t.next_out,F=t.output,a=L-(e-t.avail_out),o=L+(t.avail_out-257),h=T.dmax,l=T.wsize,u=T.whave,f=T.wnext,d=T.window,M=T.hold,p=T.bits,A=T.lencode,x=T.distcode,b=(1<<T.lenbits)-1,w=(1<<T.distbits)-1;t:do{p<15&&(M+=C[s++]<<p,p+=8,M+=C[s++]<<p,p+=8),y=A[M&b];e:for(;;){if(E=y>>>24,M>>>=E,p-=E,E=y>>>16&255,E===0)F[L++]=y&65535;else if(E&16){I=y&65535,E&=15,E&&(p<E&&(M+=C[s++]<<p,p+=8),I+=M&(1<<E)-1,M>>>=E,p-=E),p<15&&(M+=C[s++]<<p,p+=8,M+=C[s++]<<p,p+=8),y=x[M&w];s:for(;;){if(E=y>>>24,M>>>=E,p-=E,E=y>>>16&255,E&16){if(B=y&65535,E&=15,p<E&&(M+=C[s++]<<p,p+=8,p<E&&(M+=C[s++]<<p,p+=8)),B+=M&(1<<E)-1,B>h){t.msg="invalid distance too far back",T.mode=S1;break t}if(M>>>=E,p-=E,E=L-a,B>E){if(E=B-E,E>u&&T.sane){t.msg="invalid distance too far back",T.mode=S1;break t}if(q=0,N=d,f===0){if(q+=l-E,E<I){I-=E;do F[L++]=d[q++];while(--E);q=L-B,N=F}}else if(f<E){if(q+=l+f-E,E-=f,E<I){I-=E;do F[L++]=d[q++];while(--E);if(q=0,f<I){E=f,I-=E;do F[L++]=d[q++];while(--E);q=L-B,N=F}}}else if(q+=f-E,E<I){I-=E;do F[L++]=d[q++];while(--E);q=L-B,N=F}for(;I>2;)F[L++]=N[q++],F[L++]=N[q++],F[L++]=N[q++],I-=3;I&&(F[L++]=N[q++],I>1&&(F[L++]=N[q++]))}else{q=L-B;do F[L++]=F[q++],F[L++]=F[q++],F[L++]=F[q++],I-=3;while(I>2);I&&(F[L++]=F[q++],I>1&&(F[L++]=F[q++]))}}else if(E&64){t.msg="invalid distance code",T.mode=S1;break t}else{y=x[(y&65535)+(M&(1<<E)-1)];continue s}break}}else if(E&64)if(E&32){T.mode=pa;break t}else{t.msg="invalid literal/length code",T.mode=S1;break t}else{y=A[(y&65535)+(M&(1<<E)-1)];continue e}break}}while(s<i&&L<o);I=p>>3,s-=I,p-=I<<3,M&=(1<<p)-1,t.next_in=s,t.next_out=L,t.avail_in=s<i?5+(i-s):5-(s-i),t.avail_out=L<o?257+(o-L):257-(L-o),T.hold=M,T.bits=p};const ke=15,fn=852,Zn=592,gn=0,is=1,pn=2,wa=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),_a=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),xa=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),va=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),ba=(n,t,e,s,i,L,a,o)=>{const h=o.bits;let l=0,u=0,f=0,d=0,M=0,p=0,A=0,x=0,b=0,w=0,y,E,I,B,q,N=null,C;const F=new Uint16Array(ke+1),T=new Uint16Array(ke+1);let U=null,mt,Y,V;for(l=0;l<=ke;l++)F[l]=0;for(u=0;u<s;u++)F[t[e+u]]++;for(M=h,d=ke;d>=1&&F[d]===0;d--);if(M>d&&(M=d),d===0)return i[L++]=1<<24|64<<16|0,i[L++]=1<<24|64<<16|0,o.bits=1,0;for(f=1;f<d&&F[f]===0;f++);for(M<f&&(M=f),x=1,l=1;l<=ke;l++)if(x<<=1,x-=F[l],x<0)return-1;if(x>0&&(n===gn||d!==1))return-1;for(T[1]=0,l=1;l<ke;l++)T[l+1]=T[l]+F[l];for(u=0;u<s;u++)t[e+u]!==0&&(a[T[t[e+u]]++]=u);if(n===gn?(N=U=a,C=20):n===is?(N=wa,U=_a,C=257):(N=xa,U=va,C=0),w=0,u=0,l=f,q=L,p=M,A=0,I=-1,b=1<<M,B=b-1,n===is&&b>fn||n===pn&&b>Zn)return 1;for(;;){mt=l-A,a[u]+1<C?(Y=0,V=a[u]):a[u]>=C?(Y=U[a[u]-C],V=N[a[u]-C]):(Y=96,V=0),y=1<<l-A,E=1<<p,f=E;do E-=y,i[q+(w>>A)+E]=mt<<24|Y<<16|V|0;while(E!==0);for(y=1<<l-1;w&y;)y>>=1;if(y!==0?(w&=y-1,w+=y):w=0,u++,--F[l]===0){if(l===d)break;l=t[e+a[u]]}if(l>M&&(w&B)!==I){for(A===0&&(A=M),q+=f,p=l-A,x=1<<p;p+A<d&&(x-=F[p+A],!(x<=0));)p++,x<<=1;if(b+=1<<p,n===is&&b>fn||n===pn&&b>Zn)return 1;I=w&B,i[I]=M<<24|p<<16|q-L|0}}return w!==0&&(i[q+w]=l-A<<24|64<<16|0),o.bits=M,0};var n1=ba;const Aa=0,Ei=1,yi=2,{Z_FINISH:mn,Z_BLOCK:Ea,Z_TREES:q1,Z_OK:qe,Z_STREAM_END:ya,Z_NEED_DICT:Sa,Z_STREAM_ERROR:jt,Z_DATA_ERROR:Si,Z_MEM_ERROR:qi,Z_BUF_ERROR:qa,Z_DEFLATED:wn}=Pe,Y1=16180,_n=16181,xn=16182,vn=16183,bn=16184,An=16185,En=16186,yn=16187,Sn=16188,qn=16189,z1=16190,le=16191,Ls=16192,Tn=16193,rs=16194,Pn=16195,In=16196,Cn=16197,Bn=16198,T1=16199,P1=16200,Fn=16201,kn=16202,Rn=16203,Nn=16204,zn=16205,as=16206,On=16207,Dn=16208,ft=16209,Ti=16210,Pi=16211,Ta=852,Pa=592,Ia=15,Ca=Ia,Hn=n=>(n>>>24&255)+(n>>>8&65280)+((n&65280)<<8)+((n&255)<<24);function Ba(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Ie=n=>{if(!n)return 1;const t=n.state;return!t||t.strm!==n||t.mode<Y1||t.mode>Pi?1:0},Ii=n=>{if(Ie(n))return jt;const t=n.state;return n.total_in=n.total_out=t.total=0,n.msg="",t.wrap&&(n.adler=t.wrap&1),t.mode=Y1,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(Ta),t.distcode=t.distdyn=new Int32Array(Pa),t.sane=1,t.back=-1,qe},Ci=n=>{if(Ie(n))return jt;const t=n.state;return t.wsize=0,t.whave=0,t.wnext=0,Ii(n)},Bi=(n,t)=>{let e;if(Ie(n))return jt;const s=n.state;return t<0?(e=0,t=-t):(e=(t>>4)+5,t<48&&(t&=15)),t&&(t<8||t>15)?jt:(s.window!==null&&s.wbits!==t&&(s.window=null),s.wrap=e,s.wbits=t,Ci(n))},Fi=(n,t)=>{if(!n)return jt;const e=new Ba;n.state=e,e.strm=n,e.window=null,e.mode=Y1;const s=Bi(n,t);return s!==qe&&(n.state=null),s},Fa=n=>Fi(n,Ca);let Vn=!0,os,ls;const ka=n=>{if(Vn){os=new Int32Array(512),ls=new Int32Array(32);let t=0;for(;t<144;)n.lens[t++]=8;for(;t<256;)n.lens[t++]=9;for(;t<280;)n.lens[t++]=7;for(;t<288;)n.lens[t++]=8;for(n1(Ei,n.lens,0,288,os,0,n.work,{bits:9}),t=0;t<32;)n.lens[t++]=5;n1(yi,n.lens,0,32,ls,0,n.work,{bits:5}),Vn=!1}n.lencode=os,n.lenbits=9,n.distcode=ls,n.distbits=5},ki=(n,t,e,s)=>{let i;const L=n.state;return L.window===null&&(L.wsize=1<<L.wbits,L.wnext=0,L.whave=0,L.window=new Uint8Array(L.wsize)),s>=L.wsize?(L.window.set(t.subarray(e-L.wsize,e),0),L.wnext=0,L.whave=L.wsize):(i=L.wsize-L.wnext,i>s&&(i=s),L.window.set(t.subarray(e-s,e-s+i),L.wnext),s-=i,s?(L.window.set(t.subarray(e-s,e),0),L.wnext=s,L.whave=L.wsize):(L.wnext+=i,L.wnext===L.wsize&&(L.wnext=0),L.whave<L.wsize&&(L.whave+=i))),0},Ra=(n,t)=>{let e,s,i,L,a,o,h,l,u,f,d,M,p,A,x=0,b,w,y,E,I,B,q,N;const C=new Uint8Array(4);let F,T;const U=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(Ie(n)||!n.output||!n.input&&n.avail_in!==0)return jt;e=n.state,e.mode===le&&(e.mode=Ls),a=n.next_out,i=n.output,h=n.avail_out,L=n.next_in,s=n.input,o=n.avail_in,l=e.hold,u=e.bits,f=o,d=h,N=qe;t:for(;;)switch(e.mode){case Y1:if(e.wrap===0){e.mode=Ls;break}for(;u<16;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(e.wrap&2&&l===35615){e.wbits===0&&(e.wbits=15),e.check=0,C[0]=l&255,C[1]=l>>>8&255,e.check=yt(e.check,C,2,0),l=0,u=0,e.mode=_n;break}if(e.head&&(e.head.done=!1),!(e.wrap&1)||(((l&255)<<8)+(l>>8))%31){n.msg="incorrect header check",e.mode=ft;break}if((l&15)!==wn){n.msg="unknown compression method",e.mode=ft;break}if(l>>>=4,u-=4,q=(l&15)+8,e.wbits===0&&(e.wbits=q),q>15||q>e.wbits){n.msg="invalid self size",e.mode=ft;break}e.dmax=1<<e.wbits,e.flags=0,n.adler=e.check=1,e.mode=l&512?qn:le,l=0,u=0;break;case _n:for(;u<16;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(e.flags=l,(e.flags&255)!==wn){n.msg="unknown compression method",e.mode=ft;break}if(e.flags&57344){n.msg="unknown header flags set",e.mode=ft;break}e.head&&(e.head.text=l>>8&1),e.flags&512&&e.wrap&4&&(C[0]=l&255,C[1]=l>>>8&255,e.check=yt(e.check,C,2,0)),l=0,u=0,e.mode=xn;case xn:for(;u<32;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}e.head&&(e.head.time=l),e.flags&512&&e.wrap&4&&(C[0]=l&255,C[1]=l>>>8&255,C[2]=l>>>16&255,C[3]=l>>>24&255,e.check=yt(e.check,C,4,0)),l=0,u=0,e.mode=vn;case vn:for(;u<16;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}e.head&&(e.head.xflags=l&255,e.head.os=l>>8),e.flags&512&&e.wrap&4&&(C[0]=l&255,C[1]=l>>>8&255,e.check=yt(e.check,C,2,0)),l=0,u=0,e.mode=bn;case bn:if(e.flags&1024){for(;u<16;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}e.length=l,e.head&&(e.head.extra_len=l),e.flags&512&&e.wrap&4&&(C[0]=l&255,C[1]=l>>>8&255,e.check=yt(e.check,C,2,0)),l=0,u=0}else e.head&&(e.head.extra=null);e.mode=An;case An:if(e.flags&1024&&(M=e.length,M>o&&(M=o),M&&(e.head&&(q=e.head.extra_len-e.length,e.head.extra||(e.head.extra=new Uint8Array(e.head.extra_len)),e.head.extra.set(s.subarray(L,L+M),q)),e.flags&512&&e.wrap&4&&(e.check=yt(e.check,s,M,L)),o-=M,L+=M,e.length-=M),e.length))break t;e.length=0,e.mode=En;case En:if(e.flags&2048){if(o===0)break t;M=0;do q=s[L+M++],e.head&&q&&e.length<65536&&(e.head.name+=String.fromCharCode(q));while(q&&M<o);if(e.flags&512&&e.wrap&4&&(e.check=yt(e.check,s,M,L)),o-=M,L+=M,q)break t}else e.head&&(e.head.name=null);e.length=0,e.mode=yn;case yn:if(e.flags&4096){if(o===0)break t;M=0;do q=s[L+M++],e.head&&q&&e.length<65536&&(e.head.comment+=String.fromCharCode(q));while(q&&M<o);if(e.flags&512&&e.wrap&4&&(e.check=yt(e.check,s,M,L)),o-=M,L+=M,q)break t}else e.head&&(e.head.comment=null);e.mode=Sn;case Sn:if(e.flags&512){for(;u<16;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(e.wrap&4&&l!==(e.check&65535)){n.msg="header crc mismatch",e.mode=ft;break}l=0,u=0}e.head&&(e.head.hcrc=e.flags>>9&1,e.head.done=!0),n.adler=e.check=0,e.mode=le;break;case qn:for(;u<32;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}n.adler=e.check=Hn(l),l=0,u=0,e.mode=z1;case z1:if(e.havedict===0)return n.next_out=a,n.avail_out=h,n.next_in=L,n.avail_in=o,e.hold=l,e.bits=u,Sa;n.adler=e.check=1,e.mode=le;case le:if(t===Ea||t===q1)break t;case Ls:if(e.last){l>>>=u&7,u-=u&7,e.mode=as;break}for(;u<3;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}switch(e.last=l&1,l>>>=1,u-=1,l&3){case 0:e.mode=Tn;break;case 1:if(ka(e),e.mode=T1,t===q1){l>>>=2,u-=2;break t}break;case 2:e.mode=In;break;case 3:n.msg="invalid block type",e.mode=ft}l>>>=2,u-=2;break;case Tn:for(l>>>=u&7,u-=u&7;u<32;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if((l&65535)!==(l>>>16^65535)){n.msg="invalid stored block lengths",e.mode=ft;break}if(e.length=l&65535,l=0,u=0,e.mode=rs,t===q1)break t;case rs:e.mode=Pn;case Pn:if(M=e.length,M){if(M>o&&(M=o),M>h&&(M=h),M===0)break t;i.set(s.subarray(L,L+M),a),o-=M,L+=M,h-=M,a+=M,e.length-=M;break}e.mode=le;break;case In:for(;u<14;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(e.nlen=(l&31)+257,l>>>=5,u-=5,e.ndist=(l&31)+1,l>>>=5,u-=5,e.ncode=(l&15)+4,l>>>=4,u-=4,e.nlen>286||e.ndist>30){n.msg="too many length or distance symbols",e.mode=ft;break}e.have=0,e.mode=Cn;case Cn:for(;e.have<e.ncode;){for(;u<3;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}e.lens[U[e.have++]]=l&7,l>>>=3,u-=3}for(;e.have<19;)e.lens[U[e.have++]]=0;if(e.lencode=e.lendyn,e.lenbits=7,F={bits:e.lenbits},N=n1(Aa,e.lens,0,19,e.lencode,0,e.work,F),e.lenbits=F.bits,N){n.msg="invalid code lengths set",e.mode=ft;break}e.have=0,e.mode=Bn;case Bn:for(;e.have<e.nlen+e.ndist;){for(;x=e.lencode[l&(1<<e.lenbits)-1],b=x>>>24,w=x>>>16&255,y=x&65535,!(b<=u);){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(y<16)l>>>=b,u-=b,e.lens[e.have++]=y;else{if(y===16){for(T=b+2;u<T;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(l>>>=b,u-=b,e.have===0){n.msg="invalid bit length repeat",e.mode=ft;break}q=e.lens[e.have-1],M=3+(l&3),l>>>=2,u-=2}else if(y===17){for(T=b+3;u<T;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}l>>>=b,u-=b,q=0,M=3+(l&7),l>>>=3,u-=3}else{for(T=b+7;u<T;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}l>>>=b,u-=b,q=0,M=11+(l&127),l>>>=7,u-=7}if(e.have+M>e.nlen+e.ndist){n.msg="invalid bit length repeat",e.mode=ft;break}for(;M--;)e.lens[e.have++]=q}}if(e.mode===ft)break;if(e.lens[256]===0){n.msg="invalid code -- missing end-of-block",e.mode=ft;break}if(e.lenbits=9,F={bits:e.lenbits},N=n1(Ei,e.lens,0,e.nlen,e.lencode,0,e.work,F),e.lenbits=F.bits,N){n.msg="invalid literal/lengths set",e.mode=ft;break}if(e.distbits=6,e.distcode=e.distdyn,F={bits:e.distbits},N=n1(yi,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,F),e.distbits=F.bits,N){n.msg="invalid distances set",e.mode=ft;break}if(e.mode=T1,t===q1)break t;case T1:e.mode=P1;case P1:if(o>=6&&h>=258){n.next_out=a,n.avail_out=h,n.next_in=L,n.avail_in=o,e.hold=l,e.bits=u,ma(n,d),a=n.next_out,i=n.output,h=n.avail_out,L=n.next_in,s=n.input,o=n.avail_in,l=e.hold,u=e.bits,e.mode===le&&(e.back=-1);break}for(e.back=0;x=e.lencode[l&(1<<e.lenbits)-1],b=x>>>24,w=x>>>16&255,y=x&65535,!(b<=u);){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(w&&!(w&240)){for(E=b,I=w,B=y;x=e.lencode[B+((l&(1<<E+I)-1)>>E)],b=x>>>24,w=x>>>16&255,y=x&65535,!(E+b<=u);){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}l>>>=E,u-=E,e.back+=E}if(l>>>=b,u-=b,e.back+=b,e.length=y,w===0){e.mode=zn;break}if(w&32){e.back=-1,e.mode=le;break}if(w&64){n.msg="invalid literal/length code",e.mode=ft;break}e.extra=w&15,e.mode=Fn;case Fn:if(e.extra){for(T=e.extra;u<T;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}e.length+=l&(1<<e.extra)-1,l>>>=e.extra,u-=e.extra,e.back+=e.extra}e.was=e.length,e.mode=kn;case kn:for(;x=e.distcode[l&(1<<e.distbits)-1],b=x>>>24,w=x>>>16&255,y=x&65535,!(b<=u);){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(!(w&240)){for(E=b,I=w,B=y;x=e.distcode[B+((l&(1<<E+I)-1)>>E)],b=x>>>24,w=x>>>16&255,y=x&65535,!(E+b<=u);){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}l>>>=E,u-=E,e.back+=E}if(l>>>=b,u-=b,e.back+=b,w&64){n.msg="invalid distance code",e.mode=ft;break}e.offset=y,e.extra=w&15,e.mode=Rn;case Rn:if(e.extra){for(T=e.extra;u<T;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}e.offset+=l&(1<<e.extra)-1,l>>>=e.extra,u-=e.extra,e.back+=e.extra}if(e.offset>e.dmax){n.msg="invalid distance too far back",e.mode=ft;break}e.mode=Nn;case Nn:if(h===0)break t;if(M=d-h,e.offset>M){if(M=e.offset-M,M>e.whave&&e.sane){n.msg="invalid distance too far back",e.mode=ft;break}M>e.wnext?(M-=e.wnext,p=e.wsize-M):p=e.wnext-M,M>e.length&&(M=e.length),A=e.window}else A=i,p=a-e.offset,M=e.length;M>h&&(M=h),h-=M,e.length-=M;do i[a++]=A[p++];while(--M);e.length===0&&(e.mode=P1);break;case zn:if(h===0)break t;i[a++]=e.length,h--,e.mode=P1;break;case as:if(e.wrap){for(;u<32;){if(o===0)break t;o--,l|=s[L++]<<u,u+=8}if(d-=h,n.total_out+=d,e.total+=d,e.wrap&4&&d&&(n.adler=e.check=e.flags?yt(e.check,i,d,a-d):Z1(e.check,i,d,a-d)),d=h,e.wrap&4&&(e.flags?l:Hn(l))!==e.check){n.msg="incorrect data check",e.mode=ft;break}l=0,u=0}e.mode=On;case On:if(e.wrap&&e.flags){for(;u<32;){if(o===0)break t;o--,l+=s[L++]<<u,u+=8}if(e.wrap&4&&l!==(e.total&4294967295)){n.msg="incorrect length check",e.mode=ft;break}l=0,u=0}e.mode=Dn;case Dn:N=ya;break t;case ft:N=Si;break t;case Ti:return qi;case Pi:default:return jt}return n.next_out=a,n.avail_out=h,n.next_in=L,n.avail_in=o,e.hold=l,e.bits=u,(e.wsize||d!==n.avail_out&&e.mode<ft&&(e.mode<as||t!==mn))&&ki(n,n.output,n.next_out,d-n.avail_out),f-=n.avail_in,d-=n.avail_out,n.total_in+=f,n.total_out+=d,e.total+=d,e.wrap&4&&d&&(n.adler=e.check=e.flags?yt(e.check,i,d,n.next_out-d):Z1(e.check,i,d,n.next_out-d)),n.data_type=e.bits+(e.last?64:0)+(e.mode===le?128:0)+(e.mode===T1||e.mode===rs?256:0),(f===0&&d===0||t===mn)&&N===qe&&(N=qa),N},Na=n=>{if(Ie(n))return jt;let t=n.state;return t.window&&(t.window=null),n.state=null,qe},za=(n,t)=>{if(Ie(n))return jt;const e=n.state;return e.wrap&2?(e.head=t,t.done=!1,qe):jt},Oa=(n,t)=>{const e=t.length;let s,i,L;return Ie(n)||(s=n.state,s.wrap!==0&&s.mode!==z1)?jt:s.mode===z1&&(i=1,i=Z1(i,t,e,0),i!==s.check)?Si:(L=ki(n,t,e,e),L?(s.mode=Ti,qi):(s.havedict=1,qe))};var Da=Ci,Ha=Bi,Va=Ii,Ya=Fa,Xa=Fi,Ga=Ra,Ua=Na,Wa=za,Ja=Oa,Qa="pako inflate (from Nodeca project)",Me={inflateReset:Da,inflateReset2:Ha,inflateResetKeep:Va,inflateInit:Ya,inflateInit2:Xa,inflate:Ga,inflateEnd:Ua,inflateGetHeader:Wa,inflateSetDictionary:Ja,inflateInfo:Qa};function ja(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var Ka=ja;const Ri=Object.prototype.toString,{Z_NO_FLUSH:$a,Z_FINISH:t2,Z_OK:m1,Z_STREAM_END:hs,Z_NEED_DICT:cs,Z_STREAM_ERROR:e2,Z_DATA_ERROR:Yn,Z_MEM_ERROR:s2}=Pe;function v1(n){this.options=V1.assign({chunkSize:1024*64,windowBits:15,to:""},n||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,t.windowBits===0&&(t.windowBits=-15)),t.windowBits>=0&&t.windowBits<16&&!(n&&n.windowBits)&&(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(t.windowBits&15||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new bi,this.strm.avail_out=0;let e=Me.inflateInit2(this.strm,t.windowBits);if(e!==m1)throw new Error(ye[e]);if(this.header=new Ka,Me.inflateGetHeader(this.strm,this.header),t.dictionary&&(typeof t.dictionary=="string"?t.dictionary=p1.string2buf(t.dictionary):Ri.call(t.dictionary)==="[object ArrayBuffer]"&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(e=Me.inflateSetDictionary(this.strm,t.dictionary),e!==m1)))throw new Error(ye[e])}v1.prototype.push=function(n,t){const e=this.strm,s=this.options.chunkSize,i=this.options.dictionary;let L,a,o;if(this.ended)return!1;for(t===~~t?a=t:a=t===!0?t2:$a,Ri.call(n)==="[object ArrayBuffer]"?e.input=new Uint8Array(n):e.input=n,e.next_in=0,e.avail_in=e.input.length;;){for(e.avail_out===0&&(e.output=new Uint8Array(s),e.next_out=0,e.avail_out=s),L=Me.inflate(e,a),L===cs&&i&&(L=Me.inflateSetDictionary(e,i),L===m1?L=Me.inflate(e,a):L===Yn&&(L=cs));e.avail_in>0&&L===hs&&e.state.wrap>0&&n[e.next_in]!==0;)Me.inflateReset(e),L=Me.inflate(e,a);switch(L){case e2:case Yn:case cs:case s2:return this.onEnd(L),this.ended=!0,!1}if(o=e.avail_out,e.next_out&&(e.avail_out===0||L===hs))if(this.options.to==="string"){let h=p1.utf8border(e.output,e.next_out),l=e.next_out-h,u=p1.buf2string(e.output,h);e.next_out=l,e.avail_out=s-l,l&&e.output.set(e.output.subarray(h,h+l),0),this.onData(u)}else this.onData(e.output.length===e.next_out?e.output:e.output.subarray(0,e.next_out));if(!(L===m1&&o===0)){if(L===hs)return L=Me.inflateEnd(this.strm),this.onEnd(L),this.ended=!0,!0;if(e.avail_in===0)break}}return!0};v1.prototype.onData=function(n){this.chunks.push(n)};v1.prototype.onEnd=function(n){n===m1&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=V1.flattenChunks(this.chunks)),this.chunks=[],this.err=n,this.msg=this.strm.msg};function Os(n,t){const e=new v1(t);if(e.push(n),e.err)throw e.msg||ye[e.err];return e.result}function n2(n,t){return t=t||{},t.raw=!0,Os(n,t)}var i2=v1,L2=Os,r2=n2,a2=Os,o2=Pe,l2={Inflate:i2,inflate:L2,inflateRaw:r2,ungzip:a2,constants:o2};const{Deflate:h2,deflate:c2,deflateRaw:u2,gzip:M2}=ga,{Inflate:d2,inflate:f2,inflateRaw:Z2,ungzip:g2}=l2;var p2=h2,m2=c2,w2=u2,_2=M2,x2=d2,v2=f2,b2=Z2,A2=g2,E2=Pe,X1={Deflate:p2,deflate:m2,deflateRaw:w2,gzip:_2,Inflate:x2,inflate:v2,inflateRaw:b2,ungzip:A2,constants:E2};const y2=n=>new TextDecoder().decode(n.subarray(0,n.length)),T4=n=>{const t=new Uint8Array(n.split("").map(s=>s.charCodeAt(0))),e=X1.deflate(t);return btoa(String.fromCharCode.apply(null,[...e]))},S2=n=>{try{const t=new Uint8Array(atob(n).split("").map(s=>s.charCodeAt(0))),e=X1.inflate(t);return y2(e)}catch(t){return console.log(`${t}`),null}},P4=n=>{const t=X1.deflate(n);let e="";for(let s=0;s<t.length;s++)e+=String.fromCharCode(t[s]);return btoa(e)},I4=n=>{try{const t=new Uint8Array(atob(n).split("").map(e=>e.charCodeAt(0)));return X1.inflate(t)}catch(t){return console.log(`${t}`),null}},C1=JSON.parse(S2("")),Xe=[],q2=n=>Xe.find(t=>rt.isEqual(t.descriptor,n))??null,T2=n=>{const t=q2(n.descriptor);return t||(Xe.find(e=>fL(n,e))??null)},Ni=n=>Xe.find(t=>t.name===n)??null,P2=(n,t)=>{const e=T2(n);return e||(Xe.push(n),ti.set(n,t),n)},C4=()=>({standardPatternBoards:rt.fromPairs(Xe.map(n=>[n.name,$n(n.descriptor)])),planarPatternMaps:rt.fromPairs(Xe.map(n=>[n.name,dL(ti.get(n))])),standardSquareBoardGenerations:j2.map(n=>n.map(t=>t.name)),standardHexagonalBoardGenerations:K2.map(n=>n.map(t=>t.name)),standardTriangularBoardGenerations:$2.map(n=>n.map(t=>t.name)),standardCairoBoardGenerations:t4.map(n=>n.map(t=>t.name)),standardRhombilleBoardGenerations:e4.map(n=>n.map(t=>t.name)),standardSnubSquareBoardGenerations:s4.map(n=>n.map(t=>t.name)),standardTrihexagonalBoardGenerations:n4.map(n=>n.map(t=>t.name)),standardFloretPentagonalBoardGenerations:i4.map(n=>n.map(t=>t.name)),standardDeltoidalTrihexagonalBoardGenerations:L4.map(n=>n.map(t=>t.name)),standardPortugalBoardGenerations:r4.map(n=>n.map(t=>t.name)),standardRhombitrihexagonalBoardGenerations:a4.map(n=>n.map(t=>t.name)),standardPrismaticPentagonalBoardGenerations:o4.map(n=>n.map(t=>t.name)),standardElongatedTriangularBoardGenerations:l4.map(n=>n.map(t=>t.name))});{const n=Object.keys(C1.standardPatternBoards);for(const t of n){let e=new Is(Ps(C1.standardPatternBoards[t]),t);const s=ei(C1.planarPatternMaps[t],e);P2(e,s)}}const It=(n,t)=>{{const e=Ni(n);return k()&&S(e),e}},I2=It("single-edge"),C2=It("vertex-2-exit-none"),B2=It("vertex-2-exit-one"),F2=It("vertex-3-exit-two-adjacent"),k2=It("vertex-4-exit-two-opposite"),R2=It("vertex-4-exit-three-adjacent"),N2=It("vertex-5-exit-two-one"),z2=It("vertex-5-exit-four"),O2=It("vertex-6-exit-triple"),D2=It("vertex-6-exit-two-two"),H2=It("vertex-6-exit-three-one"),V2=It("vertex-6-exit-five"),Y2=It("vertex-2"),X2=It("vertex-3"),G2=It("vertex-4"),U2=It("vertex-5"),W2=It("vertex-6"),J2=[C2,B2,F2,k2,R2,N2,z2,O2,D2,H2,V2],Q2=[Y2,X2,G2,U2,W2],B4=[I2,...J2,...Q2],$t=n=>{const t=n.generate({width:20,height:20});return new ZL(t,n.scale??1)},F4=$t(Kt(gL)),k4=new qL(20,20),R4=$t(Kt(bL)),N4=new SL(10,1,!0),z4=$t(Kt(xL)),O4=$t(Kt(wL)),D4=$t(Kt(pL)),H4=$t(Kt(EL)),V4=$t(Kt(vL)),Y4=$t(Kt(yL)),X4=$t(Kt(mL)),G4=$t(Kt(AL)),U4=$t(Kt(_L)),Xt=(n,t,e)=>C1[t].map(s=>s.map(i=>{const L=Ni(i);return k()&&S(L),L})),j2=Xt("square","standardSquareBoardGenerations"),K2=Xt("hexagonal","standardHexagonalBoardGenerations"),$2=Xt("triangular","standardTriangularBoardGenerations"),t4=Xt("cairo","standardCairoBoardGenerations"),e4=Xt("rhombille","standardRhombilleBoardGenerations"),s4=Xt("snub-square","standardSnubSquareBoardGenerations"),n4=Xt("trihexagonal","standardTrihexagonalBoardGenerations"),i4=Xt("floret-pentagonal","standardFloretPentagonalBoardGenerations"),L4=Xt("deltoidal-trihexagonal","standardDeltoidalTrihexagonalBoardGenerations"),r4=Xt("portugal","standardPortugalBoardGenerations"),a4=Xt("rhombitrihexagonal","standardRhombitrihexagonalBoardGenerations"),o4=Xt("prismatic-pentagonal","standardPrismaticPentagonalBoardGenerations"),l4=Xt("elongated-triangular","standardElongatedTriangularBoardGenerations");export{_4 as $,V4 as A,rL as B,Y4 as C,X4 as D,G4 as E,U4 as F,nn as G,SL as H,b4 as I,A4 as J,E4 as K,O1 as L,y4 as M,S4 as N,q4 as O,ZL as P,Kt as Q,xL as R,Yt as S,bL as T,wL as U,gL as V,pL as W,m4 as X,EL as Y,vL as Z,rt as _,LL as a,l4 as a$,x4 as a0,w4 as a1,yL as a2,Z4 as a3,v4 as a4,g4 as a5,mL as a6,p4 as a7,AL as a8,_L as a9,P4 as aA,I4 as aB,Ki as aC,t0 as aD,P0 as aE,St as aF,C0 as aG,s0 as aH,k0 as aI,F0 as aJ,R0 as aK,t1 as aL,I2 as aM,C2 as aN,B2 as aO,F2 as aP,k2 as aQ,R2 as aR,Y2 as aS,X2 as aT,Ni as aU,q2 as aV,i4 as aW,L4 as aX,r4 as aY,a4 as aZ,o4 as a_,d4 as aa,f4 as ab,Dt as ac,T4 as ad,I0 as ae,Is as af,fL as ag,$n as ah,B4 as ai,en as aj,ze as ak,$2 as al,Jn as am,K2 as an,e4 as ao,t4 as ap,s4 as aq,n4 as ar,dL as as,Ps as at,ei as au,B0 as av,sL as aw,G0 as ax,Qn as ay,C4 as az,iL as b,nL as c,Cs as d,k as e,S as f,si as g,jn as h,k1 as i,M4 as j,$i as k,Ts as l,qL as m,S2 as n,uL as o,ti as p,k4 as q,N4 as r,j2 as s,R4 as t,F4 as u,G2 as v,z4 as w,O4 as x,D4 as y,H4 as z};
