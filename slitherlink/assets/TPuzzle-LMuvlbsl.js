import{V as o,P as c}from"./UnivariatePolynomial-1rLpyqfN.js";import"./PhetioControlledVisibilityProperty-Dss8jcpz.js";import"./TextPushButton-DBC8F85l.js";import{C as l,G as p,d as u,e as y,B as m}from"./BasicPuzzle-CZB302k-.js";import{c as d,d as w}from"./compression-CFlaLHJe.js";import{j as a,H as n,d as g,k as f}from"./getCoordinateClusteredMap-Bd_wM-c0.js";const h=e=>e instanceof a?{type:"SquareBoard",width:e.width,height:e.height}:e instanceof n?{type:"HexagonalBoard",radius:e.radius,scale:e.scale,isPointyTop:e.isPointyTop,holeRadius:e.holeRadius}:{type:"BaseBoard",vertices:e.vertices.map(t=>({x:t.logicalCoordinates.x,y:t.logicalCoordinates.y,vx:t.viewCoordinates.x,vy:t.viewCoordinates.y})),faces:e.faces.map(t=>({x:t.logicalCoordinates.x,y:t.logicalCoordinates.y,vertices:t.vertices.map(r=>e.vertices.indexOf(r))}))},v=e=>{if(e.type==="BaseBoard"){const t=e.vertices.map(s=>({logicalCoordinates:new o(s.x,s.y),viewCoordinates:new o(s.vx,s.vy)})),r=e.faces.map(s=>({logicalCoordinates:new o(s.x,s.y),vertices:s.vertices.map(i=>t[i])}));return new g(f({vertices:t,faces:r}))}else{if(e.type==="SquareBoard")return new a(e.width,e.height);if(e.type==="HexagonalBoard")return new n(e.radius,e.scale,e.isPointyTop,e.holeRadius);throw new Error("Unknown board")}},S=(e,t)=>{const r=t.type;if(r==="CompleteData")return l.deserializeState(e,t);if(r==="FaceValueData")return p.deserializeState(e,t);if(r==="EdgeData")return u.deserializeState(e,t);if(r==="SimpleRegionData")return y.deserializeState(e,t);throw new Error(`Unknown action type: ${r}, could not deserialize`)},G=e=>({board:e.board,stateProperty:new c(e.state)}),C=e=>({version:1,board:h(e.board),state:e.stateProperty.value.serializeState(e.board)}),D=e=>{if(e.version!==1)throw new Error(`Unsupported puzzle version: ${e.version}`);const t=v(e.board),r=S(t,e.state);return new m(t,r)},H=e=>{const t=C(e);return d(JSON.stringify(t))},T=e=>{try{const t=JSON.parse(w(e));return D(t)}catch(t){return console.error(t),null}};export{H as a,T as p,G as t};
