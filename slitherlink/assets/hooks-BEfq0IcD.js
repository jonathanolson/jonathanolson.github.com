import"./Vector2Property-95p6aBvi.js";import{N as c,h as u}from"./PhetioControlledVisibilityProperty-Dfpbwmh8.js";import{t as w}from"./patternBoards-DyfRjV5l.js";import{B as i}from"./BinaryRuleCollection-ji_RLyUt.js";import{B as r}from"./BinaryRuleSequence-D4-WD2l2.js";import{s as z,d as s}from"./PatternRule-BA2nP0w7.js";import{B as C}from"./BinaryMixedRuleGroup-BQETPAyr.js";import"./getCoordinateClusteredMap-DnTHDDo2.js";import"./getPeriodicTilingGenerator-BAI_tkyR.js";import"./FeatureSet-CMNix-co.js";import"./FaceColorDualFeature-B3Jbv5ZG.js";import"./operations-CXBIDRbn.js";import"./logic-solver-DfLyjx-d.js";import"./PatternBoardSolver-D30pPXgS.js";import"./Highlander-qeHSI-Wz.js";import"./generalPatternBoardGenerations-BAr_gTbc.js";import"./RichSolution-Cj_kfC3b.js";const m=new c,g=new c({renderer:"svg",children:[m]}),a=new u(g,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(a.domElement);a.setWidthHeight(window.innerWidth,window.innerHeight);window.standardSquareBoardGenerations=w;window.getSequenceName=e=>r.getName(e);window.getEmptySequence=e=>r.empty(e).serialize();window.getSequenceStatus=e=>r.deserialize(e).getStatusString();window.getNextBoardInSequence=e=>{const o=r.deserialize(e).getNextBoard();return o?z(o):null};window.getSequenceWithProcessingBoard=(e,t)=>{const o=r.deserialize(e),n=s(t);return o.addProcessingBoard(n),o.serialize()};window.getSequenceWithoutProcessingBoard=(e,t)=>{const o=r.deserialize(e),n=s(t);return o.removeProcessingBoard(n),o.serialize()};window.getSequenceWithCollection=(e,t,o)=>{const n=r.deserialize(e),l=s(t),d=i.deserialize(o);return n.addProcessedBoardCollection(l,d),n.serialize()};window.getCollectionForSequence=(e,t)=>{const o=r.deserialize(e),n=s(t);return o.getCollectionForBoard(n).serialize()};window.withCollection=(e,t)=>{const o=i.deserialize(e),n=i.deserialize(t);return o.withCollection(n).serialize()};window.withCollectionNonequal=(e,t)=>{const o=i.deserialize(e),n=i.deserialize(t);return o.withCollectionNonequal(n).serialize()};window.withCollectionNonredundant=(e,t)=>{const o=i.deserialize(e),n=i.deserialize(t);return o.withCollectionNonredundant(n).serialize()};window.withoutCollectionNonequal=(e,t)=>{const o=i.deserialize(e),n=i.deserialize(t);return o.withoutCollectionNonequal(n).serialize()};window.withoutCollectionNonredundant=(e,t)=>{const o=i.deserialize(e),n=i.deserialize(t);return o.withoutCollectionNonredundant(n).serialize()};window.collectionsToSortedMixedGroup=(e,t)=>{const o=e?i.deserialize(e):null,n=t?i.deserialize(t):null;console.log("main count",o?o.size:0),console.log("highlander count",n?n.size:0);const l=C.fromCollections(o,n);return console.log("rule count",l.size),l.sortedDefault().serialize()};
