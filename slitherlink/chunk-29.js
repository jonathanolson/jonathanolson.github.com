var O=Object.defineProperty;var H=(m,a,o)=>a in m?O(m,a,{enumerable:!0,configurable:!0,writable:!0,value:o}):m[a]=o;var w=(m,a,o)=>H(m,typeof a!="symbol"?a+"":a,o);import{n as I,d as v,e as b,H as y}from"./chunk-18.js";import{C as g,E as h}from"./chunk-28.js";import{T as D,O as x}from"./chunk-16.js";import"./chunk-17.js";class l{constructor(a,o){w(this,"stateProperty");this.board=a,this.stateProperty=new D(o)}static fromSolvedPuzzle(a){return new l(a.board,a.cleanState)}static loadDefaultPuzzle(){return l.loadFromSimpleString("10x18 .3.1....1..032....0......3.1....02.3...02....3.1...........2011.01..01.......3...2302..........1102...3.......22..03.0322...........3.2....13...2.30....2.2......1....103..2....1.3.")}static loadFromSimpleString(a){const[o,d]=a.split(" "),[c,p]=o.split("x").map(e=>parseInt(e)),u=new I(c,p),r=g.fromFaces(u,e=>{const n=e.logicalCoordinates.y*c+e.logicalCoordinates.x,s=d[n];return s==="."?null:parseInt(s)});return new l(u,r)}static loadDeprecatedScalaString(a){if(!a.includes("!"))return l.loadFromSimpleString(a);const o=1,d=2,c=4,p=8,[u,r]=a.split(" "),[e,n]=u.split("x").map(t=>parseInt(t)),s=new I(e,n),C=t=>3*(t.logicalCoordinates.y*e+t.logicalCoordinates.x)+1,S=(t,f)=>{const i=C(t),F=parseInt(r[i+1]),E=parseInt(r[i+2]);return F&f?h.BLACK:E&f?h.RED:h.WHITE},T=g.fromFacesEdges(s,t=>{const f=r[C(t)];return f==="."?null:parseInt(f)},t=>{if((t.start.logicalCoordinates.x===t.end.logicalCoordinates.x?x.VERTICAL:x.HORIZONTAL)===x.HORIZONTAL){const i=t.start.logicalCoordinates.x<t.end.logicalCoordinates.x?t.forwardFace:t.reversedFace,F=t.start.logicalCoordinates.x<t.end.logicalCoordinates.x?t.reversedFace:t.forwardFace;return i?S(i,d):S(F,p)}else{const i=t.start.logicalCoordinates.y<t.end.logicalCoordinates.y?t.reversedFace:t.forwardFace,F=t.start.logicalCoordinates.y<t.end.logicalCoordinates.y?t.forwardFace:t.reversedFace;return i?S(i,o):S(F,c)}});return new l(s,T)}static loadPointyTopHexagonalString(a){v()&&b(a.startsWith("h")||a.startsWith("H"));const[o,d]=a.slice(1).split(" "),c=parseInt(o),p=new y(c,Math.sqrt(3)/2,a.startsWith("h")),u=y.enumeratePointyFaceCoordinates(c),r=new Map;for(let n=0;n<d.length;n++){const s=d[n];if(s===".")continue;const C=u[n];r.set(C,parseInt(s))}const e=g.fromFaces(p,g.faceMapLookup(r));return new l(p,e)}}export{l as B};
