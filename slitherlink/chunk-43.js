import{C as x}from"./chunk-28.js";import{j as S,s as d,M as w,k as I}from"./chunk-30.js";import{k as c}from"./chunk-16.js";import{_ as O,d as h,e as g}from"./chunk-18.js";import{s as F}from"./chunk-22.js";class M extends Error{constructor(){super("Interrupted")}}const b=async function(e,r){if(await F(e),r.value)throw new M},D=async(e,r,f)=>{let o=0;for(;o++<100;){const a=x.fromFaces(e,()=>null),l=c.shuffle(e.faces);let i=-1,u=[];const s=n=>{try{return u=d(e,n,{maxIterations:1e4,failOnMultipleSolutions:!0}),u.length}catch(t){if(t instanceof w)return 2;if(t instanceof I)return 0;throw t}};for(const n of l){r&&await b(0,r);let t=c.shuffle(O.range(0,n.edges.length));t[0]===0&&(t=c.shuffle(t));for(const m of t){const p=a.createDelta();if(p.setFaceValue(n,m),i=s(p),i>=1){p.apply(a),f&&f.emit(e.faces.indexOf(n),m);break}}if(i===1)break}if(i===1)return S(e,a,u[0])}throw new Error("Failed to generate a puzzle, board might not be solvable")},j=async(e,r=()=>!0,f,o)=>{const a=e.board,l=e.cleanState.clone(),i=c.shuffle(a.faces),u=s=>{try{return d(a,s,{maxIterations:1e4,failOnMultipleSolutions:!0}),!1}catch(n){if(n instanceof w)return!0;throw n}};h()&&g(!u(l),"Initial state has multiple solutions"),h()&&g(r(a,l.clone()),"Initial state is not easy enough");for(const s of i){f&&await b(0,f);const n=l.getFaceValue(s);if(n===null){o&&o.emit(a.faces.indexOf(s),null);continue}const t=l.createDelta();t.setFaceValue(s,null),!u(t)&&r(a,t.clone())?(t.apply(l),o&&o.emit(a.faces.indexOf(s),null)):o&&o.emit(a.faces.indexOf(s),n)}return S(e.board,l,e.blackEdges)};export{M as I,j as a,D as g,b as i};
