import{C as v}from"./chess-BbN_MqKp.js";function b(u){return new Worker(""+new URL("stockfish-nnue-16-single-CfRI4BjP.js",import.meta.url).href,{name:u==null?void 0:u.name})}let m=null;const p=()=>(m||(m=new b),m);p();const g=["depth","seldepth","time","nodes","pv","multipv","score","currmove","currmovenumber","hashfull","nps","tbhits","sbhits","cpuload","string","refutation","currline"];class f{constructor(e){this.isLoaded=!1,this.isReady=!1,this.taskQueue=[],this.infos=[],this.currentTask=null;const n=(e==null?void 0:e.hashSizeInMegabytes)??16;this.worker=p(),this.sendCommand("uci"),this.sendCommand("isready"),this.sendCommand("setoption name Use NNUE value true"),this.sendCommand(`setoption name Hash value ${n}`),this.worker.addEventListener?this.worker.addEventListener("message",this.onMessage.bind(this)):this.worker.on("message",this.onMessage.bind(this))}isBusy(){return this.currentTask!==null}getEvaluation(e,n){return new Promise(s=>{this.taskQueue.push({fen:e,timeString:n,completeCallback:s}),this.checkNextTask()})}getPropertyEvaluation(e,n,s){return new Promise(l=>{this.taskQueue.push({fen:e,timeString:n,infoCallback:a=>{a.pv&&a.score&&(s.value=f.resultFromInfo(e,a))},completeCallback:a=>{s.value=a,l(a)}}),this.checkNextTask()})}startInfiniteEvaluation(e,n,s){this.taskQueue.push({fen:e,timeString:"infinite",startCallback:s==null?void 0:s.start,infoCallback:s==null?void 0:s.info,completeCallback:n}),this.checkNextTask()}stop(){this.sendCommand("stop")}sendCommand(e){this.worker.postMessage(e)}onMessage(e){var a,c,h,d;const n=typeof e=="string"?e:e.data;console.log(n),n==="uciok"&&(this.isLoaded=!0),n==="readyok"&&(this.isReady=!0);const s=n.split(" "),l=s[0];if(l==="info"){const i={};let r=null,t=[];const k=()=>{if(r)if(r==="depth")i.depth=parseInt(t[0],10);else if(r==="seldepth")i.seldepth=parseInt(t[0],10);else if(r==="time")i.time=parseInt(t[0],10);else if(r==="nodes")i.nodes=parseInt(t[0],10);else if(r==="pv")i.pv=t.slice();else if(r==="multipv")i.multipv=parseInt(t[0],10);else if(r==="score"){if(t[0]!=="cp"&&t[0]!=="mate")throw new Error("Invalid score type");i.score={type:t[0],evaluation:parseInt(t[1],10),isLowerBound:t.includes("lowerbound"),isUpperBound:t.includes("upperbound")}}else r==="currmove"?i.currmove=t[0]:r==="currmovenumber"?i.currmovenumber=parseInt(t[0],10):r==="hashfull"?i.hashfull=parseInt(t[0],10):r==="nps"?i.nps=parseInt(t[0],10):r==="tbhits"?i.tbhits=parseInt(t[0],10):r==="sbhits"?i.sbhits=parseInt(t[0],10):r==="cpuload"&&(i.cpuload=parseInt(t[0],10));r=null,t=[]};for(let o=1;o<s.length;o++)s[o]==="string"?i.string=s.slice(o+1).join(" "):g.includes(s[o])?(k(),r=s[o]):t.push(s[o]);k(),this.currentTask&&(this.infos.push(i),(c=(a=this.currentTask).infoCallback)==null||c.call(a,i))}else if(l==="bestmove"){const i=s[1];if(this.currentTask){const r=this.infos.reverse().find(t=>t.score&&t.pv&&t.pv[0]===i);if(r)(d=(h=this.currentTask).completeCallback)==null||d.call(h,f.resultFromInfo(this.currentTask.fen,r)),this.currentTask=null,this.checkNextTask();else throw new Error("No matching info found")}}}checkNextTask(){var n,s;if(this.currentTask)return;const e=this.taskQueue.shift();e&&(this.currentTask=e,this.sendCommand(`position fen ${e.fen}`),this.sendCommand(`go ${e.timeString}`),(s=(n=this.currentTask).startCallback)==null||s.call(n))}static resultFromInfo(e,n){if(!n.pv||!n.score)throw new Error("Invalid result info");const s=n.pv,l=new v(e),a=[];for(const c of s){const h=l.move(c);if(!h)throw new Error("Invalid move");a.push(h)}return{bestMove:a[0].san,bestVerboseMove:a[0],continuation:a,type:n.score.type,evaluation:n.score.evaluation,depth:n.depth??0}}}const w=new f({hashSizeInMegabytes:128});window.getEvaluation=async(u,e)=>w.getEvaluation(u,e);
