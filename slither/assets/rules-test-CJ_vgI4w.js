import"./Vector2Property-DUQoL60W.js";import{N as r,q as l,V as d,r as i}from"./getCoordinateClusteredMap-CiLx8OtO.js";import{av as c,ac as g,aw as p,am as h,ax as w,ay as m,az as u}from"./PuzzleModel-D24vwq4z.js";import{P as B}from"./PlanarMappedPatternBoardNode-CwwkKCDU.js";import{P as f}from"./PatternBoardRuleSet-B_DvC5lY.js";window.assertions.enableAssert();const a=new r,P=new r({renderer:"svg",children:[a]}),t=new l(P,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(t.domElement);t.setWidthHeight(window.innerWidth,window.innerHeight);console.log("test");(async()=>{const o=new d({x:10,y:10,align:"left"});a.addChild(o);const s=e=>{o.addChild(new i(e,{margin:5}))},n=c[0][0];s(new B({patternBoard:n,planarPatternMap:g.get(n)},{labels:!0}));{const e=p[0][0];console.log(h.getSolutions(e,[])),console.log(w(e))}f.createImpliedChained([m,...u],[],{solveEdges:!0,solveFaceColors:!0,solveSectors:!0,highlander:!1}).forEach(e=>{console.log(JSON.stringify(e.serialize()))}),a.bounds.isValid()&&(t.setWidthHeight(Math.ceil(a.right+10),Math.ceil(a.bottom+10)),t.updateDisplay())})();
