import{P as p,s as c,d as h}from"./PatternRule-GYGPQH88.js";import{e as m,f as B}from"./compression-BJfo5iHj.js";import{_ as f}from"./getCoordinateClusteredMap-DnTHDDo2.js";import{g as d}from"./patternBoards-CAxgrjj1.js";class l{constructor(e,t){this.patternBoards=e,this.serializedRules=t}getRules(){const e=[];return this.forEachRule(t=>e.push(t)),e}get size(){return this.serializedRules.length}getRule(e){return p.collectionDeserialize(this.patternBoards,this.serializedRules[e])}forEachRule(e){for(let t=0;t<this.serializedRules.length;t++){const s=p.collectionDeserialize(this.patternBoards,this.serializedRules[t]);e(s)}}addRule(e){this.patternBoards.includes(e.patternBoard)||this.patternBoards.push(e.patternBoard),this.serializedRules.push(e.collectionSerialize(this.patternBoards.indexOf(e.patternBoard)))}addNonredundantRuleSet(e,t=Number.POSITIVE_INFINITY){const s=this.getRules().flatMap(a=>a.getEmbeddedRules(d(a.patternBoard,e.patternBoard)));let r=0,o=0,i=0,n=0;for(const a of e.rules){const u=a.getInputDifficultyScoreA();if(n=Math.max(n,u),e.patternBoard.faces.length>1&&u>t){i++;continue}a.isRedundant(s)||(this.addRule(a),r+=u,o++,s.push(...a.getEmbeddedRules(d(a.patternBoard,e.patternBoard))))}console.log(`added ${o}, skipped ${i} with average score ${Math.round(r/o)}, maxEncounteredScore ${n}`)}combineWith(e){const t=e.getRules();let s=null,r=[];for(let o=0;o<t.length;o++){o%100===0&&console.log(o,t.length);const i=t[o],n=i.patternBoard;n!==s&&(r=this.getRules().flatMap(a=>a.getEmbeddedRules(d(a.patternBoard,n))),s=n),i.isRedundant(r)||(this.addRule(i),r.push(...i.getEmbeddedRules(d(i.patternBoard,n))))}}serialize(){return{patternBoards:this.patternBoards.map(c),rules:m(JSON.stringify(this.serializedRules))}}static deserialize(e){const t=e.patternBoards.map(h),s=B(e.rules);if(s===null)throw console.log(e.rules),new Error("Failed to decompress rules!");{const r=JSON.parse(s);return new l(t,r)}}static empty(){return new l([],[])}static fromRules(e){const t=f.uniq(e.map(r=>r.patternBoard)),s=e.map(r=>r.collectionSerialize(t.indexOf(r.patternBoard)));return new l(t,s)}}export{l as P};
