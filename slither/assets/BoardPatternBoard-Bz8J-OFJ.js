var M=Object.defineProperty;var u=(g,c,e)=>c in g?M(g,c,{enumerable:!0,configurable:!0,writable:!0,value:e}):g[c]=e;var o=(g,c,e)=>(u(g,typeof c!="symbol"?c+"":c,e),e);import{B as v,p as x}from"./patternBoards-BWMN3hEW.js";import{a as r,b as a}from"./createBoardDescriptor-DQiPBFka.js";class E extends v{constructor(e){const t=new Map(e.vertices.map((s,n)=>[s,n])),h=s=>{const n=t.get(s);return r()&&a(n!==void 0),n};super({numNonExitVertices:e.vertices.length,numExitVertices:0,type:"faces",vertexLists:[...e.faces.map(s=>s.vertices.map(h)),e.outerBoundary.map(s=>h(s.start)),...e.innerBoundaries.map(s=>s.map(n=>h(n.start)))]});o(this,"vertexToIndexMap");o(this,"edgeToPatternEdgeMap",new Map);o(this,"patternEdgeToEdgeMap",new Map);o(this,"sectorToPatternSectorMap",new Map);o(this,"patternSectorToSectorMap",new Map);o(this,"outsidePatternFace",null);o(this,"faceToPatternFaceMap",new Map);o(this,"patternFaceToFaceMap",new Map);this.board=e,r()&&a(this.vertices.length===e.vertices.length),r()&&a(this.edges.length===e.edges.length),r()&&a(this.faces.length===e.faces.length+1+e.innerBoundaries.length),this.vertexToIndexMap=t,this.edges.forEach((s,n)=>{r()&&a(s.vertices.length===2);const i=this.getVertex(s.vertices[0]),d=this.getVertex(s.vertices[1]),p=i.getEdgeTo(d);r()&&a(p),this.edgeToPatternEdgeMap.set(p,s),this.patternEdgeToEdgeMap.set(s,p)}),this.sectors.forEach(s=>{r()&&a(s.edges.length===2);const n=this.getEdge(s.edges[0]),i=this.getEdge(s.edges[1]),d=x(n,i);this.sectorToPatternSectorMap.set(d,s),this.patternSectorToSectorMap.set(s,d)}),this.faces.forEach(s=>{r()&&a(s.sectors.length>=3);const i=this.getSector(s.sectors[0]).face;i===null?this.outsidePatternFace=s:this.faceToPatternFaceMap.set(i,s),this.patternFaceToFaceMap.set(s,i)})}getVertex(e){const t=e.index;return r()&&a(t>=0&&t<this.vertices.length),this.board.vertices[t]}getPatternVertex(e){const t=this.vertexToIndexMap.get(e);return r()&&a(t!==void 0),this.vertices[t]}getEdge(e){const t=this.patternEdgeToEdgeMap.get(e);return r()&&a(t!==void 0),t}getPatternEdge(e){const t=this.edgeToPatternEdgeMap.get(e);return r()&&a(t!==void 0),t}getSector(e){const t=this.patternSectorToSectorMap.get(e);return r()&&a(t!==void 0),t}getPatternSector(e){const t=this.sectorToPatternSectorMap.get(e);return r()&&a(t!==void 0),t}getFace(e){const t=this.patternFaceToFaceMap.get(e);return r()&&a(t!==void 0),t}getPatternFace(e){const t=this.faceToPatternFaceMap.get(e);return r()&&a(t!==void 0),t}getOutsidePatternFace(){return r()&&a(this.outsidePatternFace!==null),this.outsidePatternFace}}export{E as B};
