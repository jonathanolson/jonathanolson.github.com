import"./Vector2Property-DCXaH-JP.js";import{N as E,e as x,B as H}from"./PhetioControlledVisibilityProperty-C1zM_Uw1.js";import{k,H as F,_ as h,a as W,b as D}from"./getCoordinateClusteredMap-s__X_7ZN.js";import{p as L,g as M,a as V,s as d,A as y}from"./polygonGenerators-CykoXsTV.js";import{E as z,B as G,s as f}from"./BasicPuzzle-Chl7u5zQ.js";import{P as I,a as v,C as q,c as S}from"./standardSolverFactory-U_y7DXis.js";import"./TextPushButton-BPfgO3qK.js";import{P as K}from"./SATSolver-CBmz_N3P.js";import{P as O}from"./getPeriodicTilingGenerator-qmRzQaR8.js";import"./Theme-C7QtLKXh.js";import"./logic-solver-C8wJkzp2.js";window.assertions.enableAssert();const A=new E,R=new E({renderer:"svg",children:[A]}),c=new x(R,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(c.domElement);c.setWidthHeight(window.innerWidth,window.innerHeight);console.log("test");const T=e=>{const r=e.generate(e.defaultParameterValues);return new O(r,e.scale??1)},P=[new k(10,10),new F(4,1,!0),...L.map(T)];(async()=>{let e=null;const r=new H(!1);for(;;){console.log("board loaded");const t=P[Math.floor(Math.random()*P.length)],b=await M(t,r),p=await V(b,()=>!0,r),l=p.cleanState.clone();p.blackEdges.forEach(m=>l.setEdgeState(m,z.BLACK)),K(t,l);const w=G.fromSolvedPuzzle(p);e&&e.dispose(),e=new I(w,{scale:30,left:20,top:20}),A.addChild(e),c.updateDisplay(),await d(50);const o=w.stateProperty.value.clone(),g=v(t,o),u=()=>{w.stateProperty.value=o.clone(),c.updateDisplay()};let B=0;for(;!f(o);){if(e.clearAnnotationNodes(),B++>1e5)throw new Error("Solver iteration limit exceeded? Looped?");const m=o.clone(),N=g.clone(m),n=g.nextAction();if(n){console.log(n);const s=new q(t,o,l);e.addAnnotationNode(new y(t,n.annotation,S)),u(),await d(0);try{n.apply(s)}catch(i){console.error(i);debugger;const a=N.nextAction();a&&a.apply(s)}n.apply(o)}else if(!f(o)){const s=v(t,o),i=s.nextAction();if(i)throw e.addAnnotationNode(new y(t,i.annotation,S)),u(),await d(0),new Error("Fresh solver should not have any actions");s.dispose();const a=h.find(h.shuffle(t.edges),C=>o.getEdgeState(C)===z.WHITE);if(W()&&D(a),o.setEdgeState(a,l.getEdgeState(a)),console.log("setting white edge to red/black",a),!g.dirty)throw new Error("Solver should be dirty after setting edge state")}u(),await d(0)}if(!f(o))throw new Error("Solver did not solve the puzzle")}})();
