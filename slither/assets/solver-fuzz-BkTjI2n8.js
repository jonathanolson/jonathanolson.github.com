import{N as P,ai as C,aB as H,aG as x,F,E as y,aH as k,H as W,aI as v,aJ as f,aK as D,_ as z,a as G,b as I}from"./getCoordinateCluteredMap-Chq7gexU.js";import{p as L,k as M,l as V,P as K,m as d,A as m,n as q}from"./GenerateNode-DejZ6re5.js";window.assertions.enableAssert();const E=new P,J=new P({renderer:"svg",children:[E]}),c=new C(J,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(c.domElement);c.setWidthHeight(window.innerWidth,window.innerHeight);console.log("test");const O=e=>{const l=e.generate(e.defaultParameterValues);return new q(l,e.scale??1)},S=[new H(10,10),new x(4,1,!0),...L.map(O)];(async()=>{let e=null;const l=new F(!1);for(;;){console.log("board loaded");const a=S[Math.floor(Math.random()*S.length)],A=await M(a,l),w=await V(A,()=>!0,l),r=w.cleanState.clone();w.blackEdges.forEach(h=>r.setEdgeState(h,y.BLACK)),k(a,r);const p=W.fromSolvedPuzzle(w);e&&e.dispose(),e=new K(p,{scale:30,left:20,top:20}),E.addChild(e),c.updateDisplay(),await d(50);const o=p.stateProperty.value.clone(),g=v(a,o),u=()=>{p.stateProperty.value=o.clone(),c.updateDisplay()};let b=0;for(;!f(o);){if(e.clearAnnotationNodes(),b++>1e5)throw new Error("Solver iteration limit exceeded? Looped?");const h=o.clone(),B=g.clone(h),n=g.nextAction();if(n){console.log(n);const s=new D(a,o,r);e.addAnnotationNode(new m(n.annotation)),u(),await d(0);try{n.apply(s)}catch(i){console.error(i);debugger;const t=B.nextAction();t&&t.apply(s)}n.apply(o)}else if(!f(o)){const s=v(a,o),i=s.nextAction();if(i)throw e.addAnnotationNode(new m(i.annotation)),u(),await d(0),new Error("Fresh solver should not have any actions");s.dispose();const t=z.find(z.shuffle(a.edges),N=>o.getEdgeState(N)===y.WHITE);if(G()&&I(t),o.setEdgeState(t,r.getEdgeState(t)),console.log("setting white edge to red/black",t),!g.dirty)throw new Error("Solver should be dirty after setting edge state")}u(),await d(0)}if(!f(o))throw new Error("Solver did not solve the puzzle")}})();
