import"./Vector2Property-95p6aBvi.js";import{N as E,h as x,B as H}from"./PhetioControlledVisibilityProperty-DXvpzwXO.js";import{S as F,H as W,_ as h,e as k,f as D}from"./getCoordinateClusteredMap-DnTHDDo2.js";import{m as L,n as M,o as V,P as G,r as d,a as y,C as I,A as z,c as v}from"./polygonGenerators-B1xs66OU.js";import{E as S,B as q,s as f}from"./BasicPuzzle-BS-Lz1E0.js";import"./TextPushButton-DPrdGe0P.js";import{P as K}from"./SATSolver-BPZC_vN_.js";import{P as O}from"./getPeriodicTilingGenerator-B19VRuYW.js";import"./Theme-BAHTsAQQ.js";import"./logic-solver-DfLyjx-d.js";window.assertions.enableAssert();const A=new E,R=new E({renderer:"svg",children:[A]}),c=new x(R,{allowWebGL:!0,allowBackingScaleAntialiasing:!0,allowSceneOverflow:!1});document.body.appendChild(c.domElement);c.setWidthHeight(window.innerWidth,window.innerHeight);console.log("test");const T=e=>{const r=e.generate(e.defaultParameterValues);return new O(r,e.scale??1)},P=[new F(10,10),new W(4,1,!0),...L.map(T)];(async()=>{let e=null;const r=new H(!1);for(;;){console.log("board loaded");const t=P[Math.floor(Math.random()*P.length)],b=await M(t,r),p=await V(b,()=>!0,r),l=p.cleanState.clone();p.blackEdges.forEach(m=>l.setEdgeState(m,S.BLACK)),K(t,l);const w=q.fromSolvedPuzzle(p);e&&e.dispose(),e=new G(w,{scale:30,left:20,top:20}),A.addChild(e),c.updateDisplay(),await d(50);const o=w.stateProperty.value.clone(),u=y(t,o),g=()=>{w.stateProperty.value=o.clone(),c.updateDisplay()};let B=0;for(;!f(o);){if(e.clearAnnotationNodes(),B++>1e5)throw new Error("Solver iteration limit exceeded? Looped?");const m=o.clone(),N=u.clone(m),n=u.nextAction();if(n){console.log(n);const s=new I(t,o,l);e.addAnnotationNode(new z(t,n.annotation,v)),g(),await d(0);try{n.apply(s)}catch(i){console.error(i);debugger;const a=N.nextAction();a&&a.apply(s)}n.apply(o)}else if(!f(o)){const s=y(t,o),i=s.nextAction();if(i)throw e.addAnnotationNode(new z(t,i.annotation,v)),g(),await d(0),new Error("Fresh solver should not have any actions");s.dispose();const a=h.find(h.shuffle(t.edges),C=>o.getEdgeState(C)===S.WHITE);if(k()&&D(a),o.setEdgeState(a,l.getEdgeState(a)),console.log("setting white edge to red/black",a),!u.dirty)throw new Error("Solver should be dirty after setting edge state")}g(),await d(0)}if(!f(o))throw new Error("Solver did not solve the puzzle")}})();
